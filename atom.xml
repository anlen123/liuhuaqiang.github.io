<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未闻丶死讯的博客</title>
  
  <subtitle>欢迎来到未闻丶死讯的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuhuaqiang.top/"/>
  <updated>2021-03-26T02:36:08.856Z</updated>
  <id>https://liuhuaqiang.top/</id>
  
  <author>
    <name>anlen123</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aop</title>
    <link href="https://liuhuaqiang.top/2021/03/26/aop/"/>
    <id>https://liuhuaqiang.top/2021/03/26/aop/</id>
    <published>2021-03-26T02:02:23.000Z</published>
    <updated>2021-03-26T02:36:08.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOP-基本使用教程"><a href="#AOP-基本使用教程" class="headerlink" title="AOP 基本使用教程"></a>AOP 基本使用教程</h1><h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP?"></a>什么是AOP?</h2><p>AOP简介</p><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。</p><p>为什么使用AOP编程范式？</p><p>分离功能性需求和非功能性需求</p><p>集中处理某一关注点</p><p>侵入性少，增强代码可读性及可维护性</p><p>AOP应用场景</p><p>权限控制、缓存控制、事务控制、分布式追踪、异常处理等</p><p>举个栗子</p><p>如果你要在Service层的某些特定方法需加上权限验证，使用OOP思想的话只能在方法内部添加验证身份的代码，例如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  checkUserAdmin<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加入权限验证方法</span>  repository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用dao层插入数据库一条记录</span><span class="token punctuation">}</span></code></pre><p>这样看起来功能是实现了，但如果service层有很多insert和delete方法呢？这样插入代码的方式不易于我们去统一管理，且修改了原代码，具有侵入性。</p><p>那么使用了AOP之后呢？你可以建一个切面类，对要进行权限验证的方法进行切入。</p><p>即在程序运行时，动态地将代码切入到类的指定方法或位置上的思想，就是面向切面编程。</p><h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2><p>要想使用面向对象编程的思想，首先要了解几个专有名词</p><p>• Target：目标类，即需要被代理的类。例如：UserService</p><p>• Joinpoint(连接点):所谓连接点是指那些可能被拦截到的方法。例如：所有的方法</p><p>• PointCut 切入点：已经被增强的连接点。例如：addUser()</p><p>• Advice 通知/增强，增强代码。例如：after、before</p><p>• Weaving(织入):是指把增强advice应用到目标对象target来创建新的代理对象proxy的过程.</p><p>• Proxy 代理类</p><p>• Aspect(切面): 是切入点pointcut和通知advice的结合</p><h2 id="Advice-五种增强方式"><a href="#Advice-五种增强方式" class="headerlink" title="Advice-五种增强方式"></a>Advice-五种增强方式</h2><p>例如在执行某个特定方法的时候，我们可以选择不同的增强方式（如前置通知/增强，在方法运行前执行），达到我们织入后的不同效果。</p><ol><li><p>前置通知:在我们执行目标方法之前运行(@Before)</p></li><li><p>后置通知:在我们目标方法运行结束之后 ,不管有没有异常(@After)</p></li><li><p>返回通知:在我们的目标方法正常返回值后运行(@AfterReturning)</p></li><li><p>异常通知:在我们的目标方法出现异常后运行(@AfterThrowing)</p></li><li><p>环绕通知:动态代理, 需要手动执行joinPoint.procced()(其实就是执行我们的目标方法执行之前相当于前置通知, 执行之后就相当于我们后置通知(@Around)</p></li></ol><h2 id="切面表达式"><a href="#切面表达式" class="headerlink" title="切面表达式"></a>切面表达式</h2><p><img src="/2021/03/26/aop/p1-%E5%88%87%E9%9D%A2%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%80%BB%E7%BB%93.png" alt></p><p>excution表达式</p><pre class=" language-java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>    修饰符pattern    返回值pattern    描述包名    方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>    方法抛出异常pattern<span class="token punctuation">)</span></code></pre><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="通过注解打印每个方法花费的时间"><a href="#通过注解打印每个方法花费的时间" class="headerlink" title="通过注解打印每个方法花费的时间"></a>通过注解打印每个方法花费的时间</h2><p>注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">LogCostTime</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>AOP实现</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogCostTimeAop</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LogCostTimeAop<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${log.cost.time.enable:true}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> logCostTimeEnable<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.york.common.annotation.LogCostTime)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">costTimePointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"costTimePointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint point<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断开关</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>logCostTimeEnable<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//记录开始时间</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行方法</span>        Object result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行时长(毫秒)</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        <span class="token function">logCostTime</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logCostTime</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{}.{} cost:{}ms"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件,开启与否</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">log.cost.time.enable</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span></code></pre><h2 id="环绕打印日志"><a href="#环绕打印日志" class="headerlink" title="环绕打印日志"></a>环绕打印日志</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAop</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public * com.jktest.controller.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String classMethod <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} # {} # {}"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> classMethod<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public * com.jktest.controller.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">catchException</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String classMethod <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"在{}类中{} 方法 发生了错误"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> classMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token string">"4xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public * com.jktest.controller.*.*(..))"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"returnVal"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturn</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object returnVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String className <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String classMethod <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} # {} # {}"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> classMethod<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>returnVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AOP-基本使用教程&quot;&gt;&lt;a href=&quot;#AOP-基本使用教程&quot; class=&quot;headerlink&quot; title=&quot;AOP 基本使用教程&quot;&gt;&lt;/a&gt;AOP 基本使用教程&lt;/h1&gt;&lt;h2 id=&quot;什么是AOP&quot;&gt;&lt;a href=&quot;#什么是AOP&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
      <category term="aop" scheme="https://liuhuaqiang.top/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>Java中文档的转换问题</title>
    <link href="https://liuhuaqiang.top/2021/03/16/java-zhong-wen-dang-de-zhuan-huan-wen-ti/"/>
    <id>https://liuhuaqiang.top/2021/03/16/java-zhong-wen-dang-de-zhuan-huan-wen-ti/</id>
    <published>2021-03-16T02:12:28.000Z</published>
    <updated>2021-03-16T02:13:23.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中文档的转换问题"><a href="#Java中文档的转换问题" class="headerlink" title="Java中文档的转换问题"></a>Java中文档的转换问题</h1><p>我的经验来看,转换为word是不会出现乱码问题的</p><h2 id="1-把文件变成响应流"><a href="#1-把文件变成响应流" class="headerlink" title="1. 把文件变成响应流"></a>1. 把文件变成响应流</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//把zip文件流变成响应流</span>OutputStream os <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> zipName<span class="token punctuation">)</span><span class="token punctuation">;</span>    os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileUtils<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>zipName<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        FileSystemUtils<span class="token punctuation">.</span><span class="token function">deleteRecursively</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>zipName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-ZIP压缩流"><a href="#2-ZIP压缩流" class="headerlink" title="2. ZIP压缩流"></a>2. ZIP压缩流</h2><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//打包所有的doc</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hour <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>HOUR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minute <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        String zipName <span class="token operator">=</span> year <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">".zip"</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>        File zipFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>zipName<span class="token punctuation">)</span><span class="token punctuation">;</span>        File listFiles<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream input <span class="token operator">=</span> null<span class="token punctuation">;</span>        ZipOutputStream zipOut <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            zipOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File listFile <span class="token operator">:</span> listFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>listFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                    zipOut<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> listFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        zipOut<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>zipOut <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    zipOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h1 id="文档转换"><a href="#文档转换" class="headerlink" title="文档转换"></a>文档转换</h1><p>使用<a href="https://www.e-iceblue.cn/tutorials.html" target="_blank" rel="noopener">https://www.e-iceblue.cn/tutorials.html</a></p><p>这个文档转换工具,有免费的,,转换成word不成问题</p><h2 id="生成word"><a href="#生成word" class="headerlink" title="生成word"></a>生成word</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>spire<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spire<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>documents<span class="token punctuation">.</span>HorizontalAlignment<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spire<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>documents<span class="token punctuation">.</span>Paragraph<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>spire<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>documents<span class="token punctuation">.</span>ParagraphStyle<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateWordDocument</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Word文档</span>        Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加一个section</span>        Section section <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">addSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加三个段落至section</span>        Paragraph para1 <span class="token operator">=</span> section<span class="token punctuation">.</span><span class="token function">addParagraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        para1<span class="token punctuation">.</span><span class="token function">appendText</span><span class="token punctuation">(</span><span class="token string">"滕王阁序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Paragraph para2 <span class="token operator">=</span> section<span class="token punctuation">.</span><span class="token function">addParagraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        para2<span class="token punctuation">.</span><span class="token function">appendText</span><span class="token punctuation">(</span><span class="token string">"豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。"</span><span class="token operator">+</span>                        <span class="token string">"物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。"</span><span class="token operator">+</span>                        <span class="token string">"都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。"</span><span class="token operator">+</span>                        <span class="token string">"腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Paragraph para3 <span class="token operator">=</span> section<span class="token punctuation">.</span><span class="token function">addParagraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        para3<span class="token punctuation">.</span><span class="token function">appendText</span><span class="token punctuation">(</span><span class="token string">"时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿；临帝子之长洲，得天人之旧馆。"</span><span class="token operator">+</span>                        <span class="token string">"层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将第一段作为标题，设置标题格式</span>        ParagraphStyle style1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParagraphStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        style1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"titleStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        style1<span class="token punctuation">.</span><span class="token function">getCharacterFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        style1<span class="token punctuation">.</span><span class="token function">getCharacterFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        style1<span class="token punctuation">.</span><span class="token function">getCharacterFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        style1<span class="token punctuation">.</span><span class="token function">getCharacterFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">12f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>style1<span class="token punctuation">)</span><span class="token punctuation">;</span>        para1<span class="token punctuation">.</span><span class="token function">applyStyle</span><span class="token punctuation">(</span><span class="token string">"titleStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置其余两个段落的格式</span>        ParagraphStyle style2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParagraphStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>        style2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"paraStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        style2<span class="token punctuation">.</span><span class="token function">getCharacterFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"宋体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        style2<span class="token punctuation">.</span><span class="token function">getCharacterFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token number">11f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>style2<span class="token punctuation">)</span><span class="token punctuation">;</span>        para2<span class="token punctuation">.</span><span class="token function">applyStyle</span><span class="token punctuation">(</span><span class="token string">"paraStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        para3<span class="token punctuation">.</span><span class="token function">applyStyle</span><span class="token punctuation">(</span><span class="token string">"paraStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置第一个段落的对齐方式</span>        para1<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHorizontalAlignment</span><span class="token punctuation">(</span>HorizontalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置第二段和第三段的段首缩进</span>        para2<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFirstLineIndent</span><span class="token punctuation">(</span><span class="token number">25f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        para3<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFirstLineIndent</span><span class="token punctuation">(</span><span class="token number">25f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置第一段和第二段的段后间距</span>        para1<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAfterSpacing</span><span class="token punctuation">(</span><span class="token number">15f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        para2<span class="token punctuation">.</span><span class="token function">getFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAfterSpacing</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存文档</span>        document<span class="token punctuation">.</span><span class="token function">saveToFile</span><span class="token punctuation">(</span><span class="token string">"Output.docx"</span><span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>Docx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://www.e-iceblue.cn/images/tutorials-images/Create-Word-Document-in-Java.png" alt></p><h2 id="Word转PDF"><a href="#Word转PDF" class="headerlink" title="Word转PDF"></a>Word转PDF</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>spire<span class="token punctuation">.</span>doc<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordtoPDF</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载word示例文档</span>        Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span><span class="token string">"Sample.docx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存结果文件</span>        document<span class="token punctuation">.</span><span class="token function">saveToFile</span><span class="token punctuation">(</span><span class="token string">"out/toPDF.pdf"</span><span class="token punctuation">,</span> FileFormat<span class="token punctuation">.</span>PDF<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但我可以告诉你,这个东西转换出来的东西会有乱码,中文不会,小语种会乱码..</p><p>有什么解决办法呢?</p><p>我找了三天终于找到了,</p><p>使用openoffice组件就行 ,跨平台性,是最好的</p><p><a href="https://openoffice.apache.org/downloads.html" target="_blank" rel="noopener">https://openoffice.apache.org/downloads.html</a></p><p><a href="https://blog.csdn.net/zhangjunli/article/details/104941509" target="_blank" rel="noopener">转换教程</a></p><p><strong>启动OpenOffice的服务</strong></p><p>进openoffice安装目录，通过cmd启动一个soffice服务，启动的命令是<code>soffice -headless -accept=&quot;socket,host=127.0.0.1,port=8100;urp;&quot;</code>。</p><pre class=" language-bash"><code class="language-bash">soffice -headless -accept<span class="token operator">=</span><span class="token string">"socket,host=127.0.0.1,port=8100;urp;"</span></code></pre><p>切记 运行这一句,而且是在openoffice的安装目录下(windows)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PDFDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">officeToPDF</span><span class="token punctuation">(</span>String sourceFile<span class="token punctuation">,</span> String destFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File inputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inputFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 找不到源文件, 则返回false</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果目标路径不存在, 则新建该路径</span>            File outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outputFile<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputFile<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果目标文件存在，则删除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outputFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputFile<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OpenOfficeConnection connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SocketOpenOfficeConnection</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用于测试openOffice连接时间</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接时间:"</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentConverter converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamOpenOfficeDocumentConverter</span><span class="token punctuation">(</span>                    connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">,</span> outputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//测试word转PDF的转换时间</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换时间:"</span> <span class="token operator">+</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"openOffice连接失败！请检查IP,端口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">officeToPDF</span><span class="token punctuation">(</span><span class="token string">"E:\\test.docx"</span><span class="token punctuation">,</span> <span class="token string">"E:\\test.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.artofsolving<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jodconverter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openoffice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jurt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openoffice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ridl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openoffice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>juh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openoffice<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>unoil<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-jdk14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java中文档的转换问题&quot;&gt;&lt;a href=&quot;#Java中文档的转换问题&quot; class=&quot;headerlink&quot; title=&quot;Java中文档的转换问题&quot;&gt;&lt;/a&gt;Java中文档的转换问题&lt;/h1&gt;&lt;p&gt;我的经验来看,转换为word是不会出现乱码问题的&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>jenkins使用教程</title>
    <link href="https://liuhuaqiang.top/2021/03/14/jenkins-shi-yong-jiao-cheng/"/>
    <id>https://liuhuaqiang.top/2021/03/14/jenkins-shi-yong-jiao-cheng/</id>
    <published>2021-03-14T15:03:59.000Z</published>
    <updated>2021-03-14T15:34:47.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins使用教程"><a href="#Jenkins使用教程" class="headerlink" title="Jenkins使用教程"></a>Jenkins使用教程</h1><h2 id="1-安装jenkins"><a href="#1-安装jenkins" class="headerlink" title="1.安装jenkins"></a>1.安装jenkins</h2><h3 id="1-使用docker安装jenkins"><a href="#1-使用docker安装jenkins" class="headerlink" title="1.使用docker安装jenkins"></a>1.使用docker安装jenkins</h3><pre class=" language-bash"><code class="language-bash">使用docker 安装不多叙述了docker run -u root -d -p 9999:8080 -p 50000:50000  -v /root/jk/jenkins-home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock -v /root/env/maven-3.6.3:/usr/local/maven-3.6.3 -v /root/env/jdk8:/var/java/jdk8 --name jk jenkinsci/blueocean 这里需要把maven和java的环境,提前下载到宿主机中<span class="token punctuation">(</span>当然这个可以使用内部的环境,但国内的速度你们懂的,所有这里提前下载好<span class="token punctuation">)</span>在/root/env/    目录下有maven和java的环境,连接到了docker内部-p 外面访问9999就是访问docker内部的8080/root/jk/jenkins-home就是docker内部的家目录,链接出来了</code></pre><p>运行完成后,访问你的主机:9999就能访问 jenkins后台了</p><p>初始密码查看</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</code></pre><h3 id="2-安装必要插件"><a href="#2-安装必要插件" class="headerlink" title="2.安装必要插件"></a>2.安装必要插件</h3><p>需要安装gitee,github,ssh,chinese至少需要这几个</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314231752773.png" alt="image-20210314231752773"></p><p>这样搜索下载</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314231821188.png" alt="image-20210314231821188"></p><p>基本完成安装</p><h2 id="2-配置jenkins"><a href="#2-配置jenkins" class="headerlink" title="2.配置jenkins"></a>2.配置jenkins</h2><p>开始配置jenkins</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232012551.png" alt="image-20210314232012551"></p><h3 id="1-配置你的账号"><a href="#1-配置你的账号" class="headerlink" title="1. 配置你的账号"></a>1. 配置你的账号</h3><p>包括,服务器的账号密码,你的github/gitee/gitlab的账号密码</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232110178.png" alt="image-20210314232110178"></p><h3 id="2-进入这里"><a href="#2-进入这里" class="headerlink" title="2. 进入这里"></a>2. 进入这里</h3><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232129905.png" alt="image-20210314232129905"></p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232157477.png" alt="image-20210314232157477"></p><h2 id="3-创建jenkins任务"><a href="#3-创建jenkins任务" class="headerlink" title="3.创建jenkins任务"></a>3.创建jenkins任务</h2><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232223961.png" alt="image-20210314232223961"></p><p>这是你的项目地址</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232247957.png" alt="image-20210314232247957"></p><p>并且还有你的对应的账号密码</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232320591.png" alt="image-20210314232320591"></p><p>重点设置,表示你的gitee发现推送了,就这个这个jenkins发送通知</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232416955.png" alt="image-20210314232416955"></p><p>项目的管理中,有这个webhooks里面把url和密码生成弄上</p><p>下面点击生成会有密码</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232500618.png" alt="image-20210314232500618"></p><p>打包</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232539781.png" alt="image-20210314232539781"></p><p>也可以使用这个</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232603407.png" alt="image-20210314232603407"></p><p>就是执行shell指令即可</p><p>我是这样的</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314232617001.png" alt="image-20210314232617001"></p><p>使用绝对路径来打包</p><p>然后在项目中写上脚本,</p><p>需要把生成的jar包发送给服务器</p><p>有两种办法</p><p>第一种使用ssh的scp  </p><p>你需要先进jenkins容器里面,使用ssh-keygen生成密钥</p><p>再把.ssh/id_rsa.pub 复制出来,再放到服务器的.ssh/authknown这个文件中(使用ssh-copy-id root@ip  这样也行,当时需要输入密码)</p><p>再随便用scp传一个文件后,</p><p>之后scp就能随意使用了</p><p>把jar包和Dockerfile文件使用scp发送到服务器,</p><p>第二种方法是使用expect来输入密码</p><p>脚本如下</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">sed</span> -i <span class="token string">'s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g'</span> /etc/apk/repositoriesapk add <span class="token function">expect</span>/usr/bin/expect<span class="token operator">&lt;&lt;</span><span class="token string">EOFspawn scp ./target/demo-0.0.1-SNAPSHOT.jar root@ip:/root/jk/testexpect {  "*assword" { send "密码\r" }}expect eofspawn scp ./Dockerfile root@ip:/root/jk/testexpect {  "*assword" { send "密码\r" }}expect eofEOF</span></code></pre><p>也行</p><p>现在的情况是</p><p>服务器里面已经有jar和Dockerfile了</p><p>直接运行服务器端的脚本</p><p>如下</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> -f jk-demo docker rmi -f jk-demo<span class="token function">cd</span> /root/jk/testdocker build -t jk-demo <span class="token keyword">.</span>  docker run -d --name jk-demo  -p 8083:8080 jk-demo</code></pre><p>Dockerfile如下</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM java:8RUN mkdir -p /home/jkWORKDIR /home/jkCOPY *.jar /home/jk/app.jarEXPOSE 8083ENTRYPOINT ["java","-jar","/home/jk/app.jar"]</code></pre><h2 id="4-测试部署"><a href="#4-测试部署" class="headerlink" title="4.测试部署"></a>4.测试部署</h2><p>当你git push后,</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314233413578.png" alt="image-20210314233413578"></p><p>就自动开始创建了</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314233428413.png" alt="image-20210314233428413"></p><p>这样就成功了</p><p><img src="/2021/03/14/jenkins-shi-yong-jiao-cheng/image-20210314233442911.png" alt="image-20210314233442911"></p><p>没问题OK</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jenkins使用教程&quot;&gt;&lt;a href=&quot;#Jenkins使用教程&quot; class=&quot;headerlink&quot; title=&quot;Jenkins使用教程&quot;&gt;&lt;/a&gt;Jenkins使用教程&lt;/h1&gt;&lt;h2 id=&quot;1-安装jenkins&quot;&gt;&lt;a href=&quot;#1-安装je
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前端代理自己的后端</title>
    <link href="https://liuhuaqiang.top/2021/03/12/qian-duan-dai-li-zi-ji-de-hou-duan/"/>
    <id>https://liuhuaqiang.top/2021/03/12/qian-duan-dai-li-zi-ji-de-hou-duan/</id>
    <published>2021-03-12T03:32:47.000Z</published>
    <updated>2021-03-12T03:40:14.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要这么做"><a href="#为什么需要这么做" class="headerlink" title="为什么需要这么做?"></a>为什么需要这么做?</h1><p>你在工作中可能是会遇见这样的情况:  前后端分离开发,前端访问的后端地址是你同事的机器, 你修改bug后,在前端测试不了你的写的bug,只能先git push ,你同事再拉下来,重新跑.才能看见,于是,我们使用nginx代理来实现,使用前端来访问自己的后端地址</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li>nginx </li></ol><p><a href="http://nginx.org/" target="_blank" rel="noopener">NginxDownLoad</a></p><ol start="2"><li>修改host</li></ol><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ol><li>修改host</li></ol><p>127.0.0.1   ni.web</p><ol start="2"><li>修改nginx配置</li></ol><p>核心</p><pre class=" language-config"><code class="language-config">    server {        listen       80;        server_name  ni.web;  # 监听网站和端口        location / {            proxy_pass http://192.168.4.180:3306;    # 根节点走它的         }        location /api/ {            proxy_pass http://127.0.0.1:8082/;   # /api前缀的走我的端口        }    }</code></pre><p>然后访问  ni.web就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么需要这么做&quot;&gt;&lt;a href=&quot;#为什么需要这么做&quot; class=&quot;headerlink&quot; title=&quot;为什么需要这么做?&quot;&gt;&lt;/a&gt;为什么需要这么做?&lt;/h1&gt;&lt;p&gt;你在工作中可能是会遇见这样的情况:  前后端分离开发,前端访问的后端地址是你同事的机器,
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
      <category term="小技巧" scheme="https://liuhuaqiang.top/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>pypi打包上传</title>
    <link href="https://liuhuaqiang.top/2021/03/02/pypi-da-bao-shang-chuan/"/>
    <id>https://liuhuaqiang.top/2021/03/02/pypi-da-bao-shang-chuan/</id>
    <published>2021-03-02T01:01:43.000Z</published>
    <updated>2021-03-02T01:15:20.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第三方包用pip安装,上传到哪呢? </p></blockquote><p>答案是上传到pypi.org里面去</p><p>详细教程: <a href="https://blog.konghy.cn/2018/04/29/setup-dot-py/" target="_blank" rel="noopener">https://blog.konghy.cn/2018/04/29/setup-dot-py/</a></p><h2 id="1-首先需要注册账号"><a href="#1-首先需要注册账号" class="headerlink" title="1. 首先需要注册账号"></a>1. 首先需要注册账号</h2><p>很简单不用说也知道</p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ol><li>在家目录下,生成一个.pypirc的文件</li></ol><pre class=" language-ini"><code class="language-ini"><span class="token selector">[distutils]</span><span class="token constant">index-servers</span><span class="token attr-value"><span class="token punctuation">=</span>pypi</span><span class="token selector">[pypi]</span><span class="token constant">repository</span> <span class="token attr-value"><span class="token punctuation">=</span> https://upload.pypi.org/legacy/</span>username: 用户名password: 密码</code></pre><ol start="2"><li>安装setuptools </li></ol><p>pip install setuptools </p><ol start="3"><li>编写setup.py文件(难)</li></ol><p>更多详情: <a href="https://blog.konghy.cn/2018/04/29/setup-dot-py/" target="_blank" rel="noopener">https://blog.konghy.cn/2018/04/29/setup-dot-py/</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token punctuation">,</span> find_packagessetup<span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'nonebot_plugin_abbrreply'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># pip安装时候的名字</span>    version<span class="token operator">=</span><span class="token string">"1.0.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 版本号</span>    description<span class="token operator">=</span><span class="token punctuation">(</span>        <span class="token string">'缩写查询器'</span> <span class="token comment" spellcheck="true"># 描述</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>     long_description<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'README.md'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    long_description_content_type<span class="token operator">=</span><span class="token string">"text/markdown"</span><span class="token punctuation">,</span>     author<span class="token operator">=</span><span class="token string">'anlen123'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#作者</span>    author_email<span class="token operator">=</span><span class="token string">'1761512493@qq.com'</span><span class="token punctuation">,</span>    maintainer<span class="token operator">=</span><span class="token string">'anlen123'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#维护人员</span>    maintainer_email<span class="token operator">=</span><span class="token string">'1761512493@qq.com'</span><span class="token punctuation">,</span>    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 需要处理的包目录(通常为包含 __init__.py 的文件夹)</span>    platforms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"all"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 程序适用的软件平台列表</span>    url<span class="token operator">=</span><span class="token string">'https://github.com/anlen123/nonebot_plugin_abbrreply'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># github地址</span>    install_requires<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token string">'aiohttp'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 安装的时候可以下载的依赖包</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="3-打包上传"><a href="#3-打包上传" class="headerlink" title="3. 打包上传"></a>3. 打包上传</h2><pre class=" language-bash"><code class="language-bash">python setup.py sdist bdist_wheel <span class="token operator">&amp;&amp;</span> twine upload dist/*</code></pre><p>完!!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;第三方包用pip安装,上传到哪呢? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答案是上传到pypi.org里面去&lt;/p&gt;
&lt;p&gt;详细教程: &lt;a href=&quot;https://blog.konghy.cn/2018/04/29/setup-dot-
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://liuhuaqiang.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel</title>
    <link href="https://liuhuaqiang.top/2021/02/24/easyexcel/"/>
    <id>https://liuhuaqiang.top/2021/02/24/easyexcel/</id>
    <published>2021-02-24T02:47:58.000Z</published>
    <updated>2021-02-24T02:48:30.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h1><p><a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener">https://www.yuque.com/easyexcel/doc/easyexcel</a></p><ol><li>实例1 </li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>Main<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>ExcelReader<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span>AnalysisContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span>AnalysisEventListener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ExcelReaderBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ExcelTypeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author admin */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id <span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        ExcelReaderBuilder read <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\admin\\Desktop\\test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">autoCloseStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> integerStringMap<span class="token punctuation">,</span> AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExcelReader build <span class="token operator">=</span> read<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        build<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        build<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>示例二</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>Main<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>ExcelReader<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span>AnalysisContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span>AnalysisEventListener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ExcelReaderBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ExcelTypeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author admin */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String id <span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        LinkedList<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExcelReaderBuilder read <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\admin\\Desktop\\test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">autoCloseStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> integerStringMap<span class="token punctuation">,</span> AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExcelReader build <span class="token operator">=</span> read<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        build<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        build<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>实例三</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id <span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\admin\\Desktop\\test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Person person<span class="token punctuation">,</span> AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>写入</li></ol><pre class=" language-java"><code class="language-java"> <span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>Main<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>ExcelReader<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExcelProperty<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span>AnalysisContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span>AnalysisEventListener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ExcelReaderBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ExcelTypeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author admin */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> data <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\admin\\Desktop\\test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\admin\\Desktop\\test.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Person person<span class="token punctuation">,</span> AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span>AnalysisContext analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EasyExcel&quot;&gt;&lt;a href=&quot;#EasyExcel&quot; class=&quot;headerlink&quot; title=&quot;EasyExcel&quot;&gt;&lt;/a&gt;EasyExcel&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/easyexcel/d
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
      <category term="excel" scheme="https://liuhuaqiang.top/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>LazyGit</title>
    <link href="https://liuhuaqiang.top/2021/02/07/lazygit/"/>
    <id>https://liuhuaqiang.top/2021/02/07/lazygit/</id>
    <published>2021-02-07T07:56:20.000Z</published>
    <updated>2021-02-07T08:01:21.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LazyGit"><a href="#LazyGit" class="headerlink" title="LazyGit"></a>LazyGit</h1><p>github:  <a href="https://github.com/jesseduffield/lazygit" target="_blank" rel="noopener">https://github.com/jesseduffield/lazygit</a></p><p>简介: <a href="https://github.com/jesseduffield/lazygit/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jesseduffield/lazygit/blob/master/README.md</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h3><p>For Windows, Mac OS(10.10+) or Linux, you can download a binary release <a href="https://github.com/jesseduffield/lazygit/releases" target="_blank" rel="noopener">here</a>.</p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><pre><code>brew install jesseduffield/lazygit/lazygit</code></pre><p>Core:</p><pre><code>brew install lazygit</code></pre><h3 id="MacPorts"><a href="#MacPorts" class="headerlink" title="MacPorts"></a>MacPorts</h3><p>Latest version built from github releases. Tap:</p><pre><code>sudo port install lazygit</code></pre><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><pre><code>sudo add-apt-repository ppa:lazygit-team/releasesudo apt-get updatesudo apt-get install lazygit</code></pre><h3 id="Void-Linux"><a href="#Void-Linux" class="headerlink" title="Void Linux"></a>Void Linux</h3><pre><code>sudo xbps-install -S lazygit</code></pre><h3 id="Scoop-Windows"><a href="#Scoop-Windows" class="headerlink" title="Scoop (Windows)"></a>Scoop (Windows)</h3><p>You can install <code>lazygit</code> using <a href="https://scoop.sh/" target="_blank" rel="noopener">scoop</a>. It’s in the <code>extras</code> bucket:</p><pre><code># Add the extras bucketscoop bucket add extras# Install lazygitscoop install lazygit</code></pre><h3 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h3><p>Packages for Arch Linux are available via AUR (Arch User Repository).</p><p>There are two packages. The stable one which is built with the latest release and the git version which builds from the most recent commit.</p><ul><li>Stable: <a href="https://aur.archlinux.org/packages/lazygit/" target="_blank" rel="noopener">https://aur.archlinux.org/packages/lazygit/</a></li><li>Development: <a href="https://aur.archlinux.org/packages/lazygit-git/" target="_blank" rel="noopener">https://aur.archlinux.org/packages/lazygit-git/</a></li></ul><p>Instruction of how to install AUR content can be found here: <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Arch_User_Repository</a></p><h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h3><p>Packages for Fedora and CentOS 7 are available via <a href="https://copr.fedorainfracloud.org/coprs/atim/lazygit/" target="_blank" rel="noopener">Copr</a> (Cool Other Package Repo).</p><pre><code>yum install dnf sudo dnf copr enable atim/lazygit -ysudo dnf install lazygit</code></pre><h3 id="Solus-Linux"><a href="#Solus-Linux" class="headerlink" title="Solus Linux"></a>Solus Linux</h3><pre><code>sudo eopkg install lazygit</code></pre><h3 id="FreeBSD"><a href="#FreeBSD" class="headerlink" title="FreeBSD"></a>FreeBSD</h3><pre><code>pkg install lazygit</code></pre><h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><pre><code>go get github.com/jesseduffield/lazygit</code></pre><p>Please note: If you get an error claiming that lazygit cannot be found or is not defined, you may need to add <code>~/go/bin</code> to your $PATH (MacOS/Linux), or <code>%HOME%\go\bin</code> (Windows). Not to be mistaked for <code>C:\Go\bin</code> (which is for Go’s own binaries, not apps like Lazygit).</p><h3 id="Chocolatey-Windows"><a href="#Chocolatey-Windows" class="headerlink" title="Chocolatey (Windows)"></a>Chocolatey (Windows)</h3><p>You can install <code>lazygit</code> using <a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a>:</p><pre><code>choco install lazygit</code></pre><h3 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h3><p>You’ll need to <a href="https://golang.org/doc/install" target="_blank" rel="noopener">install Go</a></p><pre><code>git clone https://github.com/jesseduffield/lazygit.gitcd lazygitgo install</code></pre><p>You can also use <code>go run main.go</code> to compile and run in one go (pun definitely intended)</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Call <code>lazygit</code> in your terminal inside a git repository.</p><pre><code>$ lazygit</code></pre><p>If you want, you can also add an alias for this with <code>echo &quot;alias lg=&#39;lazygit&#39;&quot; &gt;&gt; ~/.zshrc</code> (or whichever rc file you’re using).</p><h3 id="Keybindings"><a href="#Keybindings" class="headerlink" title="Keybindings"></a>Keybindings</h3><p>You can check out the list of keybindings <a href="https://github.com/jesseduffield/lazygit/blob/master/docs/keybindings" target="_blank" rel="noopener">here</a>.</p><h3 id="Changing-Directory-On-Exit"><a href="#Changing-Directory-On-Exit" class="headerlink" title="Changing Directory On Exit"></a>Changing Directory On Exit</h3><p>If you change repos in lazygit and want your shell to change directory into that repo on exiting lazygit, add this to your <code>~/.zshrc</code> (or other rc file):</p><pre><code>lg(){    export LAZYGIT_NEW_DIR_FILE=~/.lazygit/newdir    lazygit &quot;$@&quot;    if [ -f $LAZYGIT_NEW_DIR_FILE ]; then            cd &quot;$(cat $LAZYGIT_NEW_DIR_FILE)&quot;            rm -f $LAZYGIT_NEW_DIR_FILE &gt; /dev/null    fi}</code></pre><p>Then <code>source ~/.zshrc</code> and from now on when you call <code>lg</code> and exit you’ll switch directories to whatever you were in inside lazyigt. To override this behaviour you can exit using <code>shift+Q</code> rather than just <code>q</code>.</p><h2 id="安装git高版本"><a href="#安装git高版本" class="headerlink" title="安装git高版本"></a>安装git高版本</h2><p>官网: <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p>到2021-02-07为止: git2.30.0 : <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.30.0.tar.gz" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.30.0.tar.gz</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.30.0.tar.gz<span class="token function">tar</span> -xzvf git-2.30.0.tar.gz<span class="token function">cd</span> git-2.30.0./configure<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span> </code></pre><h2 id="安装go"><a href="#安装go" class="headerlink" title="安装go"></a>安装go</h2><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> go </code></pre><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>命令: lazygit</p><p>添加全部或者取消全部 : a </p><p>提交修改: c</p><p>覆盖修改: A   (提交历史上面只会显示上次的提交请求,,但是文件已经改变了)</p><p>用编辑器打开提交信息编辑:  C</p><p>添加忽略文件 : i</p><p>保存现场:  s              pop操作:  g     apply操作: 空格    删除: d</p><p>拉取: p  </p><p>上传: P</p><p>合并: M  </p><p>重命名提交信息: R </p><p>==回滚1: 选中分支,空格,,再在这个分支的基础上new 一个分支==</p><p>==回滚2: 选中分支g  ,有三个选项,回车就行== </p><p>复制分支 : c  </p><p>粘贴分支: v</p><p>(一个一个编辑) 在commit 面板合并提交:   s (这次和上次提交合并为一个提交)</p><p>(一起编辑        ) 编辑commit  : e            提交: m</p><p>提交比较:  i </p><p>冲突合并: </p><p>(保留其中一个):  空格选中保留部分</p><p>(两个都想保留):  b </p><p>ctrl+ f :  查看文件历史的提交</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LazyGit&quot;&gt;&lt;a href=&quot;#LazyGit&quot; class=&quot;headerlink&quot; title=&quot;LazyGit&quot;&gt;&lt;/a&gt;LazyGit&lt;/h1&gt;&lt;p&gt;github:  &lt;a href=&quot;https://github.com/jesseduffield
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="git" scheme="https://liuhuaqiang.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>对一次redis搭建集群的记录</title>
    <link href="https://liuhuaqiang.top/2021/01/26/dui-yi-ci-redis-da-jian-ji-qun-de-ji-lu/"/>
    <id>https://liuhuaqiang.top/2021/01/26/dui-yi-ci-redis-da-jian-ji-qun-de-ji-lu/</id>
    <published>2021-01-26T09:04:33.000Z</published>
    <updated>2021-02-07T08:01:21.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对一次redis搭建集群的记录"><a href="#对一次redis搭建集群的记录" class="headerlink" title="对一次redis搭建集群的记录"></a>对一次redis搭建集群的记录</h1><h2 id="1-使用docker-搭建两个redis-节点"><a href="#1-使用docker-搭建两个redis-节点" class="headerlink" title="1. 使用docker 搭建两个redis 节点"></a>1. 使用docker 搭建两个redis 节点</h2><h3 id="1-1-创建自定义docker网络"><a href="#1-1-创建自定义docker网络" class="headerlink" title="1.1 创建自定义docker网络"></a>1.1 创建自定义docker网络</h3><pre class=" language-bash"><code class="language-bash">docker network create --driver<span class="token operator">=</span>bridge --subnet<span class="token operator">=</span>192.168.0.0/16 --gateway<span class="token operator">=</span>192.168.1.0 mynet</code></pre><h3 id="1-2-使用docker搭建redis"><a href="#1-2-使用docker搭建redis" class="headerlink" title="1.2 使用docker搭建redis"></a>1.2 使用docker搭建redis</h3><blockquote><p>首先在家目录,创建配置文件如下:</p><p>redis</p><p>├── master<br>│   ├── conf<br>│   │   └── redis.conf<br>│   └── data<br>├── redis.sh  （启动脚本）<br>├── sentinel.conf  (哨兵配置)<br>└── slave1<br>    ├── conf<br>    │   └── redis.conf<br>    └── data</p></blockquote><p>==redis.conf==</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Redis configuration file example.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that in order to read the configuration file, Redis must be</span><span class="token comment" spellcheck="true"># started with the file path as first argument:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ./redis-server /path/to/redis.conf</span><span class="token comment" spellcheck="true"># Note on units: when memory size is needed, it is possible to specify</span><span class="token comment" spellcheck="true"># it in the usual form of 1k 5GB 4M and so forth:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1k => 1000 bytes</span><span class="token comment" spellcheck="true"># 1kb => 1024 bytes</span><span class="token comment" spellcheck="true"># 1m => 1000000 bytes</span><span class="token comment" spellcheck="true"># 1mb => 1024*1024 bytes</span><span class="token comment" spellcheck="true"># 1g => 1000000000 bytes</span><span class="token comment" spellcheck="true"># 1gb => 1024*1024*1024 bytes</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><span class="token comment" spellcheck="true">################################## INCLUDES ###################################</span><span class="token comment" spellcheck="true"># Include one or more other config files here.  This is useful if you</span><span class="token comment" spellcheck="true"># have a standard template that goes to all Redis servers but also need</span><span class="token comment" spellcheck="true"># to customize a few per-server settings.  Include files can include</span><span class="token comment" spellcheck="true"># other files, so use this wisely.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that option "include" won't be rewritten by command "CONFIG REWRITE"</span><span class="token comment" spellcheck="true"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><span class="token comment" spellcheck="true"># line as value of a configuration directive, you'd better put includes</span><span class="token comment" spellcheck="true"># at the beginning of this file to avoid overwriting config change at runtime.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If instead you are interested in using includes to override configuration</span><span class="token comment" spellcheck="true"># options, it is better to use include as the last line.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># include /path/to/local.conf</span><span class="token comment" spellcheck="true"># include /path/to/other.conf</span><span class="token comment" spellcheck="true">################################## MODULES #####################################</span><span class="token comment" spellcheck="true"># Load modules at startup. If the server is not able to load modules</span><span class="token comment" spellcheck="true"># it will abort. It is possible to use multiple loadmodule directives.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># loadmodule /path/to/my_module.so</span><span class="token comment" spellcheck="true"># loadmodule /path/to/other_module.so</span><span class="token comment" spellcheck="true">################################## NETWORK #####################################</span><span class="token comment" spellcheck="true"># By default, if no "bind" configuration directive is specified, Redis listens</span><span class="token comment" spellcheck="true"># for connections from all available network interfaces on the host machine.</span><span class="token comment" spellcheck="true"># It is possible to listen to just one or multiple selected interfaces using</span><span class="token comment" spellcheck="true"># the "bind" configuration directive, followed by one or more IP addresses.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Examples:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bind 192.168.1.100 10.0.0.1</span><span class="token comment" spellcheck="true"># bind 127.0.0.1 ::1</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><span class="token comment" spellcheck="true"># internet, binding to all the interfaces is dangerous and will expose the</span><span class="token comment" spellcheck="true"># instance to everybody on the internet. So by default we uncomment the</span><span class="token comment" spellcheck="true"># following bind directive, that will force Redis to listen only on the</span><span class="token comment" spellcheck="true"># IPv4 loopback interface address (this means Redis will only be able to</span><span class="token comment" spellcheck="true"># accept client connections from the same host that it is running on).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><span class="token comment" spellcheck="true"># JUST COMMENT OUT THE FOLLOWING LINE.</span><span class="token comment" spellcheck="true"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>bind  0.0.0.0<span class="token comment" spellcheck="true"># Protected mode is a layer of security protection, in order to avoid that</span><span class="token comment" spellcheck="true"># Redis instances left open on the internet are accessed and exploited.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When protected mode is on and if:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) The server is not binding explicitly to a set of addresses using the</span><span class="token comment" spellcheck="true">#    "bind" directive.</span><span class="token comment" spellcheck="true"># 2) No password is configured.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The server only accepts connections from clients connecting from the</span><span class="token comment" spellcheck="true"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><span class="token comment" spellcheck="true"># sockets.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default protected mode is enabled. You should disable it only if</span><span class="token comment" spellcheck="true"># you are sure you want clients from other hosts to connect to Redis</span><span class="token comment" spellcheck="true"># even if no authentication is configured, nor a specific set of interfaces</span><span class="token comment" spellcheck="true"># are explicitly listed using the "bind" directive.</span>protected-mode <span class="token function">yes</span><span class="token comment" spellcheck="true"># Accept connections on the specified port, default is 6379 (IANA #815344).</span><span class="token comment" spellcheck="true"># If port 0 is specified Redis will not listen on a TCP socket.</span>port 6379<span class="token comment" spellcheck="true"># TCP listen() backlog.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In high requests-per-second environments you need a high backlog in order</span><span class="token comment" spellcheck="true"># to avoid slow clients connection issues. Note that the Linux kernel</span><span class="token comment" spellcheck="true"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><span class="token comment" spellcheck="true"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><span class="token comment" spellcheck="true"># in order to get the desired effect.</span>tcp-backlog 511<span class="token comment" spellcheck="true"># Unix socket.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Specify the path for the Unix socket that will be used to listen for</span><span class="token comment" spellcheck="true"># incoming connections. There is no default, so Redis will not listen</span><span class="token comment" spellcheck="true"># on a unix socket when not specified.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># unixsocket /tmp/redis.sock</span><span class="token comment" spellcheck="true"># unixsocketperm 700</span><span class="token comment" spellcheck="true"># Close the connection after a client is idle for N seconds (0 to disable)</span><span class="token function">timeout</span> 0<span class="token comment" spellcheck="true"># TCP keepalive.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><span class="token comment" spellcheck="true"># of communication. This is useful for two reasons:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) Detect dead peers.</span><span class="token comment" spellcheck="true"># 2) Force network equipment in the middle to consider the connection to be</span><span class="token comment" spellcheck="true">#    alive.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span><span class="token comment" spellcheck="true"># Note that to close the connection the double of the time is needed.</span><span class="token comment" spellcheck="true"># On other kernels the period depends on the kernel configuration.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A reasonable value for this option is 300 seconds, which is the new</span><span class="token comment" spellcheck="true"># Redis default starting with Redis 3.2.1.</span>tcp-keepalive 300<span class="token comment" spellcheck="true">################################# TLS/SSL #####################################</span><span class="token comment" spellcheck="true"># By default, TLS/SSL is disabled. To enable it, the "tls-port" configuration</span><span class="token comment" spellcheck="true"># directive can be used to define TLS-listening ports. To enable TLS on the</span><span class="token comment" spellcheck="true"># default port, use:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># port 0</span><span class="token comment" spellcheck="true"># tls-port 6379</span><span class="token comment" spellcheck="true"># Configure a X.509 certificate and private key to use for authenticating the</span><span class="token comment" spellcheck="true"># server to connected clients, masters or cluster peers.  These files should be</span><span class="token comment" spellcheck="true"># PEM formatted.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-cert-file redis.crt </span><span class="token comment" spellcheck="true"># tls-key-file redis.key</span><span class="token comment" spellcheck="true"># Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-dh-params-file redis.dh</span><span class="token comment" spellcheck="true"># Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL</span><span class="token comment" spellcheck="true"># clients and peers.  Redis requires an explicit configuration of at least one</span><span class="token comment" spellcheck="true"># of these, and will not implicitly use the system wide configuration.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-ca-cert-file ca.crt</span><span class="token comment" spellcheck="true"># tls-ca-cert-dir /etc/ssl/certs</span><span class="token comment" spellcheck="true"># By default, clients (including replica servers) on a TLS port are required</span><span class="token comment" spellcheck="true"># to authenticate using valid client side certificates.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If "no" is specified, client certificates are not required and not accepted.</span><span class="token comment" spellcheck="true"># If "optional" is specified, client certificates are accepted and must be</span><span class="token comment" spellcheck="true"># valid if provided, but are not required.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-auth-clients no</span><span class="token comment" spellcheck="true"># tls-auth-clients optional</span><span class="token comment" spellcheck="true"># By default, a Redis replica does not attempt to establish a TLS connection</span><span class="token comment" spellcheck="true"># with its master.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Use the following directive to enable TLS on replication links.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-replication yes</span><span class="token comment" spellcheck="true"># By default, the Redis Cluster bus uses a plain TCP connection. To enable</span><span class="token comment" spellcheck="true"># TLS for the bus protocol, use the following directive:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-cluster yes</span><span class="token comment" spellcheck="true"># Explicitly specify TLS versions to support. Allowed values are case insensitive</span><span class="token comment" spellcheck="true"># and include "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3" (OpenSSL >= 1.1.1) or</span><span class="token comment" spellcheck="true"># any combination. To enable only TLSv1.2 and TLSv1.3, use:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-protocols "TLSv1.2 TLSv1.3"</span><span class="token comment" spellcheck="true"># Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information</span><span class="token comment" spellcheck="true"># about the syntax of this string.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note: this configuration applies only to &lt;= TLSv1.2.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-ciphers DEFAULT:!MEDIUM</span><span class="token comment" spellcheck="true"># Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more</span><span class="token comment" spellcheck="true"># information about the syntax of this string, and specifically for TLSv1.3</span><span class="token comment" spellcheck="true"># ciphersuites.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><span class="token comment" spellcheck="true"># When choosing a cipher, use the server's preference instead of the client</span><span class="token comment" spellcheck="true"># preference. By default, the server follows the client's preference.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-prefer-server-ciphers yes</span><span class="token comment" spellcheck="true"># By default, TLS session caching is enabled to allow faster and less expensive</span><span class="token comment" spellcheck="true"># reconnections by clients that support it. Use the following directive to disable</span><span class="token comment" spellcheck="true"># caching.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-session-caching no</span><span class="token comment" spellcheck="true"># Change the default number of TLS sessions cached. A zero value sets the cache</span><span class="token comment" spellcheck="true"># to unlimited size. The default size is 20480.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-session-cache-size 5000</span><span class="token comment" spellcheck="true"># Change the default timeout of cached TLS sessions. The default timeout is 300</span><span class="token comment" spellcheck="true"># seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tls-session-cache-timeout 60</span><span class="token comment" spellcheck="true">################################# GENERAL #####################################</span><span class="token comment" spellcheck="true"># By default Redis does not run as a daemon. Use 'yes' if you need it.</span><span class="token comment" spellcheck="true"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span>daemonize no<span class="token comment" spellcheck="true"># If you run Redis from upstart or systemd, Redis can interact with your</span><span class="token comment" spellcheck="true"># supervision tree. Options:</span><span class="token comment" spellcheck="true">#   supervised no      - no supervision interaction</span><span class="token comment" spellcheck="true">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><span class="token comment" spellcheck="true">#                        requires "expect stop" in your upstart job config</span><span class="token comment" spellcheck="true">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span><span class="token comment" spellcheck="true">#   supervised auto    - detect upstart or systemd method based on</span><span class="token comment" spellcheck="true">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><span class="token comment" spellcheck="true"># Note: these supervision methods only signal "process is ready."</span><span class="token comment" spellcheck="true">#       They do not enable continuous pings back to your supervisor.</span>supervised no<span class="token comment" spellcheck="true"># If a pid file is specified, Redis writes it where specified at startup</span><span class="token comment" spellcheck="true"># and removes it at exit.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When the server runs non daemonized, no pid file is created if none is</span><span class="token comment" spellcheck="true"># specified in the configuration. When the server is daemonized, the pid file</span><span class="token comment" spellcheck="true"># is used even if not specified, defaulting to "/var/run/redis.pid".</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Creating a pid file is best effort: if Redis is not able to create it</span><span class="token comment" spellcheck="true"># nothing bad happens, the server will start and run normally.</span>pidfile /var/run/redis_6379.pid<span class="token comment" spellcheck="true"># Specify the server verbosity level.</span><span class="token comment" spellcheck="true"># This can be one of:</span><span class="token comment" spellcheck="true"># debug (a lot of information, useful for development/testing)</span><span class="token comment" spellcheck="true"># verbose (many rarely useful info, but not a mess like the debug level)</span><span class="token comment" spellcheck="true"># notice (moderately verbose, what you want in production probably)</span><span class="token comment" spellcheck="true"># warning (only very important / critical messages are logged)</span>loglevel notice<span class="token comment" spellcheck="true"># Specify the log file name. Also the empty string can be used to force</span><span class="token comment" spellcheck="true"># Redis to log on the standard output. Note that if you use standard</span><span class="token comment" spellcheck="true"># output for logging but daemonize, logs will be sent to /dev/null</span>logfile <span class="token string">""</span><span class="token comment" spellcheck="true"># To enable logging to the system logger, just set 'syslog-enabled' to yes,</span><span class="token comment" spellcheck="true"># and optionally update the other syslog parameters to suit your needs.</span><span class="token comment" spellcheck="true"># syslog-enabled no</span><span class="token comment" spellcheck="true"># Specify the syslog identity.</span><span class="token comment" spellcheck="true"># syslog-ident redis</span><span class="token comment" spellcheck="true"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span><span class="token comment" spellcheck="true"># syslog-facility local0</span><span class="token comment" spellcheck="true"># Set the number of databases. The default database is DB 0, you can select</span><span class="token comment" spellcheck="true"># a different one on a per-connection basis using SELECT &lt;dbid> where</span><span class="token comment" spellcheck="true"># dbid is a number between 0 and 'databases'-1</span>databases 16<span class="token comment" spellcheck="true"># By default Redis shows an ASCII art logo only when started to log to the</span><span class="token comment" spellcheck="true"># standard output and if the standard output is a TTY. Basically this means</span><span class="token comment" spellcheck="true"># that normally a logo is displayed only in interactive sessions.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However it is possible to force the pre-4.0 behavior and always show a</span><span class="token comment" spellcheck="true"># ASCII art logo in startup logs by setting the following option to yes.</span>always-show-logo <span class="token function">yes</span><span class="token comment" spellcheck="true">################################ SNAPSHOTTING  ################################</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Save the DB on disk:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   save &lt;seconds> &lt;changes></span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   Will save the DB if both the given number of seconds and the given</span><span class="token comment" spellcheck="true">#   number of write operations against the DB occurred.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   In the example below the behavior will be to save:</span><span class="token comment" spellcheck="true">#   after 900 sec (15 min) if at least 1 key changed</span><span class="token comment" spellcheck="true">#   after 300 sec (5 min) if at least 10 keys changed</span><span class="token comment" spellcheck="true">#   after 60 sec if at least 10000 keys changed</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   Note: you can disable saving completely by commenting out all "save" lines.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   It is also possible to remove all the previously configured save</span><span class="token comment" spellcheck="true">#   points by adding a save directive with a single empty string argument</span><span class="token comment" spellcheck="true">#   like in the following example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   save ""</span>save 900 1save 300 10save 60 10000<span class="token comment" spellcheck="true"># By default Redis will stop accepting writes if RDB snapshots are enabled</span><span class="token comment" spellcheck="true"># (at least one save point) and the latest background save failed.</span><span class="token comment" spellcheck="true"># This will make the user aware (in a hard way) that data is not persisting</span><span class="token comment" spellcheck="true"># on disk properly, otherwise chances are that no one will notice and some</span><span class="token comment" spellcheck="true"># disaster will happen.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If the background saving process will start working again Redis will</span><span class="token comment" spellcheck="true"># automatically allow writes again.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However if you have setup your proper monitoring of the Redis server</span><span class="token comment" spellcheck="true"># and persistence, you may want to disable this feature so that Redis will</span><span class="token comment" spellcheck="true"># continue to work as usual even if there are problems with disk,</span><span class="token comment" spellcheck="true"># permissions, and so forth.</span>stop-writes-on-bgsave-error <span class="token function">yes</span><span class="token comment" spellcheck="true"># Compress string objects using LZF when dump .rdb databases?</span><span class="token comment" spellcheck="true"># By default compression is enabled as it's almost always a win.</span><span class="token comment" spellcheck="true"># If you want to save some CPU in the saving child set it to 'no' but</span><span class="token comment" spellcheck="true"># the dataset will likely be bigger if you have compressible values or keys.</span>rdbcompression <span class="token function">yes</span><span class="token comment" spellcheck="true"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><span class="token comment" spellcheck="true"># This makes the format more resistant to corruption but there is a performance</span><span class="token comment" spellcheck="true"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span><span class="token comment" spellcheck="true"># for maximum performances.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># RDB files created with checksum disabled have a checksum of zero that will</span><span class="token comment" spellcheck="true"># tell the loading code to skip the check.</span>rdbchecksum <span class="token function">yes</span><span class="token comment" spellcheck="true"># The filename where to dump the DB</span>dbfilename dump.rdb<span class="token comment" spellcheck="true"># Remove RDB files used by replication in instances without persistence</span><span class="token comment" spellcheck="true"># enabled. By default this option is disabled, however there are environments</span><span class="token comment" spellcheck="true"># where for regulations or other security concerns, RDB files persisted on</span><span class="token comment" spellcheck="true"># disk by masters in order to feed replicas, or stored on disk by replicas</span><span class="token comment" spellcheck="true"># in order to load them for the initial synchronization, should be deleted</span><span class="token comment" spellcheck="true"># ASAP. Note that this option ONLY WORKS in instances that have both AOF</span><span class="token comment" spellcheck="true"># and RDB persistence disabled, otherwise is completely ignored.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># An alternative (and sometimes better) way to obtain the same effect is</span><span class="token comment" spellcheck="true"># to use diskless replication on both master and replicas instances. However</span><span class="token comment" spellcheck="true"># in the case of replicas, diskless is not always an option.</span>rdb-del-sync-files no<span class="token comment" spellcheck="true"># The working directory.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The DB will be written inside this directory, with the filename specified</span><span class="token comment" spellcheck="true"># above using the 'dbfilename' configuration directive.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The Append Only File will also be created inside this directory.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that you must specify a directory here, not a file name.</span><span class="token function">dir</span> ./<span class="token comment" spellcheck="true">################################# REPLICATION #################################</span><span class="token comment" spellcheck="true"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><span class="token comment" spellcheck="true"># another Redis server. A few things to understand ASAP about Redis replication.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   +------------------+      +---------------+</span><span class="token comment" spellcheck="true">#   |      Master      | ---> |    Replica    |</span><span class="token comment" spellcheck="true">#   | (receive writes) |      |  (exact copy) |</span><span class="token comment" spellcheck="true">#   +------------------+      +---------------+</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) Redis replication is asynchronous, but you can configure a master to</span><span class="token comment" spellcheck="true">#    stop accepting writes if it appears to be not connected with at least</span><span class="token comment" spellcheck="true">#    a given number of replicas.</span><span class="token comment" spellcheck="true"># 2) Redis replicas are able to perform a partial resynchronization with the</span><span class="token comment" spellcheck="true">#    master if the replication link is lost for a relatively small amount of</span><span class="token comment" spellcheck="true">#    time. You may want to configure the replication backlog size (see the next</span><span class="token comment" spellcheck="true">#    sections of this file) with a sensible value depending on your needs.</span><span class="token comment" spellcheck="true"># 3) Replication is automatic and does not need user intervention. After a</span><span class="token comment" spellcheck="true">#    network partition replicas automatically try to reconnect to masters</span><span class="token comment" spellcheck="true">#    and resynchronize with them.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># replicaof &lt;masterip> &lt;masterport></span><span class="token comment" spellcheck="true"># If the master is password protected (using the "requirepass" configuration</span><span class="token comment" spellcheck="true"># directive below) it is possible to tell the replica to authenticate before</span><span class="token comment" spellcheck="true"># starting the replication synchronization process, otherwise the master will</span><span class="token comment" spellcheck="true"># refuse the replica request.</span><span class="token comment" spellcheck="true">#</span>masterauth 123456<span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However this is not enough if you are using Redis ACLs (for Redis version</span><span class="token comment" spellcheck="true"># 6 or greater), and the default user is not capable of running the PSYNC</span><span class="token comment" spellcheck="true"># command and/or other commands needed for replication. In this case it's</span><span class="token comment" spellcheck="true"># better to configure a special user to use with replication, and specify the</span><span class="token comment" spellcheck="true"># masteruser configuration as such:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># masteruser &lt;username></span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When masteruser is specified, the replica will authenticate against its</span><span class="token comment" spellcheck="true"># master using the new AUTH form: AUTH &lt;username> &lt;password>.</span><span class="token comment" spellcheck="true"># When a replica loses its connection with the master, or when the replication</span><span class="token comment" spellcheck="true"># is still in progress, the replica can act in two different ways:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will</span><span class="token comment" spellcheck="true">#    still reply to client requests, possibly with out of date data, or the</span><span class="token comment" spellcheck="true">#    data set may just be empty if this is the first synchronization.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 2) If replica-serve-stale-data is set to 'no' the replica will reply with</span><span class="token comment" spellcheck="true">#    an error "SYNC with master in progress" to all commands except:</span><span class="token comment" spellcheck="true">#    INFO, REPLICAOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, SUBSCRIBE,</span><span class="token comment" spellcheck="true">#    UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, COMMAND, POST,</span><span class="token comment" spellcheck="true">#    HOST and LATENCY.</span><span class="token comment" spellcheck="true">#</span>replica-serve-stale-data <span class="token function">yes</span><span class="token comment" spellcheck="true"># You can configure a replica instance to accept writes or not. Writing against</span><span class="token comment" spellcheck="true"># a replica instance may be useful to store some ephemeral data (because data</span><span class="token comment" spellcheck="true"># written on a replica will be easily deleted after resync with the master) but</span><span class="token comment" spellcheck="true"># may also cause problems if clients are writing to it because of a</span><span class="token comment" spellcheck="true"># misconfiguration.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Since Redis 2.6 by default replicas are read-only.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note: read only replicas are not designed to be exposed to untrusted clients</span><span class="token comment" spellcheck="true"># on the internet. It's just a protection layer against misuse of the instance.</span><span class="token comment" spellcheck="true"># Still a read only replica exports by default all the administrative commands</span><span class="token comment" spellcheck="true"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><span class="token comment" spellcheck="true"># security of read only replicas using 'rename-command' to shadow all the</span><span class="token comment" spellcheck="true"># administrative / dangerous commands.</span>replica-read-only <span class="token function">yes</span><span class="token comment" spellcheck="true"># Replication SYNC strategy: disk or socket.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># New replicas and reconnecting replicas that are not able to continue the</span><span class="token comment" spellcheck="true"># replication process just receiving differences, need to do what is called a</span><span class="token comment" spellcheck="true"># "full synchronization". An RDB file is transmitted from the master to the</span><span class="token comment" spellcheck="true"># replicas.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The transmission can happen in two different ways:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span><span class="token comment" spellcheck="true">#                 file on disk. Later the file is transferred by the parent</span><span class="token comment" spellcheck="true">#                 process to the replicas incrementally.</span><span class="token comment" spellcheck="true"># 2) Diskless: The Redis master creates a new process that directly writes the</span><span class="token comment" spellcheck="true">#              RDB file to replica sockets, without touching the disk at all.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># With disk-backed replication, while the RDB file is generated, more replicas</span><span class="token comment" spellcheck="true"># can be queued and served with the RDB file as soon as the current child</span><span class="token comment" spellcheck="true"># producing the RDB file finishes its work. With diskless replication instead</span><span class="token comment" spellcheck="true"># once the transfer starts, new replicas arriving will be queued and a new</span><span class="token comment" spellcheck="true"># transfer will start when the current one terminates.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When diskless replication is used, the master waits a configurable amount of</span><span class="token comment" spellcheck="true"># time (in seconds) before starting the transfer in the hope that multiple</span><span class="token comment" spellcheck="true"># replicas will arrive and the transfer can be parallelized.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># With slow disks and fast (large bandwidth) networks, diskless replication</span><span class="token comment" spellcheck="true"># works better.</span>repl-diskless-sync no<span class="token comment" spellcheck="true"># When diskless replication is enabled, it is possible to configure the delay</span><span class="token comment" spellcheck="true"># the server waits in order to spawn the child that transfers the RDB via socket</span><span class="token comment" spellcheck="true"># to the replicas.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This is important since once the transfer starts, it is not possible to serve</span><span class="token comment" spellcheck="true"># new replicas arriving, that will be queued for the next RDB transfer, so the</span><span class="token comment" spellcheck="true"># server waits a delay in order to let more replicas arrive.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The delay is specified in seconds, and by default is 5 seconds. To disable</span><span class="token comment" spellcheck="true"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span>repl-diskless-sync-delay 5<span class="token comment" spellcheck="true"># -----------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># WARNING: RDB diskless load is experimental. Since in this setup the replica</span><span class="token comment" spellcheck="true"># does not immediately store an RDB on disk, it may cause data loss during</span><span class="token comment" spellcheck="true"># failovers. RDB diskless load + Redis modules not handling I/O reads may also</span><span class="token comment" spellcheck="true"># cause Redis to abort in case of I/O errors during the initial synchronization</span><span class="token comment" spellcheck="true"># stage with the master. Use only if your do what you are doing.</span><span class="token comment" spellcheck="true"># -----------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Replica can load the RDB it reads from the replication link directly from the</span><span class="token comment" spellcheck="true"># socket, or store the RDB to a file and read that file after it was completely</span><span class="token comment" spellcheck="true"># received from the master.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In many cases the disk is slower than the network, and storing and loading</span><span class="token comment" spellcheck="true"># the RDB file may increase replication time (and even increase the master's</span><span class="token comment" spellcheck="true"># Copy on Write memory and salve buffers).</span><span class="token comment" spellcheck="true"># However, parsing the RDB file directly from the socket may mean that we have</span><span class="token comment" spellcheck="true"># to flush the contents of the current database before the full rdb was</span><span class="token comment" spellcheck="true"># received. For this reason we have the following options:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># "disabled"    - Don't use diskless load (store the rdb file to the disk first)</span><span class="token comment" spellcheck="true"># "on-empty-db" - Use diskless load only when it is completely safe.</span><span class="token comment" spellcheck="true"># "swapdb"      - Keep a copy of the current db contents in RAM while parsing</span><span class="token comment" spellcheck="true">#                 the data directly from the socket. note that this requires</span><span class="token comment" spellcheck="true">#                 sufficient memory, if you don't have it, you risk an OOM kill.</span>repl-diskless-load disabled<span class="token comment" spellcheck="true"># Replicas send PINGs to server in a predefined interval. It's possible to</span><span class="token comment" spellcheck="true"># change this interval with the repl_ping_replica_period option. The default</span><span class="token comment" spellcheck="true"># value is 10 seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># repl-ping-replica-period 10</span><span class="token comment" spellcheck="true"># The following option sets the replication timeout for:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><span class="token comment" spellcheck="true"># 2) Master timeout from the point of view of replicas (data, pings).</span><span class="token comment" spellcheck="true"># 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># It is important to make sure that this value is greater than the value</span><span class="token comment" spellcheck="true"># specified for repl-ping-replica-period otherwise a timeout will be detected</span><span class="token comment" spellcheck="true"># every time there is low traffic between the master and the replica. The default</span><span class="token comment" spellcheck="true"># value is 60 seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># repl-timeout 60</span><span class="token comment" spellcheck="true"># Disable TCP_NODELAY on the replica socket after SYNC?</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you select "yes" Redis will use a smaller number of TCP packets and</span><span class="token comment" spellcheck="true"># less bandwidth to send data to replicas. But this can add a delay for</span><span class="token comment" spellcheck="true"># the data to appear on the replica side, up to 40 milliseconds with</span><span class="token comment" spellcheck="true"># Linux kernels using a default configuration.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you select "no" the delay for data to appear on the replica side will</span><span class="token comment" spellcheck="true"># be reduced but more bandwidth will be used for replication.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default we optimize for low latency, but in very high traffic conditions</span><span class="token comment" spellcheck="true"># or when the master and replicas are many hops away, turning this to "yes" may</span><span class="token comment" spellcheck="true"># be a good idea.</span>repl-disable-tcp-nodelay no<span class="token comment" spellcheck="true"># Set the replication backlog size. The backlog is a buffer that accumulates</span><span class="token comment" spellcheck="true"># replica data when replicas are disconnected for some time, so that when a</span><span class="token comment" spellcheck="true"># replica wants to reconnect again, often a full resync is not needed, but a</span><span class="token comment" spellcheck="true"># partial resync is enough, just passing the portion of data the replica</span><span class="token comment" spellcheck="true"># missed while disconnected.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The bigger the replication backlog, the longer the replica can endure the</span><span class="token comment" spellcheck="true"># disconnect and later be able to perform a partial resynchronization.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The backlog is only allocated if there is at least one replica connected.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># repl-backlog-size 1mb</span><span class="token comment" spellcheck="true"># After a master has no connected replicas for some time, the backlog will be</span><span class="token comment" spellcheck="true"># freed. The following option configures the amount of seconds that need to</span><span class="token comment" spellcheck="true"># elapse, starting from the time the last replica disconnected, for the backlog</span><span class="token comment" spellcheck="true"># buffer to be freed.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that replicas never free the backlog for timeout, since they may be</span><span class="token comment" spellcheck="true"># promoted to masters later, and should be able to correctly "partially</span><span class="token comment" spellcheck="true"># resynchronize" with other replicas: hence they should always accumulate backlog.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A value of 0 means to never release the backlog.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># repl-backlog-ttl 3600</span><span class="token comment" spellcheck="true"># The replica priority is an integer number published by Redis in the INFO</span><span class="token comment" spellcheck="true"># output. It is used by Redis Sentinel in order to select a replica to promote</span><span class="token comment" spellcheck="true"># into a master if the master is no longer working correctly.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A replica with a low priority number is considered better for promotion, so</span><span class="token comment" spellcheck="true"># for instance if there are three replicas with priority 10, 100, 25 Sentinel</span><span class="token comment" spellcheck="true"># will pick the one with priority 10, that is the lowest.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However a special priority of 0 marks the replica as not able to perform the</span><span class="token comment" spellcheck="true"># role of master, so a replica with priority of 0 will never be selected by</span><span class="token comment" spellcheck="true"># Redis Sentinel for promotion.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default the priority is 100.</span>replica-priority 100<span class="token comment" spellcheck="true"># It is possible for a master to stop accepting writes if there are less than</span><span class="token comment" spellcheck="true"># N replicas connected, having a lag less or equal than M seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The N replicas need to be in "online" state.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span><span class="token comment" spellcheck="true"># the last ping received from the replica, that is usually sent every second.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This option does not GUARANTEE that N replicas will accept the write, but</span><span class="token comment" spellcheck="true"># will limit the window of exposure for lost writes in case not enough replicas</span><span class="token comment" spellcheck="true"># are available, to the specified number of seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># min-replicas-to-write 3</span><span class="token comment" spellcheck="true"># min-replicas-max-lag 10</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Setting one or the other to 0 disables the feature.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default min-replicas-to-write is set to 0 (feature disabled) and</span><span class="token comment" spellcheck="true"># min-replicas-max-lag is set to 10.</span><span class="token comment" spellcheck="true"># A Redis master is able to list the address and port of the attached</span><span class="token comment" spellcheck="true"># replicas in different ways. For example the "INFO replication" section</span><span class="token comment" spellcheck="true"># offers this information, which is used, among other tools, by</span><span class="token comment" spellcheck="true"># Redis Sentinel in order to discover replica instances.</span><span class="token comment" spellcheck="true"># Another place where this info is available is in the output of the</span><span class="token comment" spellcheck="true"># "ROLE" command of a master.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The listed IP address and port normally reported by a replica is</span><span class="token comment" spellcheck="true"># obtained in the following way:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   IP: The address is auto detected by checking the peer address</span><span class="token comment" spellcheck="true">#   of the socket used by the replica to connect with the master.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   Port: The port is communicated by the replica during the replication</span><span class="token comment" spellcheck="true">#   handshake, and is normally the port that the replica is using to</span><span class="token comment" spellcheck="true">#   listen for connections.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However when port forwarding or Network Address Translation (NAT) is</span><span class="token comment" spellcheck="true"># used, the replica may actually be reachable via different IP and port</span><span class="token comment" spellcheck="true"># pairs. The following two options can be used by a replica in order to</span><span class="token comment" spellcheck="true"># report to its master a specific set of IP and port, so that both INFO</span><span class="token comment" spellcheck="true"># and ROLE will report those values.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># There is no need to use both the options if you need to override just</span><span class="token comment" spellcheck="true"># the port or the IP address.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># replica-announce-ip 5.5.5.5</span><span class="token comment" spellcheck="true"># replica-announce-port 1234</span><span class="token comment" spellcheck="true">############################### KEYS TRACKING #################################</span><span class="token comment" spellcheck="true"># Redis implements server assisted support for client side caching of values.</span><span class="token comment" spellcheck="true"># This is implemented using an invalidation table that remembers, using</span><span class="token comment" spellcheck="true"># 16 millions of slots, what clients may have certain subsets of keys. In turn</span><span class="token comment" spellcheck="true"># this is used in order to send invalidation messages to clients. Please</span><span class="token comment" spellcheck="true"># check this page to understand more about the feature:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   https://redis.io/topics/client-side-caching</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When tracking is enabled for a client, all the read only queries are assumed</span><span class="token comment" spellcheck="true"># to be cached: this will force Redis to store information in the invalidation</span><span class="token comment" spellcheck="true"># table. When keys are modified, such information is flushed away, and</span><span class="token comment" spellcheck="true"># invalidation messages are sent to the clients. However if the workload is</span><span class="token comment" spellcheck="true"># heavily dominated by reads, Redis could use more and more memory in order</span><span class="token comment" spellcheck="true"># to track the keys fetched by many clients.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For this reason it is possible to configure a maximum fill value for the</span><span class="token comment" spellcheck="true"># invalidation table. By default it is set to 1M of keys, and once this limit</span><span class="token comment" spellcheck="true"># is reached, Redis will start to evict keys in the invalidation table</span><span class="token comment" spellcheck="true"># even if they were not modified, just to reclaim memory: this will in turn</span><span class="token comment" spellcheck="true"># force the clients to invalidate the cached values. Basically the table</span><span class="token comment" spellcheck="true"># maximum size is a trade off between the memory you want to spend server</span><span class="token comment" spellcheck="true"># side to track information about who cached what, and the ability of clients</span><span class="token comment" spellcheck="true"># to retain cached objects in memory.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you set the value to 0, it means there are no limits, and Redis will</span><span class="token comment" spellcheck="true"># retain as many keys as needed in the invalidation table.</span><span class="token comment" spellcheck="true"># In the "stats" INFO section, you can find information about the number of</span><span class="token comment" spellcheck="true"># keys in the invalidation table at every given moment.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note: when key tracking is used in broadcasting mode, no memory is used</span><span class="token comment" spellcheck="true"># in the server side so this setting is useless.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># tracking-table-max-keys 1000000</span><span class="token comment" spellcheck="true">################################## SECURITY ###################################</span><span class="token comment" spellcheck="true"># Warning: since Redis is pretty fast, an outside user can try up to</span><span class="token comment" spellcheck="true"># 1 million passwords per second against a modern box. This means that you</span><span class="token comment" spellcheck="true"># should use very strong passwords, otherwise they will be very easy to break.</span><span class="token comment" spellcheck="true"># Note that because the password is really a shared secret between the client</span><span class="token comment" spellcheck="true"># and the server, and should not be memorized by any human, the password</span><span class="token comment" spellcheck="true"># can be easily a long string from /dev/urandom or whatever, so by using a</span><span class="token comment" spellcheck="true"># long and unguessable password no brute force attack will be possible.</span><span class="token comment" spellcheck="true"># Redis ACL users are defined in the following format:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   user &lt;username> ... acl rules ...</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   user worker +@list +@connection ~jobs:* on >ffa9203c493aa99</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The special username "default" is used for new connections. If this user</span><span class="token comment" spellcheck="true"># has the "nopass" rule, then new connections will be immediately authenticated</span><span class="token comment" spellcheck="true"># as the "default" user without the need of any password provided via the</span><span class="token comment" spellcheck="true"># AUTH command. Otherwise if the "default" user is not flagged with "nopass"</span><span class="token comment" spellcheck="true"># the connections will start in not authenticated state, and will require</span><span class="token comment" spellcheck="true"># AUTH (or the HELLO command AUTH option) in order to be authenticated and</span><span class="token comment" spellcheck="true"># start to work.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The ACL rules that describe what a user can do are the following:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  on           Enable the user: it is possible to authenticate as this user.</span><span class="token comment" spellcheck="true">#  off          Disable the user: it's no longer possible to authenticate</span><span class="token comment" spellcheck="true">#               with this user, however the already authenticated connections</span><span class="token comment" spellcheck="true">#               will still work.</span><span class="token comment" spellcheck="true">#  +&lt;command>   Allow the execution of that command</span><span class="token comment" spellcheck="true">#  -&lt;command>   Disallow the execution of that command</span><span class="token comment" spellcheck="true">#  +@&lt;category> Allow the execution of all the commands in such category</span><span class="token comment" spellcheck="true">#               with valid categories are like @admin, @set, @sortedset, ...</span><span class="token comment" spellcheck="true">#               and so forth, see the full list in the server.c file where</span><span class="token comment" spellcheck="true">#               the Redis command table is described and defined.</span><span class="token comment" spellcheck="true">#               The special category @all means all the commands, but currently</span><span class="token comment" spellcheck="true">#               present in the server, and that will be loaded in the future</span><span class="token comment" spellcheck="true">#               via modules.</span><span class="token comment" spellcheck="true">#  +&lt;command>|subcommand    Allow a specific subcommand of an otherwise</span><span class="token comment" spellcheck="true">#                           disabled command. Note that this form is not</span><span class="token comment" spellcheck="true">#                           allowed as negative like -DEBUG|SEGFAULT, but</span><span class="token comment" spellcheck="true">#                           only additive starting with "+".</span><span class="token comment" spellcheck="true">#  allcommands  Alias for +@all. Note that it implies the ability to execute</span><span class="token comment" spellcheck="true">#               all the future commands loaded via the modules system.</span><span class="token comment" spellcheck="true">#  nocommands   Alias for -@all.</span><span class="token comment" spellcheck="true">#  ~&lt;pattern>   Add a pattern of keys that can be mentioned as part of</span><span class="token comment" spellcheck="true">#               commands. For instance ~* allows all the keys. The pattern</span><span class="token comment" spellcheck="true">#               is a glob-style pattern like the one of KEYS.</span><span class="token comment" spellcheck="true">#               It is possible to specify multiple patterns.</span><span class="token comment" spellcheck="true">#  allkeys      Alias for ~*</span><span class="token comment" spellcheck="true">#  resetkeys    Flush the list of allowed keys patterns.</span><span class="token comment" spellcheck="true">#  >&lt;password>  Add this password to the list of valid password for the user.</span><span class="token comment" spellcheck="true">#               For example >mypass will add "mypass" to the list.</span><span class="token comment" spellcheck="true">#               This directive clears the "nopass" flag (see later).</span><span class="token comment" spellcheck="true">#  &lt;&lt;password>  Remove this password from the list of valid passwords.</span><span class="token comment" spellcheck="true">#  nopass       All the set passwords of the user are removed, and the user</span><span class="token comment" spellcheck="true">#               is flagged as requiring no password: it means that every</span><span class="token comment" spellcheck="true">#               password will work against this user. If this directive is</span><span class="token comment" spellcheck="true">#               used for the default user, every new connection will be</span><span class="token comment" spellcheck="true">#               immediately authenticated with the default user without</span><span class="token comment" spellcheck="true">#               any explicit AUTH command required. Note that the "resetpass"</span><span class="token comment" spellcheck="true">#               directive will clear this condition.</span><span class="token comment" spellcheck="true">#  resetpass    Flush the list of allowed passwords. Moreover removes the</span><span class="token comment" spellcheck="true">#               "nopass" status. After "resetpass" the user has no associated</span><span class="token comment" spellcheck="true">#               passwords and there is no way to authenticate without adding</span><span class="token comment" spellcheck="true">#               some password (or setting it as "nopass" later).</span><span class="token comment" spellcheck="true">#  reset        Performs the following actions: resetpass, resetkeys, off,</span><span class="token comment" spellcheck="true">#               -@all. The user returns to the same state it has immediately</span><span class="token comment" spellcheck="true">#               after its creation.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ACL rules can be specified in any order: for instance you can start with</span><span class="token comment" spellcheck="true"># passwords, then flags, or key patterns. However note that the additive</span><span class="token comment" spellcheck="true"># and subtractive rules will CHANGE MEANING depending on the ordering.</span><span class="token comment" spellcheck="true"># For instance see the following example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   user alice on +@all -DEBUG ~* >somepassword</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This will allow "alice" to use all the commands with the exception of the</span><span class="token comment" spellcheck="true"># DEBUG command, since +@all added all the commands to the set of the commands</span><span class="token comment" spellcheck="true"># alice can use, and later DEBUG was removed. However if we invert the order</span><span class="token comment" spellcheck="true"># of two ACL rules the result will be different:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   user alice on -DEBUG +@all ~* >somepassword</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Now DEBUG was removed when alice had yet no commands in the set of allowed</span><span class="token comment" spellcheck="true"># commands, later all the commands are added, so the user will be able to</span><span class="token comment" spellcheck="true"># execute everything.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Basically ACL rules are processed left-to-right.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For more information about ACL configuration please refer to</span><span class="token comment" spellcheck="true"># the Redis web site at https://redis.io/topics/acl</span><span class="token comment" spellcheck="true"># ACL LOG</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The ACL Log tracks failed commands and authentication events associated</span><span class="token comment" spellcheck="true"># with ACLs. The ACL Log is useful to troubleshoot failed commands blocked </span><span class="token comment" spellcheck="true"># by ACLs. The ACL Log is stored in memory. You can reclaim memory with </span><span class="token comment" spellcheck="true"># ACL LOG RESET. Define the maximum entry length of the ACL Log below.</span>acllog-max-len 128<span class="token comment" spellcheck="true"># Using an external ACL file</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Instead of configuring users here in this file, it is possible to use</span><span class="token comment" spellcheck="true"># a stand-alone file just listing users. The two methods cannot be mixed:</span><span class="token comment" spellcheck="true"># if you configure users here and at the same time you activate the external</span><span class="token comment" spellcheck="true"># ACL file, the server will refuse to start.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The format of the external ACL user file is exactly the same as the</span><span class="token comment" spellcheck="true"># format that is used inside redis.conf to describe users.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># aclfile /etc/redis/users.acl</span><span class="token comment" spellcheck="true"># IMPORTANT NOTE: starting with Redis 6 "requirepass" is just a compatibility</span><span class="token comment" spellcheck="true"># layer on top of the new ACL system. The option effect will be just setting</span><span class="token comment" spellcheck="true"># the password for the default user. Clients will still authenticate using</span><span class="token comment" spellcheck="true"># AUTH &lt;password> as usually, or more explicitly with AUTH default &lt;password></span><span class="token comment" spellcheck="true"># if they follow the new protocol: both will work.</span><span class="token comment" spellcheck="true">#</span>requirepass 123456<span class="token comment" spellcheck="true"># Command renaming (DEPRECATED).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ------------------------------------------------------------------------</span><span class="token comment" spellcheck="true"># WARNING: avoid using this option if possible. Instead use ACLs to remove</span><span class="token comment" spellcheck="true"># commands from the default user, and put them only in some admin user you</span><span class="token comment" spellcheck="true"># create for administrative purposes.</span><span class="token comment" spellcheck="true"># ------------------------------------------------------------------------</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># It is possible to change the name of dangerous commands in a shared</span><span class="token comment" spellcheck="true"># environment. For instance the CONFIG command may be renamed into something</span><span class="token comment" spellcheck="true"># hard to guess so that it will still be available for internal-use tools</span><span class="token comment" spellcheck="true"># but not available for general clients.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># It is also possible to completely kill a command by renaming it into</span><span class="token comment" spellcheck="true"># an empty string:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># rename-command CONFIG ""</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Please note that changing the name of commands that are logged into the</span><span class="token comment" spellcheck="true"># AOF file or transmitted to replicas may cause problems.</span><span class="token comment" spellcheck="true">################################### CLIENTS ####################################</span><span class="token comment" spellcheck="true"># Set the max number of connected clients at the same time. By default</span><span class="token comment" spellcheck="true"># this limit is set to 10000 clients, however if the Redis server is not</span><span class="token comment" spellcheck="true"># able to configure the process file limit to allow for the specified limit</span><span class="token comment" spellcheck="true"># the max number of allowed clients is set to the current file limit</span><span class="token comment" spellcheck="true"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Once the limit is reached Redis will close all the new connections sending</span><span class="token comment" spellcheck="true"># an error 'max number of clients reached'.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># IMPORTANT: When Redis Cluster is used, the max number of connections is also</span><span class="token comment" spellcheck="true"># shared with the cluster bus: every node in the cluster will use two</span><span class="token comment" spellcheck="true"># connections, one incoming and another outgoing. It is important to size the</span><span class="token comment" spellcheck="true"># limit accordingly in case of very large clusters.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># maxclients 10000</span><span class="token comment" spellcheck="true">############################## MEMORY MANAGEMENT ################################</span><span class="token comment" spellcheck="true"># Set a memory usage limit to the specified amount of bytes.</span><span class="token comment" spellcheck="true"># When the memory limit is reached Redis will try to remove keys</span><span class="token comment" spellcheck="true"># according to the eviction policy selected (see maxmemory-policy).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If Redis can't remove keys according to the policy, or if the policy is</span><span class="token comment" spellcheck="true"># set to 'noeviction', Redis will start to reply with errors to commands</span><span class="token comment" spellcheck="true"># that would use more memory, like SET, LPUSH, and so on, and will continue</span><span class="token comment" spellcheck="true"># to reply to read-only commands like GET.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span><span class="token comment" spellcheck="true"># set a hard memory limit for an instance (using the 'noeviction' policy).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># WARNING: If you have replicas attached to an instance with maxmemory on,</span><span class="token comment" spellcheck="true"># the size of the output buffers needed to feed the replicas are subtracted</span><span class="token comment" spellcheck="true"># from the used memory count, so that network problems / resyncs will</span><span class="token comment" spellcheck="true"># not trigger a loop where keys are evicted, and in turn the output</span><span class="token comment" spellcheck="true"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span><span class="token comment" spellcheck="true"># of more keys, and so forth until the database is completely emptied.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In short... if you have replicas attached it is suggested that you set a lower</span><span class="token comment" spellcheck="true"># limit for maxmemory so that there is some free RAM on the system for replica</span><span class="token comment" spellcheck="true"># output buffers (but this is not needed if the policy is 'noeviction').</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># maxmemory &lt;bytes></span><span class="token comment" spellcheck="true"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><span class="token comment" spellcheck="true"># is reached. You can select one from the following behaviors:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># volatile-lru -> Evict using approximated LRU, only keys with an expire set.</span><span class="token comment" spellcheck="true"># allkeys-lru -> Evict any key using approximated LRU.</span><span class="token comment" spellcheck="true"># volatile-lfu -> Evict using approximated LFU, only keys with an expire set.</span><span class="token comment" spellcheck="true"># allkeys-lfu -> Evict any key using approximated LFU.</span><span class="token comment" spellcheck="true"># volatile-random -> Remove a random key having an expire set.</span><span class="token comment" spellcheck="true"># allkeys-random -> Remove a random key, any key.</span><span class="token comment" spellcheck="true"># volatile-ttl -> Remove the key with the nearest expire time (minor TTL)</span><span class="token comment" spellcheck="true"># noeviction -> Don't evict anything, just return an error on write operations.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># LRU means Least Recently Used</span><span class="token comment" spellcheck="true"># LFU means Least Frequently Used</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Both LRU, LFU and volatile-ttl are implemented using approximated</span><span class="token comment" spellcheck="true"># randomized algorithms.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note: with any of the above policies, Redis will return an error on write</span><span class="token comment" spellcheck="true">#       operations, when there are no suitable keys for eviction.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#       At the date of writing these commands are: set setnx setex append</span><span class="token comment" spellcheck="true">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><span class="token comment" spellcheck="true">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><span class="token comment" spellcheck="true">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><span class="token comment" spellcheck="true">#       getset mset msetnx exec sort</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default is:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># maxmemory-policy noeviction</span><span class="token comment" spellcheck="true"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><span class="token comment" spellcheck="true"># algorithms (in order to save memory), so you can tune it for speed or</span><span class="token comment" spellcheck="true"># accuracy. By default Redis will check five keys and pick the one that was</span><span class="token comment" spellcheck="true"># used least recently, you can change the sample size using the following</span><span class="token comment" spellcheck="true"># configuration directive.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default of 5 produces good enough results. 10 Approximates very closely</span><span class="token comment" spellcheck="true"># true LRU but costs more CPU. 3 is faster but not very accurate.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># maxmemory-samples 5</span><span class="token comment" spellcheck="true"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><span class="token comment" spellcheck="true"># (unless it is promoted to master after a failover or manually). It means</span><span class="token comment" spellcheck="true"># that the eviction of keys will be just handled by the master, sending the</span><span class="token comment" spellcheck="true"># DEL commands to the replica as keys evict in the master side.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This behavior ensures that masters and replicas stay consistent, and is usually</span><span class="token comment" spellcheck="true"># what you want, however if your replica is writable, or you want the replica</span><span class="token comment" spellcheck="true"># to have a different memory setting, and you are sure all the writes performed</span><span class="token comment" spellcheck="true"># to the replica are idempotent, then you may change this default (but be sure</span><span class="token comment" spellcheck="true"># to understand what you are doing).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that since the replica by default does not evict, it may end using more</span><span class="token comment" spellcheck="true"># memory than the one set via maxmemory (there are certain buffers that may</span><span class="token comment" spellcheck="true"># be larger on the replica, or data structures may sometimes take more memory</span><span class="token comment" spellcheck="true"># and so forth). So make sure you monitor your replicas and make sure they</span><span class="token comment" spellcheck="true"># have enough memory to never hit a real out-of-memory condition before the</span><span class="token comment" spellcheck="true"># master hits the configured maxmemory setting.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># replica-ignore-maxmemory yes</span><span class="token comment" spellcheck="true"># Redis reclaims expired keys in two ways: upon access when those keys are</span><span class="token comment" spellcheck="true"># found to be expired, and also in background, in what is called the</span><span class="token comment" spellcheck="true"># "active expire key". The key space is slowly and interactively scanned</span><span class="token comment" spellcheck="true"># looking for expired keys to reclaim, so that it is possible to free memory</span><span class="token comment" spellcheck="true"># of keys that are expired and will never be accessed again in a short time.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default effort of the expire cycle will try to avoid having more than</span><span class="token comment" spellcheck="true"># ten percent of expired keys still in memory, and will try to avoid consuming</span><span class="token comment" spellcheck="true"># more than 25% of total memory and to add latency to the system. However</span><span class="token comment" spellcheck="true"># it is possible to increase the expire "effort" that is normally set to</span><span class="token comment" spellcheck="true"># "1", to a greater value, up to the value "10". At its maximum value the</span><span class="token comment" spellcheck="true"># system will use more CPU, longer cycles (and technically may introduce</span><span class="token comment" spellcheck="true"># more latency), and will tolerate less already expired keys still present</span><span class="token comment" spellcheck="true"># in the system. It's a tradeoff between memory, CPU and latency.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># active-expire-effort 1</span><span class="token comment" spellcheck="true">############################# LAZY FREEING ####################################</span><span class="token comment" spellcheck="true"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span><span class="token comment" spellcheck="true"># deletion of the object. It means that the server stops processing new commands</span><span class="token comment" spellcheck="true"># in order to reclaim all the memory associated with an object in a synchronous</span><span class="token comment" spellcheck="true"># way. If the key deleted is associated with a small object, the time needed</span><span class="token comment" spellcheck="true"># in order to execute the DEL command is very small and comparable to most other</span><span class="token comment" spellcheck="true"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span><span class="token comment" spellcheck="true"># aggregated value containing millions of elements, the server can block for</span><span class="token comment" spellcheck="true"># a long time (even seconds) in order to complete the operation.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For the above reasons Redis also offers non blocking deletion primitives</span><span class="token comment" spellcheck="true"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><span class="token comment" spellcheck="true"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span><span class="token comment" spellcheck="true"># are executed in constant time. Another thread will incrementally free the</span><span class="token comment" spellcheck="true"># object in the background as fast as possible.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><span class="token comment" spellcheck="true"># It's up to the design of the application to understand when it is a good</span><span class="token comment" spellcheck="true"># idea to use one or the other. However the Redis server sometimes has to</span><span class="token comment" spellcheck="true"># delete keys or flush the whole database as a side effect of other operations.</span><span class="token comment" spellcheck="true"># Specifically Redis deletes objects independently of a user call in the</span><span class="token comment" spellcheck="true"># following scenarios:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><span class="token comment" spellcheck="true">#    in order to make room for new data, without going over the specified</span><span class="token comment" spellcheck="true">#    memory limit.</span><span class="token comment" spellcheck="true"># 2) Because of expire: when a key with an associated time to live (see the</span><span class="token comment" spellcheck="true">#    EXPIRE command) must be deleted from memory.</span><span class="token comment" spellcheck="true"># 3) Because of a side effect of a command that stores data on a key that may</span><span class="token comment" spellcheck="true">#    already exist. For example the RENAME command may delete the old key</span><span class="token comment" spellcheck="true">#    content when it is replaced with another one. Similarly SUNIONSTORE</span><span class="token comment" spellcheck="true">#    or SORT with STORE option may delete existing keys. The SET command</span><span class="token comment" spellcheck="true">#    itself removes any old content of the specified key in order to replace</span><span class="token comment" spellcheck="true">#    it with the specified string.</span><span class="token comment" spellcheck="true"># 4) During replication, when a replica performs a full resynchronization with</span><span class="token comment" spellcheck="true">#    its master, the content of the whole database is removed in order to</span><span class="token comment" spellcheck="true">#    load the RDB file just transferred.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In all the above cases the default is to delete objects in a blocking way,</span><span class="token comment" spellcheck="true"># like if DEL was called. However you can configure each case specifically</span><span class="token comment" spellcheck="true"># in order to instead release memory in a non-blocking way like if UNLINK</span><span class="token comment" spellcheck="true"># was called, using the following configuration directives.</span>lazyfree-lazy-eviction nolazyfree-lazy-expire nolazyfree-lazy-server-del noreplica-lazy-flush no<span class="token comment" spellcheck="true"># It is also possible, for the case when to replace the user code DEL calls</span><span class="token comment" spellcheck="true"># with UNLINK calls is not easy, to modify the default behavior of the DEL</span><span class="token comment" spellcheck="true"># command to act exactly like UNLINK, using the following configuration</span><span class="token comment" spellcheck="true"># directive:</span>lazyfree-lazy-user-del no<span class="token comment" spellcheck="true">################################ THREADED I/O #################################</span><span class="token comment" spellcheck="true"># Redis is mostly single threaded, however there are certain threaded</span><span class="token comment" spellcheck="true"># operations such as UNLINK, slow I/O accesses and other things that are</span><span class="token comment" spellcheck="true"># performed on side threads.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Now it is also possible to handle Redis clients socket reads and writes</span><span class="token comment" spellcheck="true"># in different I/O threads. Since especially writing is so slow, normally</span><span class="token comment" spellcheck="true"># Redis users use pipelining in order to speed up the Redis performances per</span><span class="token comment" spellcheck="true"># core, and spawn multiple instances in order to scale more. Using I/O</span><span class="token comment" spellcheck="true"># threads it is possible to easily speedup two times Redis without resorting</span><span class="token comment" spellcheck="true"># to pipelining nor sharding of the instance.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default threading is disabled, we suggest enabling it only in machines</span><span class="token comment" spellcheck="true"># that have at least 4 or more cores, leaving at least one spare core.</span><span class="token comment" spellcheck="true"># Using more than 8 threads is unlikely to help much. We also recommend using</span><span class="token comment" spellcheck="true"># threaded I/O only if you actually have performance problems, with Redis</span><span class="token comment" spellcheck="true"># instances being able to use a quite big percentage of CPU time, otherwise</span><span class="token comment" spellcheck="true"># there is no point in using this feature.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># So for instance if you have a four cores boxes, try to use 2 or 3 I/O</span><span class="token comment" spellcheck="true"># threads, if you have a 8 cores, try to use 6 threads. In order to</span><span class="token comment" spellcheck="true"># enable I/O threads use the following configuration directive:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># io-threads 4</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Setting io-threads to 1 will just use the main thread as usual.</span><span class="token comment" spellcheck="true"># When I/O threads are enabled, we only use threads for writes, that is</span><span class="token comment" spellcheck="true"># to thread the write(2) syscall and transfer the client buffers to the</span><span class="token comment" spellcheck="true"># socket. However it is also possible to enable threading of reads and</span><span class="token comment" spellcheck="true"># protocol parsing using the following configuration directive, by setting</span><span class="token comment" spellcheck="true"># it to yes:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># io-threads-do-reads no</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Usually threading reads doesn't help much.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># NOTE 1: This configuration directive cannot be changed at runtime via</span><span class="token comment" spellcheck="true"># CONFIG SET. Aso this feature currently does not work when SSL is</span><span class="token comment" spellcheck="true"># enabled.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># NOTE 2: If you want to test the Redis speedup using redis-benchmark, make</span><span class="token comment" spellcheck="true"># sure you also run the benchmark itself in threaded mode, using the</span><span class="token comment" spellcheck="true"># --threads option to match the number of Redis threads, otherwise you'll not</span><span class="token comment" spellcheck="true"># be able to notice the improvements.</span><span class="token comment" spellcheck="true">############################ KERNEL OOM CONTROL ##############################</span><span class="token comment" spellcheck="true"># On Linux, it is possible to hint the kernel OOM killer on what processes</span><span class="token comment" spellcheck="true"># should be killed first when out of memory.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Enabling this feature makes Redis actively control the oom_score_adj value</span><span class="token comment" spellcheck="true"># for all its processes, depending on their role. The default scores will</span><span class="token comment" spellcheck="true"># attempt to have background child processes killed before all others, and</span><span class="token comment" spellcheck="true"># replicas killed before masters.</span>oom-score-adj no<span class="token comment" spellcheck="true"># When oom-score-adj is used, this directive controls the specific values used</span><span class="token comment" spellcheck="true"># for master, replica and background child processes. Values range -1000 to</span><span class="token comment" spellcheck="true"># 1000 (higher means more likely to be killed).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)</span><span class="token comment" spellcheck="true"># can freely increase their value, but not decrease it below its initial</span><span class="token comment" spellcheck="true"># settings.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Values are used relative to the initial value of oom_score_adj when the server</span><span class="token comment" spellcheck="true"># starts. Because typically the initial value is 0, they will often match the</span><span class="token comment" spellcheck="true"># absolute values.</span>oom-score-adj-values 0 200 800<span class="token comment" spellcheck="true">############################## APPEND ONLY MODE ###############################</span><span class="token comment" spellcheck="true"># By default Redis asynchronously dumps the dataset on disk. This mode is</span><span class="token comment" spellcheck="true"># good enough in many applications, but an issue with the Redis process or</span><span class="token comment" spellcheck="true"># a power outage may result into a few minutes of writes lost (depending on</span><span class="token comment" spellcheck="true"># the configured save points).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The Append Only File is an alternative persistence mode that provides</span><span class="token comment" spellcheck="true"># much better durability. For instance using the default data fsync policy</span><span class="token comment" spellcheck="true"># (see later in the config file) Redis can lose just one second of writes in a</span><span class="token comment" spellcheck="true"># dramatic event like a server power outage, or a single write if something</span><span class="token comment" spellcheck="true"># wrong with the Redis process itself happens, but the operating system is</span><span class="token comment" spellcheck="true"># still running correctly.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># AOF and RDB persistence can be enabled at the same time without problems.</span><span class="token comment" spellcheck="true"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span><span class="token comment" spellcheck="true"># with the better durability guarantees.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Please check http://redis.io/topics/persistence for more information.</span>appendonly <span class="token function">yes</span><span class="token comment" spellcheck="true"># The name of the append only file (default: "appendonly.aof")</span>appendfilename <span class="token string">"appendonly.aof"</span><span class="token comment" spellcheck="true"># The fsync() call tells the Operating System to actually write data on disk</span><span class="token comment" spellcheck="true"># instead of waiting for more data in the output buffer. Some OS will really flush</span><span class="token comment" spellcheck="true"># data on disk, some other OS will just try to do it ASAP.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Redis supports three different modes:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span><span class="token comment" spellcheck="true"># always: fsync after every write to the append only log. Slow, Safest.</span><span class="token comment" spellcheck="true"># everysec: fsync only one time every second. Compromise.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default is "everysec", as that's usually the right compromise between</span><span class="token comment" spellcheck="true"># speed and data safety. It's up to you to understand if you can relax this to</span><span class="token comment" spellcheck="true"># "no" that will let the operating system flush the output buffer when</span><span class="token comment" spellcheck="true"># it wants, for better performances (but if you can live with the idea of</span><span class="token comment" spellcheck="true"># some data loss consider the default persistence mode that's snapshotting),</span><span class="token comment" spellcheck="true"># or on the contrary, use "always" that's very slow but a bit safer than</span><span class="token comment" spellcheck="true"># everysec.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># More details please check the following article:</span><span class="token comment" spellcheck="true"># http://antirez.com/post/redis-persistence-demystified.html</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If unsure, use "everysec".</span><span class="token comment" spellcheck="true"># appendfsync always</span>appendfsync everysec<span class="token comment" spellcheck="true"># appendfsync no</span><span class="token comment" spellcheck="true"># When the AOF fsync policy is set to always or everysec, and a background</span><span class="token comment" spellcheck="true"># saving process (a background save or AOF log background rewriting) is</span><span class="token comment" spellcheck="true"># performing a lot of I/O against the disk, in some Linux configurations</span><span class="token comment" spellcheck="true"># Redis may block too long on the fsync() call. Note that there is no fix for</span><span class="token comment" spellcheck="true"># this currently, as even performing fsync in a different thread will block</span><span class="token comment" spellcheck="true"># our synchronous write(2) call.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In order to mitigate this problem it's possible to use the following option</span><span class="token comment" spellcheck="true"># that will prevent fsync() from being called in the main process while a</span><span class="token comment" spellcheck="true"># BGSAVE or BGREWRITEAOF is in progress.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This means that while another child is saving, the durability of Redis is</span><span class="token comment" spellcheck="true"># the same as "appendfsync none". In practical terms, this means that it is</span><span class="token comment" spellcheck="true"># possible to lose up to 30 seconds of log in the worst scenario (with the</span><span class="token comment" spellcheck="true"># default Linux settings).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you have latency problems turn this to "yes". Otherwise leave it as</span><span class="token comment" spellcheck="true"># "no" that is the safest pick from the point of view of durability.</span>no-appendfsync-on-rewrite no<span class="token comment" spellcheck="true"># Automatic rewrite of the append only file.</span><span class="token comment" spellcheck="true"># Redis is able to automatically rewrite the log file implicitly calling</span><span class="token comment" spellcheck="true"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This is how it works: Redis remembers the size of the AOF file after the</span><span class="token comment" spellcheck="true"># latest rewrite (if no rewrite has happened since the restart, the size of</span><span class="token comment" spellcheck="true"># the AOF at startup is used).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This base size is compared to the current size. If the current size is</span><span class="token comment" spellcheck="true"># bigger than the specified percentage, the rewrite is triggered. Also</span><span class="token comment" spellcheck="true"># you need to specify a minimal size for the AOF file to be rewritten, this</span><span class="token comment" spellcheck="true"># is useful to avoid rewriting the AOF file even if the percentage increase</span><span class="token comment" spellcheck="true"># is reached but it is still pretty small.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Specify a percentage of zero in order to disable the automatic AOF</span><span class="token comment" spellcheck="true"># rewrite feature.</span>auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb<span class="token comment" spellcheck="true"># An AOF file may be found to be truncated at the end during the Redis</span><span class="token comment" spellcheck="true"># startup process, when the AOF data gets loaded back into memory.</span><span class="token comment" spellcheck="true"># This may happen when the system where Redis is running</span><span class="token comment" spellcheck="true"># crashes, especially when an ext4 filesystem is mounted without the</span><span class="token comment" spellcheck="true"># data=ordered option (however this can't happen when Redis itself</span><span class="token comment" spellcheck="true"># crashes or aborts but the operating system still works correctly).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Redis can either exit with an error when this happens, or load as much</span><span class="token comment" spellcheck="true"># data as possible (the default now) and start if the AOF file is found</span><span class="token comment" spellcheck="true"># to be truncated at the end. The following option controls this behavior.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span><span class="token comment" spellcheck="true"># the Redis server starts emitting a log to inform the user of the event.</span><span class="token comment" spellcheck="true"># Otherwise if the option is set to no, the server aborts with an error</span><span class="token comment" spellcheck="true"># and refuses to start. When the option is set to no, the user requires</span><span class="token comment" spellcheck="true"># to fix the AOF file using the "redis-check-aof" utility before to restart</span><span class="token comment" spellcheck="true"># the server.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that if the AOF file will be found to be corrupted in the middle</span><span class="token comment" spellcheck="true"># the server will still exit with an error. This option only applies when</span><span class="token comment" spellcheck="true"># Redis will try to read more data from the AOF file but not enough bytes</span><span class="token comment" spellcheck="true"># will be found.</span>aof-load-truncated <span class="token function">yes</span><span class="token comment" spellcheck="true"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span><span class="token comment" spellcheck="true"># AOF file for faster rewrites and recoveries. When this option is turned</span><span class="token comment" spellcheck="true"># on the rewritten AOF file is composed of two different stanzas:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   [RDB file][AOF tail]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When loading, Redis recognizes that the AOF file starts with the "REDIS"</span><span class="token comment" spellcheck="true"># string and loads the prefixed RDB file, then continues loading the AOF</span><span class="token comment" spellcheck="true"># tail.</span>aof-use-rdb-preamble <span class="token function">yes</span><span class="token comment" spellcheck="true">################################ LUA SCRIPTING  ###############################</span><span class="token comment" spellcheck="true"># Max execution time of a Lua script in milliseconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If the maximum execution time is reached Redis will log that a script is</span><span class="token comment" spellcheck="true"># still in execution after the maximum allowed time and will start to</span><span class="token comment" spellcheck="true"># reply to queries with an error.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When a long running script exceeds the maximum execution time only the</span><span class="token comment" spellcheck="true"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span><span class="token comment" spellcheck="true"># used to stop a script that did not yet call any write commands. The second</span><span class="token comment" spellcheck="true"># is the only way to shut down the server in the case a write command was</span><span class="token comment" spellcheck="true"># already issued by the script but the user doesn't want to wait for the natural</span><span class="token comment" spellcheck="true"># termination of the script.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Set it to 0 or a negative value for unlimited execution without warnings.</span>lua-time-limit 5000<span class="token comment" spellcheck="true">################################ REDIS CLUSTER  ###############################</span><span class="token comment" spellcheck="true"># Normal Redis instances can't be part of a Redis Cluster; only nodes that are</span><span class="token comment" spellcheck="true"># started as cluster nodes can. In order to start a Redis instance as a</span><span class="token comment" spellcheck="true"># cluster node enable the cluster support uncommenting the following:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-enabled yes</span><span class="token comment" spellcheck="true"># Every cluster node has a cluster configuration file. This file is not</span><span class="token comment" spellcheck="true"># intended to be edited by hand. It is created and updated by Redis nodes.</span><span class="token comment" spellcheck="true"># Every Redis Cluster node requires a different cluster configuration file.</span><span class="token comment" spellcheck="true"># Make sure that instances running in the same system do not have</span><span class="token comment" spellcheck="true"># overlapping cluster configuration file names.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-config-file nodes-6379.conf</span><span class="token comment" spellcheck="true"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span><span class="token comment" spellcheck="true"># for it to be considered in failure state.</span><span class="token comment" spellcheck="true"># Most other internal time limits are a multiple of the node timeout.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-node-timeout 15000</span><span class="token comment" spellcheck="true"># A replica of a failing master will avoid to start a failover if its data</span><span class="token comment" spellcheck="true"># looks too old.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># There is no simple way for a replica to actually have an exact measure of</span><span class="token comment" spellcheck="true"># its "data age", so the following two checks are performed:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1) If there are multiple replicas able to failover, they exchange messages</span><span class="token comment" spellcheck="true">#    in order to try to give an advantage to the replica with the best</span><span class="token comment" spellcheck="true">#    replication offset (more data from the master processed).</span><span class="token comment" spellcheck="true">#    Replicas will try to get their rank by offset, and apply to the start</span><span class="token comment" spellcheck="true">#    of the failover a delay proportional to their rank.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 2) Every single replica computes the time of the last interaction with</span><span class="token comment" spellcheck="true">#    its master. This can be the last ping or command received (if the master</span><span class="token comment" spellcheck="true">#    is still in the "connected" state), or the time that elapsed since the</span><span class="token comment" spellcheck="true">#    disconnection with the master (if the replication link is currently down).</span><span class="token comment" spellcheck="true">#    If the last interaction is too old, the replica will not try to failover</span><span class="token comment" spellcheck="true">#    at all.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The point "2" can be tuned by user. Specifically a replica will not perform</span><span class="token comment" spellcheck="true"># the failover if, since the last interaction with the master, the time</span><span class="token comment" spellcheck="true"># elapsed is greater than:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   (node-timeout * cluster-replica-validity-factor) + repl-ping-replica-period</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># So for example if node-timeout is 30 seconds, and the cluster-replica-validity-factor</span><span class="token comment" spellcheck="true"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><span class="token comment" spellcheck="true"># replica will not try to failover if it was not able to talk with the master</span><span class="token comment" spellcheck="true"># for longer than 310 seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A large cluster-replica-validity-factor may allow replicas with too old data to failover</span><span class="token comment" spellcheck="true"># a master, while a too small value may prevent the cluster from being able to</span><span class="token comment" spellcheck="true"># elect a replica at all.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For maximum availability, it is possible to set the cluster-replica-validity-factor</span><span class="token comment" spellcheck="true"># to a value of 0, which means, that replicas will always try to failover the</span><span class="token comment" spellcheck="true"># master regardless of the last time they interacted with the master.</span><span class="token comment" spellcheck="true"># (However they'll always try to apply a delay proportional to their</span><span class="token comment" spellcheck="true"># offset rank).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Zero is the only value able to guarantee that when all the partitions heal</span><span class="token comment" spellcheck="true"># the cluster will always be able to continue.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-replica-validity-factor 10</span><span class="token comment" spellcheck="true"># Cluster replicas are able to migrate to orphaned masters, that are masters</span><span class="token comment" spellcheck="true"># that are left without working replicas. This improves the cluster ability</span><span class="token comment" spellcheck="true"># to resist to failures as otherwise an orphaned master can't be failed over</span><span class="token comment" spellcheck="true"># in case of failure if it has no working replicas.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Replicas migrate to orphaned masters only if there are still at least a</span><span class="token comment" spellcheck="true"># given number of other working replicas for their old master. This number</span><span class="token comment" spellcheck="true"># is the "migration barrier". A migration barrier of 1 means that a replica</span><span class="token comment" spellcheck="true"># will migrate only if there is at least 1 other working replica for its master</span><span class="token comment" spellcheck="true"># and so forth. It usually reflects the number of replicas you want for every</span><span class="token comment" spellcheck="true"># master in your cluster.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Default is 1 (replicas migrate only if their masters remain with at least</span><span class="token comment" spellcheck="true"># one replica). To disable migration just set it to a very large value.</span><span class="token comment" spellcheck="true"># A value of 0 can be set but is useful only for debugging and dangerous</span><span class="token comment" spellcheck="true"># in production.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-migration-barrier 1</span><span class="token comment" spellcheck="true"># By default Redis Cluster nodes stop accepting queries if they detect there</span><span class="token comment" spellcheck="true"># is at least a hash slot uncovered (no available node is serving it).</span><span class="token comment" spellcheck="true"># This way if the cluster is partially down (for example a range of hash slots</span><span class="token comment" spellcheck="true"># are no longer covered) all the cluster becomes, eventually, unavailable.</span><span class="token comment" spellcheck="true"># It automatically returns available as soon as all the slots are covered again.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However sometimes you want the subset of the cluster which is working,</span><span class="token comment" spellcheck="true"># to continue to accept queries for the part of the key space that is still</span><span class="token comment" spellcheck="true"># covered. In order to do so, just set the cluster-require-full-coverage</span><span class="token comment" spellcheck="true"># option to no.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-require-full-coverage yes</span><span class="token comment" spellcheck="true"># This option, when set to yes, prevents replicas from trying to failover its</span><span class="token comment" spellcheck="true"># master during master failures. However the master can still perform a</span><span class="token comment" spellcheck="true"># manual failover, if forced to do so.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This is useful in different scenarios, especially in the case of multiple</span><span class="token comment" spellcheck="true"># data center operations, where we want one side to never be promoted if not</span><span class="token comment" spellcheck="true"># in the case of a total DC failure.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-replica-no-failover no</span><span class="token comment" spellcheck="true"># This option, when set to yes, allows nodes to serve read traffic while the</span><span class="token comment" spellcheck="true"># the cluster is in a down state, as long as it believes it owns the slots. </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This is useful for two cases.  The first case is for when an application </span><span class="token comment" spellcheck="true"># doesn't require consistency of data during node failures or network partitions.</span><span class="token comment" spellcheck="true"># One example of this is a cache, where as long as the node has the data it</span><span class="token comment" spellcheck="true"># should be able to serve it. </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The second use case is for configurations that don't meet the recommended  </span><span class="token comment" spellcheck="true"># three shards but want to enable cluster mode and scale later. A </span><span class="token comment" spellcheck="true"># master outage in a 1 or 2 shard configuration causes a read/write outage to the</span><span class="token comment" spellcheck="true"># entire cluster without this option set, with it set there is only a write outage.</span><span class="token comment" spellcheck="true"># Without a quorum of masters, slot ownership will not change automatically. </span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-allow-reads-when-down no</span><span class="token comment" spellcheck="true"># In order to setup your cluster make sure to read the documentation</span><span class="token comment" spellcheck="true"># available at http://redis.io web site.</span><span class="token comment" spellcheck="true">########################## CLUSTER DOCKER/NAT support  ########################</span><span class="token comment" spellcheck="true"># In certain deployments, Redis Cluster nodes address discovery fails, because</span><span class="token comment" spellcheck="true"># addresses are NAT-ted or because ports are forwarded (the typical case is</span><span class="token comment" spellcheck="true"># Docker and other containers).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In order to make Redis Cluster working in such environments, a static</span><span class="token comment" spellcheck="true"># configuration where each node knows its public address is needed. The</span><span class="token comment" spellcheck="true"># following two options are used for this scope, and are:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># * cluster-announce-ip</span><span class="token comment" spellcheck="true"># * cluster-announce-port</span><span class="token comment" spellcheck="true"># * cluster-announce-bus-port</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Each instructs the node about its address, client port, and cluster message</span><span class="token comment" spellcheck="true"># bus port. The information is then published in the header of the bus packets</span><span class="token comment" spellcheck="true"># so that other nodes will be able to correctly map the address of the node</span><span class="token comment" spellcheck="true"># publishing the information.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If the above options are not used, the normal Redis Cluster auto-detection</span><span class="token comment" spellcheck="true"># will be used instead.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that when remapped, the bus port may not be at the fixed offset of</span><span class="token comment" spellcheck="true"># clients port + 10000, so you can specify any port and bus-port depending</span><span class="token comment" spellcheck="true"># on how they get remapped. If the bus-port is not set, a fixed offset of</span><span class="token comment" spellcheck="true"># 10000 will be used as usual.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Example:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cluster-announce-ip 10.1.1.5</span><span class="token comment" spellcheck="true"># cluster-announce-port 6379</span><span class="token comment" spellcheck="true"># cluster-announce-bus-port 6380</span><span class="token comment" spellcheck="true">################################## SLOW LOG ###################################</span><span class="token comment" spellcheck="true"># The Redis Slow Log is a system to log queries that exceeded a specified</span><span class="token comment" spellcheck="true"># execution time. The execution time does not include the I/O operations</span><span class="token comment" spellcheck="true"># like talking with the client, sending the reply and so forth,</span><span class="token comment" spellcheck="true"># but just the time needed to actually execute the command (this is the only</span><span class="token comment" spellcheck="true"># stage of command execution where the thread is blocked and can not serve</span><span class="token comment" spellcheck="true"># other requests in the meantime).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># You can configure the slow log with two parameters: one tells Redis</span><span class="token comment" spellcheck="true"># what is the execution time, in microseconds, to exceed in order for the</span><span class="token comment" spellcheck="true"># command to get logged, and the other parameter is the length of the</span><span class="token comment" spellcheck="true"># slow log. When a new command is logged the oldest one is removed from the</span><span class="token comment" spellcheck="true"># queue of logged commands.</span><span class="token comment" spellcheck="true"># The following time is expressed in microseconds, so 1000000 is equivalent</span><span class="token comment" spellcheck="true"># to one second. Note that a negative number disables the slow log, while</span><span class="token comment" spellcheck="true"># a value of zero forces the logging of every command.</span>slowlog-log-slower-than 10000<span class="token comment" spellcheck="true"># There is no limit to this length. Just be aware that it will consume memory.</span><span class="token comment" spellcheck="true"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span>slowlog-max-len 128<span class="token comment" spellcheck="true">################################ LATENCY MONITOR ##############################</span><span class="token comment" spellcheck="true"># The Redis latency monitoring subsystem samples different operations</span><span class="token comment" spellcheck="true"># at runtime in order to collect data related to possible sources of</span><span class="token comment" spellcheck="true"># latency of a Redis instance.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Via the LATENCY command this information is available to the user that can</span><span class="token comment" spellcheck="true"># print graphs and obtain reports.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The system only logs operations that were performed in a time equal or</span><span class="token comment" spellcheck="true"># greater than the amount of milliseconds specified via the</span><span class="token comment" spellcheck="true"># latency-monitor-threshold configuration directive. When its value is set</span><span class="token comment" spellcheck="true"># to zero, the latency monitor is turned off.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default latency monitoring is disabled since it is mostly not needed</span><span class="token comment" spellcheck="true"># if you don't have latency issues, and collecting data has a performance</span><span class="token comment" spellcheck="true"># impact, that while very small, can be measured under big load. Latency</span><span class="token comment" spellcheck="true"># monitoring can easily be enabled at runtime using the command</span><span class="token comment" spellcheck="true"># "CONFIG SET latency-monitor-threshold &lt;milliseconds>" if needed.</span>latency-monitor-threshold 0<span class="token comment" spellcheck="true">############################# EVENT NOTIFICATION ##############################</span><span class="token comment" spellcheck="true"># Redis can notify Pub/Sub clients about events happening in the key space.</span><span class="token comment" spellcheck="true"># This feature is documented at http://redis.io/topics/notifications</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For instance if keyspace events notification is enabled, and a client</span><span class="token comment" spellcheck="true"># performs a DEL operation on key "foo" stored in the Database 0, two</span><span class="token comment" spellcheck="true"># messages will be published via Pub/Sub:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># PUBLISH __keyspace@0__:foo del</span><span class="token comment" spellcheck="true"># PUBLISH __keyevent@0__:del foo</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># It is possible to select the events that Redis will notify among a set</span><span class="token comment" spellcheck="true"># of classes. Every class is identified by a single character:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  K     Keyspace events, published with __keyspace@&lt;db>__ prefix.</span><span class="token comment" spellcheck="true">#  E     Keyevent events, published with __keyevent@&lt;db>__ prefix.</span><span class="token comment" spellcheck="true">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><span class="token comment" spellcheck="true">#  $     String commands</span><span class="token comment" spellcheck="true">#  l     List commands</span><span class="token comment" spellcheck="true">#  s     Set commands</span><span class="token comment" spellcheck="true">#  h     Hash commands</span><span class="token comment" spellcheck="true">#  z     Sorted set commands</span><span class="token comment" spellcheck="true">#  x     Expired events (events generated every time a key expires)</span><span class="token comment" spellcheck="true">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><span class="token comment" spellcheck="true">#  t     Stream commands</span><span class="token comment" spellcheck="true">#  m     Key-miss events (Note: It is not included in the 'A' class)</span><span class="token comment" spellcheck="true">#  A     Alias for g$lshzxet, so that the "AKE" string means all the events</span><span class="token comment" spellcheck="true">#        (Except key-miss events which are excluded from 'A' due to their</span><span class="token comment" spellcheck="true">#         unique nature).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  The "notify-keyspace-events" takes as argument a string that is composed</span><span class="token comment" spellcheck="true">#  of zero or multiple characters. The empty string means that notifications</span><span class="token comment" spellcheck="true">#  are disabled.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  Example: to enable list and generic events, from the point of view of the</span><span class="token comment" spellcheck="true">#           event name, use:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  notify-keyspace-events Elg</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  Example 2: to get the stream of the expired keys subscribing to channel</span><span class="token comment" spellcheck="true">#             name __keyevent@0__:expired use:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  notify-keyspace-events Ex</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#  By default all notifications are disabled because most users don't need</span><span class="token comment" spellcheck="true">#  this feature and the feature has some overhead. Note that if you don't</span><span class="token comment" spellcheck="true">#  specify at least one of K or E, no events will be delivered.</span>notify-keyspace-events <span class="token string">""</span><span class="token comment" spellcheck="true">############################### GOPHER SERVER #################################</span><span class="token comment" spellcheck="true"># Redis contains an implementation of the Gopher protocol, as specified in</span><span class="token comment" spellcheck="true"># the RFC 1436 (https://www.ietf.org/rfc/rfc1436.txt).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The Gopher protocol was very popular in the late '90s. It is an alternative</span><span class="token comment" spellcheck="true"># to the web, and the implementation both server and client side is so simple</span><span class="token comment" spellcheck="true"># that the Redis server has just 100 lines of code in order to implement this</span><span class="token comment" spellcheck="true"># support.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># What do you do with Gopher nowadays? Well Gopher never *really* died, and</span><span class="token comment" spellcheck="true"># lately there is a movement in order for the Gopher more hierarchical content</span><span class="token comment" spellcheck="true"># composed of just plain text documents to be resurrected. Some want a simpler</span><span class="token comment" spellcheck="true"># internet, others believe that the mainstream internet became too much</span><span class="token comment" spellcheck="true"># controlled, and it's cool to create an alternative space for people that</span><span class="token comment" spellcheck="true"># want a bit of fresh air.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Anyway for the 10nth birthday of the Redis, we gave it the Gopher protocol</span><span class="token comment" spellcheck="true"># as a gift.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># --- HOW IT WORKS? ---</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The Redis Gopher support uses the inline protocol of Redis, and specifically</span><span class="token comment" spellcheck="true"># two kind of inline requests that were anyway illegal: an empty request</span><span class="token comment" spellcheck="true"># or any request that starts with "/" (there are no Redis commands starting</span><span class="token comment" spellcheck="true"># with such a slash). Normal RESP2/RESP3 requests are completely out of the</span><span class="token comment" spellcheck="true"># path of the Gopher protocol implementation and are served as usual as well.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you open a connection to Redis when Gopher is enabled and send it</span><span class="token comment" spellcheck="true"># a string like "/foo", if there is a key named "/foo" it is served via the</span><span class="token comment" spellcheck="true"># Gopher protocol.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># In order to create a real Gopher "hole" (the name of a Gopher site in Gopher</span><span class="token comment" spellcheck="true"># talking), you likely need a script like the following:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   https://github.com/antirez/gopher2redis</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># --- SECURITY WARNING ---</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you plan to put Redis on the internet in a publicly accessible address</span><span class="token comment" spellcheck="true"># to server Gopher pages MAKE SURE TO SET A PASSWORD to the instance.</span><span class="token comment" spellcheck="true"># Once a password is set:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   1. The Gopher server (when enabled, not by default) will still serve</span><span class="token comment" spellcheck="true">#      content via Gopher.</span><span class="token comment" spellcheck="true">#   2. However other commands cannot be called before the client will</span><span class="token comment" spellcheck="true">#      authenticate.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># So use the 'requirepass' option to protect your instance.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Note that Gopher is not currently supported when 'io-threads-do-reads'</span><span class="token comment" spellcheck="true"># is enabled.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># To enable Gopher support, uncomment the following line and set the option</span><span class="token comment" spellcheck="true"># from no (the default) to yes.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># gopher-enabled no</span><span class="token comment" spellcheck="true">############################### ADVANCED CONFIG ###############################</span><span class="token comment" spellcheck="true"># Hashes are encoded using a memory efficient data structure when they have a</span><span class="token comment" spellcheck="true"># small number of entries, and the biggest entry does not exceed a given</span><span class="token comment" spellcheck="true"># threshold. These thresholds can be configured using the following directives.</span>hash-max-ziplist-entries 512hash-max-ziplist-value 64<span class="token comment" spellcheck="true"># Lists are also encoded in a special way to save a lot of space.</span><span class="token comment" spellcheck="true"># The number of entries allowed per internal list node can be specified</span><span class="token comment" spellcheck="true"># as a fixed maximum size or a maximum number of elements.</span><span class="token comment" spellcheck="true"># For a fixed maximum size, use -5 through -1, meaning:</span><span class="token comment" spellcheck="true"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><span class="token comment" spellcheck="true"># -4: max size: 32 Kb  &lt;-- not recommended</span><span class="token comment" spellcheck="true"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><span class="token comment" spellcheck="true"># -2: max size: 8 Kb   &lt;-- good</span><span class="token comment" spellcheck="true"># -1: max size: 4 Kb   &lt;-- good</span><span class="token comment" spellcheck="true"># Positive numbers mean store up to _exactly_ that number of elements</span><span class="token comment" spellcheck="true"># per list node.</span><span class="token comment" spellcheck="true"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><span class="token comment" spellcheck="true"># but if your use case is unique, adjust the settings as necessary.</span>list-max-ziplist-size -2<span class="token comment" spellcheck="true"># Lists may also be compressed.</span><span class="token comment" spellcheck="true"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span><span class="token comment" spellcheck="true"># the list to *exclude* from compression.  The head and tail of the list</span><span class="token comment" spellcheck="true"># are always uncompressed for fast push/pop operations.  Settings are:</span><span class="token comment" spellcheck="true"># 0: disable all list compression</span><span class="token comment" spellcheck="true"># 1: depth 1 means "don't start compressing until after 1 node into the list,</span><span class="token comment" spellcheck="true">#    going from either the head or tail"</span><span class="token comment" spellcheck="true">#    So: [head]->node->node->...->node->[tail]</span><span class="token comment" spellcheck="true">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><span class="token comment" spellcheck="true"># 2: [head]->[next]->node->node->...->node->[prev]->[tail]</span><span class="token comment" spellcheck="true">#    2 here means: don't compress head or head->next or tail->prev or tail,</span><span class="token comment" spellcheck="true">#    but compress all nodes between them.</span><span class="token comment" spellcheck="true"># 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]</span><span class="token comment" spellcheck="true"># etc.</span>list-compress-depth 0<span class="token comment" spellcheck="true"># Sets have a special encoding in just one case: when a set is composed</span><span class="token comment" spellcheck="true"># of just strings that happen to be integers in radix 10 in the range</span><span class="token comment" spellcheck="true"># of 64 bit signed integers.</span><span class="token comment" spellcheck="true"># The following configuration setting sets the limit in the size of the</span><span class="token comment" spellcheck="true"># set in order to use this special memory saving encoding.</span>set-max-intset-entries 512<span class="token comment" spellcheck="true"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><span class="token comment" spellcheck="true"># order to save a lot of space. This encoding is only used when the length and</span><span class="token comment" spellcheck="true"># elements of a sorted set are below the following limits:</span>zset-max-ziplist-entries 128zset-max-ziplist-value 64<span class="token comment" spellcheck="true"># HyperLogLog sparse representation bytes limit. The limit includes the</span><span class="token comment" spellcheck="true"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span><span class="token comment" spellcheck="true"># this limit, it is converted into the dense representation.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A value greater than 16000 is totally useless, since at that point the</span><span class="token comment" spellcheck="true"># dense representation is more memory efficient.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The suggested value is ~ 3000 in order to have the benefits of</span><span class="token comment" spellcheck="true"># the space efficient encoding without slowing down too much PFADD,</span><span class="token comment" spellcheck="true"># which is O(N) with the sparse encoding. The value can be raised to</span><span class="token comment" spellcheck="true"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span><span class="token comment" spellcheck="true"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span>hll-sparse-max-bytes 3000<span class="token comment" spellcheck="true"># Streams macro node max size / items. The stream data structure is a radix</span><span class="token comment" spellcheck="true"># tree of big nodes that encode multiple items inside. Using this configuration</span><span class="token comment" spellcheck="true"># it is possible to configure how big a single node can be in bytes, and the</span><span class="token comment" spellcheck="true"># maximum number of items it may contain before switching to a new node when</span><span class="token comment" spellcheck="true"># appending new stream entries. If any of the following settings are set to</span><span class="token comment" spellcheck="true"># zero, the limit is ignored, so for instance it is possible to set just a</span><span class="token comment" spellcheck="true"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span><span class="token comment" spellcheck="true"># value.</span>stream-node-max-bytes 4096stream-node-max-entries 100<span class="token comment" spellcheck="true"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><span class="token comment" spellcheck="true"># order to help rehashing the main Redis hash table (the one mapping top-level</span><span class="token comment" spellcheck="true"># keys to values). The hash table implementation Redis uses (see dict.c)</span><span class="token comment" spellcheck="true"># performs a lazy rehashing: the more operation you run into a hash table</span><span class="token comment" spellcheck="true"># that is rehashing, the more rehashing "steps" are performed, so if the</span><span class="token comment" spellcheck="true"># server is idle the rehashing is never complete and some more memory is used</span><span class="token comment" spellcheck="true"># by the hash table.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default is to use this millisecond 10 times every second in order to</span><span class="token comment" spellcheck="true"># actively rehash the main dictionaries, freeing memory when possible.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If unsure:</span><span class="token comment" spellcheck="true"># use "activerehashing no" if you have hard latency requirements and it is</span><span class="token comment" spellcheck="true"># not a good thing in your environment that Redis can reply from time to time</span><span class="token comment" spellcheck="true"># to queries with 2 milliseconds delay.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># use "activerehashing yes" if you don't have such hard requirements but</span><span class="token comment" spellcheck="true"># want to free memory asap when possible.</span>activerehashing <span class="token function">yes</span><span class="token comment" spellcheck="true"># The client output buffer limits can be used to force disconnection of clients</span><span class="token comment" spellcheck="true"># that are not reading data from the server fast enough for some reason (a</span><span class="token comment" spellcheck="true"># common reason is that a Pub/Sub client can't consume messages as fast as the</span><span class="token comment" spellcheck="true"># publisher can produce them).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The limit can be set differently for the three different classes of clients:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># normal -> normal clients including MONITOR clients</span><span class="token comment" spellcheck="true"># replica  -> replica clients</span><span class="token comment" spellcheck="true"># pubsub -> clients subscribed to at least one pubsub channel or pattern</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The syntax of every client-output-buffer-limit directive is the following:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># client-output-buffer-limit &lt;class> &lt;hard limit> &lt;soft limit> &lt;soft seconds></span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># A client is immediately disconnected once the hard limit is reached, or if</span><span class="token comment" spellcheck="true"># the soft limit is reached and remains reached for the specified number of</span><span class="token comment" spellcheck="true"># seconds (continuously).</span><span class="token comment" spellcheck="true"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><span class="token comment" spellcheck="true"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><span class="token comment" spellcheck="true"># if the size of the output buffers reach 32 megabytes, but will also get</span><span class="token comment" spellcheck="true"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><span class="token comment" spellcheck="true"># the limit for 10 seconds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default normal clients are not limited because they don't receive data</span><span class="token comment" spellcheck="true"># without asking (in a push way), but just after a request, so only</span><span class="token comment" spellcheck="true"># asynchronous clients may create a scenario where data is requested faster</span><span class="token comment" spellcheck="true"># than it can read.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Instead there is a default limit for pubsub and replica clients, since</span><span class="token comment" spellcheck="true"># subscribers and replicas receive data in a push fashion.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Both the hard or the soft limit can be disabled by setting them to zero.</span>client-output-buffer-limit normal 0 0 0client-output-buffer-limit replica 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60<span class="token comment" spellcheck="true"># Client query buffers accumulate new commands. They are limited to a fixed</span><span class="token comment" spellcheck="true"># amount by default in order to avoid that a protocol desynchronization (for</span><span class="token comment" spellcheck="true"># instance due to a bug in the client) will lead to unbound memory usage in</span><span class="token comment" spellcheck="true"># the query buffer. However you can configure it here if you have very special</span><span class="token comment" spellcheck="true"># needs, such us huge multi/exec requests or alike.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># client-query-buffer-limit 1gb</span><span class="token comment" spellcheck="true"># In the Redis protocol, bulk requests, that are, elements representing single</span><span class="token comment" spellcheck="true"># strings, are normally limited to 512 mb. However you can change this limit</span><span class="token comment" spellcheck="true"># here, but must be 1mb or greater</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># proto-max-bulk-len 512mb</span><span class="token comment" spellcheck="true"># Redis calls an internal function to perform many background tasks, like</span><span class="token comment" spellcheck="true"># closing connections of clients in timeout, purging expired keys that are</span><span class="token comment" spellcheck="true"># never requested, and so forth.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Not all tasks are performed with the same frequency, but Redis checks for</span><span class="token comment" spellcheck="true"># tasks to perform according to the specified "hz" value.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># By default "hz" is set to 10. Raising the value will use more CPU when</span><span class="token comment" spellcheck="true"># Redis is idle, but at the same time will make Redis more responsive when</span><span class="token comment" spellcheck="true"># there are many keys expiring at the same time, and timeouts may be</span><span class="token comment" spellcheck="true"># handled with more precision.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The range is between 1 and 500, however a value over 100 is usually not</span><span class="token comment" spellcheck="true"># a good idea. Most users should use the default of 10 and raise this up to</span><span class="token comment" spellcheck="true"># 100 only in environments where very low latency is required.</span>hz 10<span class="token comment" spellcheck="true"># Normally it is useful to have an HZ value which is proportional to the</span><span class="token comment" spellcheck="true"># number of clients connected. This is useful in order, for instance, to</span><span class="token comment" spellcheck="true"># avoid too many clients are processed for each background task invocation</span><span class="token comment" spellcheck="true"># in order to avoid latency spikes.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Since the default HZ value by default is conservatively set to 10, Redis</span><span class="token comment" spellcheck="true"># offers, and enables by default, the ability to use an adaptive HZ value</span><span class="token comment" spellcheck="true"># which will temporarily raise when there are many connected clients.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># When dynamic HZ is enabled, the actual configured HZ will be used</span><span class="token comment" spellcheck="true"># as a baseline, but multiples of the configured HZ value will be actually</span><span class="token comment" spellcheck="true"># used as needed once more clients are connected. In this way an idle</span><span class="token comment" spellcheck="true"># instance will use very little CPU time while a busy instance will be</span><span class="token comment" spellcheck="true"># more responsive.</span>dynamic-hz <span class="token function">yes</span><span class="token comment" spellcheck="true"># When a child rewrites the AOF file, if the following option is enabled</span><span class="token comment" spellcheck="true"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><span class="token comment" spellcheck="true"># in order to commit the file to the disk more incrementally and avoid</span><span class="token comment" spellcheck="true"># big latency spikes.</span>aof-rewrite-incremental-fsync <span class="token function">yes</span><span class="token comment" spellcheck="true"># When redis saves RDB file, if the following option is enabled</span><span class="token comment" spellcheck="true"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><span class="token comment" spellcheck="true"># in order to commit the file to the disk more incrementally and avoid</span><span class="token comment" spellcheck="true"># big latency spikes.</span>rdb-save-incremental-fsync <span class="token function">yes</span><span class="token comment" spellcheck="true"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><span class="token comment" spellcheck="true"># idea to start with the default settings and only change them after investigating</span><span class="token comment" spellcheck="true"># how to improve the performances and how the keys LFU change over time, which</span><span class="token comment" spellcheck="true"># is possible to inspect via the OBJECT FREQ command.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># There are two tunable parameters in the Redis LFU implementation: the</span><span class="token comment" spellcheck="true"># counter logarithm factor and the counter decay time. It is important to</span><span class="token comment" spellcheck="true"># understand what the two parameters mean before changing them.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis</span><span class="token comment" spellcheck="true"># uses a probabilistic increment with logarithmic behavior. Given the value</span><span class="token comment" spellcheck="true"># of the old counter, when a key is accessed, the counter is incremented in</span><span class="token comment" spellcheck="true"># this way:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1. A random number R between 0 and 1 is extracted.</span><span class="token comment" spellcheck="true"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><span class="token comment" spellcheck="true"># 3. The counter is incremented only if R &lt; P.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default lfu-log-factor is 10. This is a table of how the frequency</span><span class="token comment" spellcheck="true"># counter changes with a different number of accesses with different</span><span class="token comment" spellcheck="true"># logarithmic factors:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment" spellcheck="true"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><span class="token comment" spellcheck="true"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment" spellcheck="true"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><span class="token comment" spellcheck="true"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment" spellcheck="true"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><span class="token comment" spellcheck="true"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment" spellcheck="true"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><span class="token comment" spellcheck="true"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment" spellcheck="true"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><span class="token comment" spellcheck="true"># +--------+------------+------------+------------+------------+------------+</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># NOTE: The above table was obtained by running the following commands:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#   redis-benchmark -n 1000000 incr foo</span><span class="token comment" spellcheck="true">#   redis-cli object freq foo</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><span class="token comment" spellcheck="true"># to accumulate hits.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The counter decay time is the time, in minutes, that must elapse in order</span><span class="token comment" spellcheck="true"># for the key counter to be divided by two (or decremented if it has a value</span><span class="token comment" spellcheck="true"># less &lt;= 10).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The default value for the lfu-decay-time is 1. A special value of 0 means to</span><span class="token comment" spellcheck="true"># decay the counter every time it happens to be scanned.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># lfu-log-factor 10</span><span class="token comment" spellcheck="true"># lfu-decay-time 1</span><span class="token comment" spellcheck="true">########################### ACTIVE DEFRAGMENTATION #######################</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># What is active defragmentation?</span><span class="token comment" spellcheck="true"># -------------------------------</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Active (online) defragmentation allows a Redis server to compact the</span><span class="token comment" spellcheck="true"># spaces left between small allocations and deallocations of data in memory,</span><span class="token comment" spellcheck="true"># thus allowing to reclaim back memory.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Fragmentation is a natural process that happens with every allocator (but</span><span class="token comment" spellcheck="true"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><span class="token comment" spellcheck="true"># restart is needed in order to lower the fragmentation, or at least to flush</span><span class="token comment" spellcheck="true"># away all the data and create it again. However thanks to this feature</span><span class="token comment" spellcheck="true"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span><span class="token comment" spellcheck="true"># in a "hot" way, while the server is running.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Basically when the fragmentation is over a certain level (see the</span><span class="token comment" spellcheck="true"># configuration options below) Redis will start to create new copies of the</span><span class="token comment" spellcheck="true"># values in contiguous memory regions by exploiting certain specific Jemalloc</span><span class="token comment" spellcheck="true"># features (in order to understand if an allocation is causing fragmentation</span><span class="token comment" spellcheck="true"># and to allocate it in a better place), and at the same time, will release the</span><span class="token comment" spellcheck="true"># old copies of the data. This process, repeated incrementally for all the keys</span><span class="token comment" spellcheck="true"># will cause the fragmentation to drop back to normal values.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Important things to understand:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 1. This feature is disabled by default, and only works if you compiled Redis</span><span class="token comment" spellcheck="true">#    to use the copy of Jemalloc we ship with the source code of Redis.</span><span class="token comment" spellcheck="true">#    This is the default with Linux builds.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 2. You never need to enable this feature if you don't have fragmentation</span><span class="token comment" spellcheck="true">#    issues.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 3. Once you experience fragmentation, you can enable this feature when</span><span class="token comment" spellcheck="true">#    needed with the command "CONFIG SET activedefrag yes".</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The configuration parameters are able to fine tune the behavior of the</span><span class="token comment" spellcheck="true"># defragmentation process. If you are not sure about what they mean it is</span><span class="token comment" spellcheck="true"># a good idea to leave the defaults untouched.</span><span class="token comment" spellcheck="true"># Enabled active defragmentation</span><span class="token comment" spellcheck="true"># activedefrag no</span><span class="token comment" spellcheck="true"># Minimum amount of fragmentation waste to start active defrag</span><span class="token comment" spellcheck="true"># active-defrag-ignore-bytes 100mb</span><span class="token comment" spellcheck="true"># Minimum percentage of fragmentation to start active defrag</span><span class="token comment" spellcheck="true"># active-defrag-threshold-lower 10</span><span class="token comment" spellcheck="true"># Maximum percentage of fragmentation at which we use maximum effort</span><span class="token comment" spellcheck="true"># active-defrag-threshold-upper 100</span><span class="token comment" spellcheck="true"># Minimal effort for defrag in CPU percentage, to be used when the lower</span><span class="token comment" spellcheck="true"># threshold is reached</span><span class="token comment" spellcheck="true"># active-defrag-cycle-min 1</span><span class="token comment" spellcheck="true"># Maximal effort for defrag in CPU percentage, to be used when the upper</span><span class="token comment" spellcheck="true"># threshold is reached</span><span class="token comment" spellcheck="true"># active-defrag-cycle-max 25</span><span class="token comment" spellcheck="true"># Maximum number of set/hash/zset/list fields that will be processed from</span><span class="token comment" spellcheck="true"># the main dictionary scan</span><span class="token comment" spellcheck="true"># active-defrag-max-scan-fields 1000</span><span class="token comment" spellcheck="true"># Jemalloc background thread for purging will be enabled by default</span>jemalloc-bg-thread <span class="token function">yes</span><span class="token comment" spellcheck="true"># It is possible to pin different threads and processes of Redis to specific</span><span class="token comment" spellcheck="true"># CPUs in your system, in order to maximize the performances of the server.</span><span class="token comment" spellcheck="true"># This is useful both in order to pin different Redis threads in different</span><span class="token comment" spellcheck="true"># CPUs, but also in order to make sure that multiple Redis instances running</span><span class="token comment" spellcheck="true"># in the same host will be pinned to different CPUs.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Normally you can do this using the "taskset" command, however it is also</span><span class="token comment" spellcheck="true"># possible to this via Redis configuration directly, both in Linux and FreeBSD.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># You can pin the server/IO threads, bio threads, aof rewrite child process, and</span><span class="token comment" spellcheck="true"># the bgsave child process. The syntax to specify the cpu list is the same as</span><span class="token comment" spellcheck="true"># the taskset command:</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Set redis server/io threads to cpu affinity 0,2,4,6:</span><span class="token comment" spellcheck="true"># server_cpulist 0-7:2</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Set bio threads to cpu affinity 1,3:</span><span class="token comment" spellcheck="true"># bio_cpulist 1,3</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Set aof rewrite child process to cpu affinity 8,9,10,11:</span><span class="token comment" spellcheck="true"># aof_rewrite_cpulist 8-11</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Set bgsave child process to cpu affinity 1,10,11</span><span class="token comment" spellcheck="true"># bgsave_cpulist 1,10-11</span></code></pre><h3 id="1-3-启动redis-脚本"><a href="#1-3-启动redis-脚本" class="headerlink" title="1.3 启动redis 脚本"></a>1.3 启动redis 脚本</h3><p>redis-server是按配置打开 </p><pre class=" language-bash"><code class="language-bash"> docker run -p 6379:6379 --net mynet --name redis -v /root/redis/master/conf/redis.conf:/etc/redis/redis.conf -v /root/redis/           master/data:/etc/data -it redis redis-server /etc/redis/redis.conf docker run -p 6380:6379 --net mynet --name redis2 -v /root/redis/slave1/conf/redis.conf:/etc/redis/redis.conf -v /root/redis/           slave1/data:/etc/data -it redis redis-server /etc/redis/redis.conf</code></pre><h2 id="2-设置主从配置"><a href="#2-设置主从配置" class="headerlink" title="2. 设置主从配置"></a>2. 设置主从配置</h2><p>主机设置: 需要设置密码</p><pre class=" language-bash"><code class="language-bash">masterauth 123456 <span class="token punctuation">(</span>主从配置密码<span class="token punctuation">)</span>requirepass 123456 <span class="token punctuation">(</span>连接密码<span class="token punctuation">)</span></code></pre><p>从机设置: 设置密码,设置连接主机密码(masterauth 123456) ,设置连接到哪个主机 (slaveof 192.168.0.1 6379)</p><pre class=" language-bash"><code class="language-bash">slaveof 123.56.145.243 6379    <span class="token punctuation">(</span>在从机里面配置主机的地址<span class="token punctuation">)</span></code></pre><h2 id="3-设置哨兵"><a href="#3-设置哨兵" class="headerlink" title="3. 设置哨兵"></a>3. 设置哨兵</h2><pre class=" language-bash"><code class="language-bash">新建  sentinel.conf sentinel monitor myredis 123.56.145.243 6379 1sentinel auth-pass myredis 123456 然后运行redis-sentinel sentinel.conf <span class="token punctuation">(</span>开启哨兵模式<span class="token punctuation">)</span></code></pre><p>ps:   myredis 可以任取,,但之后java环境中,需要这个名字  ,, 后面的1  表示，有多少个哨兵认为一个master失效后，master才算真正失效</p><p>ps: sentinel auth-pass myredis  123456  ，这是设置访问主从配置密码</p><h2 id="4-Java配置"><a href="#4-Java配置" class="headerlink" title="4. Java配置"></a>4. Java配置</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 123.56.145.243  <span class="token comment" spellcheck="true"># 单节点的时候</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">50</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">1000</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">500</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">500</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> myredis      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 123.56.145.243<span class="token punctuation">:</span><span class="token number">26379   </span><span class="token comment" spellcheck="true"># 哨兵,有多个的话,用逗号隔开,是一个Set&lt;String>类型的</span></code></pre><p>使用redis池的话</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author anlen123 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisPoolFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.host}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.timeout}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.database}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> dataBase<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.jedis.pool.min-idle}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.jedis.pool.max-idle}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.jedis.pool.max-active}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxActive<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.jedis.pool.max-wait}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxWait<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.sentinel.master}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String masterName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis.sentinel.nodes}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> nodes<span class="token punctuation">;</span>    <span class="token keyword">private</span> JedisPoolConfig <span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JedisPoolConfig poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span>minIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> poolConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JedisPool <span class="token function">jedisPoolFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span><span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> timeout <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> dataBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JedisSentinelPool <span class="token function">jedisSentinelPoolFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span>masterName<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> <span class="token function">jedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timeout <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> dataBase<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>注入<span class="token operator">:</span> <span class="token annotation punctuation">@Autowired</span>JedisSentinelPool jedisPool<span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对一次redis搭建集群的记录&quot;&gt;&lt;a href=&quot;#对一次redis搭建集群的记录&quot; class=&quot;headerlink&quot; title=&quot;对一次redis搭建集群的记录&quot;&gt;&lt;/a&gt;对一次redis搭建集群的记录&lt;/h1&gt;&lt;h2 id=&quot;1-使用docker-搭建
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
      <category term="redis" scheme="https://liuhuaqiang.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>fastJSON简单使用</title>
    <link href="https://liuhuaqiang.top/2021/01/21/fastjson-jian-dan-shi-yong/"/>
    <id>https://liuhuaqiang.top/2021/01/21/fastjson-jian-dan-shi-yong/</id>
    <published>2021-01-21T00:44:43.000Z</published>
    <updated>2021-02-07T08:01:21.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastJSON简单使用"><a href="#fastJSON简单使用" class="headerlink" title="fastJSON简单使用"></a>fastJSON简单使用</h1><h1 id="1-1-首先创建一个类"><a href="#1-1-首先创建一个类" class="headerlink" title="1.1 首先创建一个类"></a>1.1 首先创建一个类</h1><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-将Java对象转Json"><a href="#1-2-将Java对象转Json" class="headerlink" title="1.2 将Java对象转Json"></a>1.2 将Java对象转Json</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"刘华强"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*{"age":22,"name":"刘华强"}*/</span></code></pre><h3 id="1-2-1-实体类加注解-自定义key"><a href="#1-2-1-实体类加注解-自定义key" class="headerlink" title="1.2.1 实体类加注解,自定义key"></a>1.2.1 实体类加注解,自定义key</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"NAME"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"AGE"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*{"AGE":22,"NAME":"刘华强"}*/</span></code></pre><h3 id="1-2-2-列表转Json"><a href="#1-2-2-列表转Json" class="headerlink" title="1.2.2 列表转Json"></a>1.2.2 列表转Json</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*[    {"AGE":1,"NAME":"AAA"},    {"AGE":2,"NAME":"BBB"}]*/</span></code></pre><h3 id="1-2-3-更多注解"><a href="#1-2-3-更多注解" class="headerlink" title="1.2.3 更多注解"></a>1.2.3 更多注解</h3><p>我们还可以自定义输出，并控制字段的排序，日期显示格式，序列化标记等。</p><ol><li>serialize 指定序列化</li><li>ordinal  显示顺序</li><li>format  时间格式化</li></ol><p>让我们更新实体类的属性</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"NAME"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"AGE"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"生日"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> format <span class="token operator">=</span> <span class="token string">"dd/MM/yyyy"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"成绩"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer score<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*{"生日":"20/01/2021","NAME":"AA","AGE":22}*/</span></code></pre><p><strong>注意：</strong>FastJson 在进行操作时，是根据 getter 和 setter 的方法进行的，并不是依据 Field 进行。</p><p><strong>注意：</strong>若属性是私有的，必须有 set 方法。否则无法反序列化。</p><p>@JSONField注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">JSONField</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置序列化和反序列化的顺序，1.1.42版本之后才支持</span>    <span class="token keyword">int</span> <span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 指定字段的名称</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指定字段的格式，对日期格式有用</span>    String <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否序列化</span>    <span class="token keyword">boolean</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否反序列化</span>    <span class="token keyword">boolean</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> SerializerFeature<span class="token punctuation">.</span>BeanToArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//反序列化</span><span class="token comment" spellcheck="true">/*["20/01/2021","AA",22]*/</span></code></pre><h2 id="1-3-String转Java对象"><a href="#1-3-String转Java对象" class="headerlink" title="1.3 String转Java对象"></a>1.3 String转Java对象</h2><h3 id="1-3-1-parseObject-String类型的字符串-转换类的class对象"><a href="#1-3-1-parseObject-String类型的字符串-转换类的class对象" class="headerlink" title="1.3.1 parseObject(String类型的字符串   ,   转换类的class对象  )"></a>1.3.1 parseObject(String类型的字符串   ,   转换类的class对象  )</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>userStr<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*User(name=AA, age=22, birthday=Wed Jan 20 00:00:00 CST 2021, score=null)*/</span></code></pre><p><strong>@JSONField deserialize</strong> 可选项可以指定字段不反序列化。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"AGE"</span><span class="token punctuation">,</span> ordinal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>deserialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token function">User</span><span class="token punctuation">(</span>name<span class="token operator">=</span>AA<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> birthday<span class="token operator">=</span>Wed Jan <span class="token number">20</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span> CST <span class="token number">2021</span><span class="token punctuation">,</span> score<span class="token operator">=</span>null<span class="token punctuation">)</span></code></pre><h3 id="1-3-2-JSON对象转Object"><a href="#1-3-2-JSON对象转Object" class="headerlink" title="1.3.2 JSON对象转Object"></a>1.3.2 JSON对象转Object</h3><p>JSON类似于Map,拥有key 和value    -&gt; （JSONObject）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JSONObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AGE"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"生日"</span><span class="token punctuation">,</span><span class="token string">"2016/12/12 12:12:12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"成绩"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*User(name=AA, age=0, birthday=Wed Jun 08 00:00:00 CST 18, score=100)*/</span></code></pre><p>列表的JSON对象    (JSONArray)  -&gt; JSON.parseArray</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JSONArray json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AGE"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"NAME"</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"生日"</span><span class="token punctuation">,</span><span class="token string">"2016/12/12 12:12:12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"成绩"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        json<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*[{"成绩":100,"生日":"2016/12/12 12:12:12","AGE":22,"NAME":"AA"}][User(name=AA, age=0, birthday=Wed Jun 08 00:00:00 CST 18, score=100)]*/</span></code></pre><p>够用就行!!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fastJSON简单使用&quot;&gt;&lt;a href=&quot;#fastJSON简单使用&quot; class=&quot;headerlink&quot; title=&quot;fastJSON简单使用&quot;&gt;&lt;/a&gt;fastJSON简单使用&lt;/h1&gt;&lt;h1 id=&quot;1-1-首先创建一个类&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
    
      <category term="面试题" scheme="https://liuhuaqiang.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://liuhuaqiang.top/2021/01/14/ajax/"/>
    <id>https://liuhuaqiang.top/2021/01/14/ajax/</id>
    <published>2021-01-14T03:48:28.000Z</published>
    <updated>2021-02-07T08:01:21.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>导入jquery <a href="https://www.jq22.com/jquery-info122" target="_blank" rel="noopener">下载连接</a></p><p><a href="https://mp.weixin.qq.com/s/tB4YX4H59wYS6rxaO3K2_g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/tB4YX4H59wYS6rxaO3K2_g</a></p><ul><li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><blockquote><p>伪造Ajax</p></blockquote><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">   window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentTime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> myDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> targetUrl <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframePosition"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>请输入要加载的地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>currentTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LoadPage()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>加载页面位置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframePosition<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>3、使用IDEA开浏览器测试一下！</p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><blockquote><p>jQuery.ajax</p></blockquote><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><pre class=" language-html"><code class="language-html">jQuery.ajax(...)      部分参数：            url：请求地址            type：请求方式，GET、POST（1.9.0之后用method）        headers：请求头            data：要发送的数据    contentType：即将发送信息至服务器的内容编码类型(默认: "application/x-www-form-urlencoded; charset=UTF-8")          async：是否异步        timeout：设置请求超时时间（毫秒）      beforeSend：发送请求前执行的函数(全局)        complete：完成之后执行的回调函数(全局)        success：成功之后执行的回调函数(全局)          error：失败之后执行的回调函数(全局)        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型        dataType：将服务器端返回的数据转换成指定类型          "xml": 将服务器端返回的内容转换成xml格式          "text": 将服务器端返回的内容转换成普通文本格式          "html": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。        "script": 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式          "json": 将服务器端返回的内容转换成相应的JavaScript对象        "jsonp": JSONP 格式使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</code></pre><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 视图解析器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 前缀 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 后缀 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>2、编写一个AjaxController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxController</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a1"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ajax1</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>4、编写index.jsp测试</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  &lt;%--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>--%>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a1"</span><span class="token punctuation">,</span>               data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txtName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">alert</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%--onblur：失去焦点触发事件--%</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txtName<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><strong>Springmvc实现</strong></p><p>实体类user</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们来获取一个集合对象，展示到前端页面</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"秦疆1号"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"秦疆2号"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"秦疆3号"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由于@RestController注解，将list转成json格式返回</span><span class="token punctuation">}</span></code></pre><p>前端页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>获取数据<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"${pageContext.request.contextPath}/a2"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>               <span class="token keyword">var</span> html<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   html<span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"&lt;tr>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;/tr>"</span>              <span class="token punctuation">}</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><blockquote><p>注册提示效果</p></blockquote><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/a3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ajax3</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String pwd<span class="token punctuation">)</span><span class="token punctuation">{</span>   String msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//模拟数据库中存在数据</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"用户名输入错误"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           msg <span class="token operator">=</span> <span class="token string">"密码输入有误"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> msg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由于@RestController注解，将msg转成json格式返回</span><span class="token punctuation">}</span></code></pre><p>前端页面 login.jsp</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ajax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a3"</span><span class="token punctuation">,</span>               data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">function</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span>               url<span class="token punctuation">:</span><span class="token string">"${pageContext.request.contextPath}/a3"</span><span class="token punctuation">,</span>               data<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'pwd'</span><span class="token punctuation">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>               success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2()<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwdInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="/2021/01/14/ajax/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><blockquote><p>获取baidu接口Demo</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSONP百度搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">       <span class="token selector"><span class="token id">#q</span></span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>           <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>           <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token selector"><span class="token id">#ul</span></span><span class="token punctuation">{</span>           <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">520</span>px<span class="token punctuation">;</span>           <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>           <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token selector"><span class="token id">#ul</span> li</span><span class="token punctuation">{</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">10</span>px<span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token selector"><span class="token id">#ul</span> li<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>           <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#f60</span><span class="token punctuation">;</span>           <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">       <span class="token comment" spellcheck="true">// 2.步骤二</span>       <span class="token comment" spellcheck="true">// 定义demo函数 (分析接口、数据)</span>       <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 如果搜索数据存在 把内容添加进去</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 隐藏掉的ul显示出来</span>               Ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 搜索到的数据循环追加到li里</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   html <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>'</span><span class="token operator">+</span>data<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 循环的li写入ul</span>               Ul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 1.步骤一</span>       window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 获取输入框和ul</span>           <span class="token keyword">var</span> Q <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 事件鼠标抬起时候</span>           Q<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 如果输入框不等于空</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span>                   <span class="token comment" spellcheck="true">// 创建标签</span>                   <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//给定要跨域的地址 赋值给src</span>                   <span class="token comment" spellcheck="true">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span>                   script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">'&amp;cb=demo'</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 将组合好的带src的script标签追加到body里</span>                   document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;p&gt;导入jquery &lt;a href=&quot;https://www.jq22.com/jquery-info122&quot; target=
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>注解和反射</title>
    <link href="https://liuhuaqiang.top/2021/01/12/zhu-jie-he-fan-she/"/>
    <id>https://liuhuaqiang.top/2021/01/12/zhu-jie-he-fan-she/</id>
    <published>2021-01-12T11:07:45.000Z</published>
    <updated>2021-02-22T06:06:39.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        1.获得Person的反射类</span>        Class<span class="token operator">&lt;</span>Person<span class="token operator">></span> personClass <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      2.获取构造器</span>        Constructor<span class="token operator">&lt;</span>Person<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//运行修改   private需要声明</span>        Person person <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"lhq"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        Person{name='lhq', age=22, sex=true}         */</span><span class="token comment" spellcheck="true">//      3.获取属性,直接赋值</span>        Field name <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">"华强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        Person{name='lhq', age=22, sex=true}        Person{name='华强', age=22, sex=true}         */</span><span class="token comment" spellcheck="true">//      4.获取方法</span>        Method show <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        show<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        show<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        Person{name='lhq', age=22, sex=true}        Person{name='华强', age=22, sex=true}        你好         */</span><span class="token comment" spellcheck="true">//        4-2  再取列一个 有参数的方法</span>        Method setAge <span class="token operator">=</span> personClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setAge<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setAge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Person{name='华强', age=21, sex=true}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> sex<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", sex="</span> <span class="token operator">+</span> sex <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> sex <span class="token operator">==</span> person<span class="token punctuation">.</span>sex <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token comment" spellcheck="true">/*允许放在方法上面*/</span><span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token comment" spellcheck="true">/*允许放在类上面*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/*你的注解作用范围定义*/</span><span class="token comment" spellcheck="true">//runtime> class > source</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME <span class="token comment" spellcheck="true">/*代码在运行时有效*/</span>     <span class="token comment" spellcheck="true">/*,class: 编译有效 , source: 源码有效)*/</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//表示是否生成在javaDoc</span><span class="token annotation punctuation">@Documented</span><span class="token comment" spellcheck="true">//表示子类可以继承父类的注解</span><span class="token annotation punctuation">@Inherited</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="自定义注解-interface"><a href="#自定义注解-interface" class="headerlink" title="自定义注解 @interface"></a>自定义注解 @interface</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME <span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注解的参数:  参数类型+参数名字+();</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> lhq<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 刘华强 * @Classname lhq.Main * @Description TODO * @Date 2021/1/12 16:04 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"lhq.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>User<span class="token operator">></span> c2 <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token operator">></span> c3 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 460141958         * 460141958         * 460141958         */</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class <span class="token class-name">c1</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类</span>        Class <span class="token class-name">c2</span> <span class="token operator">=</span> Comparable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//接口</span>        Class <span class="token class-name">c3</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-维数组</span>        Class <span class="token class-name">c4</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//二维数组</span>        Class <span class="token class-name">c5</span> <span class="token operator">=</span> Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注解</span>        Class <span class="token class-name">c6</span> <span class="token operator">=</span> ElementType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//枚举</span>        Class <span class="token class-name">c7</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//基本数据类型</span>        Class <span class="token class-name">c8</span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//void</span>        Class <span class="token class-name">c9</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Class</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c7<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c9<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        class java.lang.Object        interface java.lang.Comparable        class [Ljava.lang.String;        class [[I        interface java.lang.Override        class java.lang.annotation.ElementType        class java.lang.Integer        void        class java.lang.Class        Process finished with exit code 0         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/01/12/zhu-jie-he-fan-she/image-20210112162024854.png" alt="image-20210112162024854"></p><pre class=" language-shell"><code class="language-shell">class A{    static {        System.out.println("静态代码块加载");        m = 200;    }    public static int m = 100;    public A() {        System.out.println("构造函数加载");    }}/*静态代码块加载构造函数加载100*/class A{    public static int m = 100;    static {        System.out.println("静态代码块加载");        m = 200;    }    public A() {        System.out.println("构造函数加载");    }}/*静态代码块加载构造函数加载200*/    </code></pre><p><img src="/2021/01/12/zhu-jie-he-fan-she/image-20210112165545865.png" alt="image-20210112165545865"></p><p><img src="/2021/01/12/zhu-jie-he-fan-she/image-20210112170000445.png" alt="image-20210112170000445"></p><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 刘华强 * @Classname ReflectTest * @Description TODO * @Date 2021/1/12 17:17 */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lhq.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得包名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获得类名</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        System.out.println(c1.getField("name"));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method declaredMethod <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getAge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> declaredConstructor <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 刘华强 * @Classname ReflectTest * @Description TODO * @Date 2021/1/12 17:17 */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        Class <span class="token class-name">c1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lhq.pojo.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor constructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"lhq"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射调用方法</span>        User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method setNameMothod <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setNameMothod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user2<span class="token punctuation">,</span><span class="token string">"刘华强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*关闭程序的安全检测*/</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user3<span class="token punctuation">,</span> <span class="token string">"华强牛逼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="反射获得泛型"><a href="#反射获得泛型" class="headerlink" title="反射获得泛型"></a>反射获得泛型</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 刘华强 * @Classname ReflectTest * @Description TODO * @Date 2021/1/12 17:17 */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> map<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>ReflectTest3<span class="token operator">></span> c1 <span class="token operator">=</span> ReflectTest3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Method method1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Type genericParameterType <span class="token operator">:</span> method1<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericParameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>genericParameterType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> genericParameterType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Type type <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Method method <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type type <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Type<span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Type type1 <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reflect2Annotation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>Student<span class="token operator">></span> c1 <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Annotation declaredAnnotation <span class="token operator">:</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取注解的值</span>        Tableliu tableliu <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span>Tableliu<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String value <span class="token operator">=</span> tableliu<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得指定注解的值</span>        Field declaredField <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Fieldliu annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Fieldliu<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Tableliu</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"lhq"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Fieldliu</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"lhq_id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Fieldliu</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"lhq_name"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Fieldliu</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"lhq_age"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Tableliu</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">Fieldliu</span> <span class="token punctuation">{</span>    String <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="实战1-标识有注解的就运行"><a href="#实战1-标识有注解的就运行" class="headerlink" title="实战1     (标识有注解的就运行)"></a>实战1     (标识有注解的就运行)</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>value <span class="token operator">=</span> RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Testinit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoInit</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Testinit</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Testinit</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"233"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.lhq.Main.DemoInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> annotationPresent <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Testinit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>annotationPresent<span class="token punctuation">)</span><span class="token punctuation">{</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注解和反射&quot;&gt;&lt;a href=&quot;#注解和反射&quot; class=&quot;headerlink&quot; title=&quot;注解和反射&quot;&gt;&lt;/a&gt;注解和反射&lt;/h1&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span
      
    
    </summary>
    
    
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://liuhuaqiang.top/2021/01/11/nginx/"/>
    <id>https://liuhuaqiang.top/2021/01/11/nginx/</id>
    <published>2021-01-11T03:47:10.000Z</published>
    <updated>2021-01-11T03:47:42.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><img src="/2021/01/11/nginx/image-20210111102656730.png" alt="image-20210111102656730"></p><p><img src="/2021/01/11/nginx/image-20210111102801707.png" alt="image-20210111102801707"></p><p>如果路径中带有edu就访问8001</p><p>如果路径中带有vod就访问8002</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><img src="/2021/01/11/nginx/image-20210111102849998.png" alt="image-20210111102849998"></p><p>默认轮询算法</p><p><img src="/2021/01/11/nginx/image-20210111102930328.png" alt="image-20210111102930328"></p><p><img src="/2021/01/11/nginx/image-20210111102941136.png" alt="image-20210111102941136"></p><h2 id="动静结合"><a href="#动静结合" class="headerlink" title="动静结合"></a>动静结合</h2><p><img src="/2021/01/11/nginx/image-20210111103000437.png" alt="image-20210111103000437"></p><h2 id="docker-实战"><a href="#docker-实战" class="headerlink" title="docker 实战"></a>docker 实战</h2><ol><li>首先,pull    nginx镜像</li></ol><pre class=" language-bash"><code class="language-bash">docker pull nginx:latest</code></pre><ol start="2"><li>进入docker 并且安装vim </li></ol><pre class=" language-shell"><code class="language-shell">首先运行一次,,确保没问题,再把defatul.conf 复制出来docker cp nginx:/etc/nginx/conf.d/defautl.conf .进入容器docker exec -it nginx /bin/bashcd /etc/apt cat > sources.list <<EOF# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-freeEOFapt-get update apt-get install vimexit然后退出做镜像docker commit nginx nginx:v1.0</code></pre><ol start="3"><li>自定义docker网络</li></ol><pre class=" language-shell"><code class="language-shell">docker network create --driver=bridge --subnet=192.168.0.0/16 --gateway=192.168.1.0 mynet# 查看docker 所有网络docker network ls # 查看 docker内网情况docker network inspect mynet </code></pre><ol start="4"><li>运行nginx</li></ol><pre class=" language-shell"><code class="language-shell">docker run -it --name nginx1 -v /root/nginx/nginx1/default.conf:/etc/nginx/conf.d/default.conf -p 9001:80 --net mynet nginx</code></pre><ol start="5"><li>修改配置文件</li></ol><pre class=" language-shell"><code class="language-shell"># 这是docker 网络        "ConfigOnly": false,        "Containers": {            "b842ce12f9f8d77fffcf827314ae6e7e2485778819f32ec8f6bb042b6eba4f32": {                "Name": "tomcat1",                "EndpointID": "9a7455e796a3c46ce7f902acf3e935a85fc61d9dc64f6d4529f392baffe3c2dc",                "MacAddress": "02:42:c0:a8:00:01",                "IPv4Address": "192.168.0.1/16",                "IPv6Address": ""            },            "fb8b92e75d287db27b7c6ef150ce05c8a4a68beba8dfa78ae13cdfcb81c27f21": {                "Name": "nginx1",                "EndpointID": "67548a0cfbab7d5d18891b7188cbcb29835f9394c2ec783ad18113b0276e93b1",                "MacAddress": "02:42:c0:a8:00:02",                "IPv4Address": "192.168.0.2/16",                "IPv6Address": ""            }        },        "Options": {},        "Labels": {}    }1 server {2     listen       80;3     server_name  192.168.0.2;   # nginx 的网络45     location / {6         proxy_pass http://192.168.0.1:8080;   # docker网络中,tomcat 的地址7     }8 }</code></pre><ol start="6"><li>测试</li></ol><p><img src="/2021/01/11/nginx/image-20210111114514928.png" alt="image-20210111114514928"></p><p><img src="/2021/01/11/nginx/image-20210111114519104.png" alt="image-20210111114519104">.</p><p>都能访问,完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h1&gt;&lt;h2 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;
      
    
    </summary>
    
    
    
      <category term="docker" scheme="https://liuhuaqiang.top/tags/docker/"/>
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://liuhuaqiang.top/tags/java/"/>
    
      <category term="nginx" scheme="https://liuhuaqiang.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>pandas操作excel基本操作</title>
    <link href="https://liuhuaqiang.top/2020/12/25/pandas-cao-zuo-excel-ji-ben-cao-zuo/"/>
    <id>https://liuhuaqiang.top/2020/12/25/pandas-cao-zuo-excel-ji-ben-cao-zuo/</id>
    <published>2020-12-25T01:43:24.000Z</published>
    <updated>2020-12-25T01:44:59.088Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFramea <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"A"</span><span class="token punctuation">)</span>b <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"B"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">,</span> <span class="token string">"300"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"C"</span><span class="token punctuation">)</span>d <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">:</span> <span class="token string">"321"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>x <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">:</span> b<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这种是a.name当头,index是索引</span><span class="token comment" spellcheck="true"># print(x)</span><span class="token triple-quoted-string string">"""     A    B    Ca    1   10  NaNb    2   20  100c    3   30  200d  NaN  NaN  300"""</span>y <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这种情况是index当头</span><span class="token comment" spellcheck="true"># print(y)</span><span class="token triple-quoted-string string">"""     a    b    c    dA    1    2    3  NaNB   10   20   30  NaNC  NaN  100  200  300"""</span>z <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name<span class="token punctuation">:</span> b<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(z)</span><span class="token triple-quoted-string string">"""     A    B    Ca    1   10  NaNb    2   20  100c    3   30  200d  NaN  NaN  300"""</span><span class="token comment" spellcheck="true"># 修改头为 B列的值,,并且,B列的值为"100"(上面生成的是str) ,第二个括号里面的是条件(不是二维数组的列)</span><span class="token comment" spellcheck="true"># z['B'][z['B'] == "10"] = 1000</span><span class="token comment" spellcheck="true"># 修改索引为aa,头为AA的值为10</span><span class="token comment" spellcheck="true"># z.loc['aa', "AA"] = 10</span><span class="token comment" spellcheck="true"># 修改 索引为aa的全部值为100</span><span class="token comment" spellcheck="true"># z.loc['aa'] = "1000"</span><span class="token comment" spellcheck="true"># print(z.shape)  # (4,2 )</span><span class="token comment" spellcheck="true"># print(z.columns)  # Index(['A', 'B'], dtype='object')</span><span class="token comment" spellcheck="true"># 三种方法修改index的名字</span><span class="token comment" spellcheck="true"># inplace是不是在本身上面改,也可以</span><span class="token comment" spellcheck="true"># z = z.rename(index={"a": "aa"})</span><span class="token comment" spellcheck="true"># z.rename(index={"a": "aa"}, inplace=True)</span><span class="token comment" spellcheck="true"># z.rename({'a': 'aa'}, axis='index', inplace=True)</span><span class="token comment" spellcheck="true"># 修改头名字</span><span class="token comment" spellcheck="true"># z.rename({"A": "AA", "B": "BB"}, axis="columns", inplace=True)</span><span class="token comment" spellcheck="true"># 添加列</span><span class="token comment" spellcheck="true"># z['dd'] = b</span><span class="token comment" spellcheck="true"># xx = pd.concat([x, z], axis=0).reset_index(drop=True)</span><span class="token comment" spellcheck="true"># z.insert(2, column="dd", value=np.arange(len(z)))</span><span class="token comment" spellcheck="true"># 添加行</span><span class="token comment" spellcheck="true"># z = z.append(pd.Series({"A": "123", "B": "321"}), ignore_index=True)</span><span class="token comment" spellcheck="true"># z = z.append({"A": "123", "B": "321"}, ignore_index=True)</span><span class="token comment" spellcheck="true"># 这样是索引当了头</span><span class="token comment" spellcheck="true"># z = z.append(a, ignore_index=True)</span><span class="token comment" spellcheck="true">#  添加e索引,数据为1,2,3</span><span class="token comment" spellcheck="true"># z.loc['e'] = ["1", "2", "3"]</span><span class="token comment" spellcheck="true"># z.loc[len(z)] = ["3", "2", "1"]</span><span class="token comment" spellcheck="true"># z.loc[z.shape[0]] = ["3", "2", "1"]</span><span class="token comment" spellcheck="true"># xx = x.append(z, ignore_index=True).reset_index(drop=True)</span><span class="token comment" spellcheck="true"># 拼接</span><span class="token comment" spellcheck="true"># xx = pd.concat([x,z],axis=0).reset_index(drop=True)</span><span class="token comment" spellcheck="true"># 在2行的前面插入d</span><span class="token comment" spellcheck="true"># z.iloc[2] = d</span><span class="token comment" spellcheck="true"># 删除行</span><span class="token comment" spellcheck="true"># z.drop('a', axis=0, inplace=True)</span><span class="token comment" spellcheck="true"># z.drop(['a', 'b'], axis=0, inplace=True)</span><span class="token comment" spellcheck="true"># 删除列</span><span class="token comment" spellcheck="true"># z.drop('A', axis=1, inplace=True)</span><span class="token comment" spellcheck="true"># z.drop(['A','B'], axis=1, inplace=True)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;token keyword&quot;&gt;as&lt;
      
    
    </summary>
    
    
    
      <category term="python" scheme="https://liuhuaqiang.top/tags/python/"/>
    
      <category term="技巧" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="pandas" scheme="https://liuhuaqiang.top/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>docker教程</title>
    <link href="https://liuhuaqiang.top/2020/12/24/docker-jiao-cheng/"/>
    <id>https://liuhuaqiang.top/2020/12/24/docker-jiao-cheng/</id>
    <published>2020-12-24T06:57:07.000Z</published>
    <updated>2020-12-24T07:24:15.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker教程"><a href="#docker教程" class="headerlink" title="docker教程"></a>docker教程</h1><h2 id="1-Docker-一-：Docker安装与底层原理"><a href="#1-Docker-一-：Docker安装与底层原理" class="headerlink" title="1. Docker(一)：Docker安装与底层原理"></a>1. Docker(一)：Docker安装与底层原理</h2><p><img src="https://warlock.live/blog/Docker/1.Docker%E7%BB%84%E6%88%90.png" alt="Docker组成"></p><h4 id="镜像-image-："><a href="#镜像-image-：" class="headerlink" title="镜像(image)："></a>镜像(image)：</h4><p>Docker镜像就相当于是一个文件系统，通俗来说就是为容器用来创建容器的</p><h4 id="容器-Container-："><a href="#容器-Container-：" class="headerlink" title="容器(Container)："></a>容器(Container)：</h4><p>Docker 利用容器 (Container) 独立运行的一个或一组应用，容器是用镜像创建的运行实例，它可以被启动、开始、停止、删除，每个容器都是相互隔离的、保证安全的平台，可以把容器看做是一个简易版的Linux系统</p><p><strong>容器就相当于Java中的对象，镜像相当于Java中的类</strong></p><h4 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h4><p>仓库是集中存放镜像文件的场所<br>仓库注册服务器 (Registry) 上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签<br>仓库分为公开仓库和私有仓库两种形式<br>最大的公开仓库是<a href="https://hub.docker.com/" target="_blank" rel="noopener">DockerHub</a>存放了数量庞大的镜像供用户下载，国内的公开仓库包括阿里云等</p><h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p>1.需要Liunx版本为<strong>CentOS7.0以上</strong></p><p>2.卸载旧版本(非必须项)</p><pre class=" language-bash"><code class="language-bash">yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine 复制</code></pre><p>3.安装Docker所需要依赖</p><pre class=" language-bash"><code class="language-bash"> yum <span class="token function">install</span> -y yum-utils \ device-mapper-persistent-data \ lvm2 复制</code></pre><p>4.设置镜像仓库</p><pre class=" language-bash"><code class="language-bash">yum-config-manager  --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 复制</code></pre><p>5.安装Docker</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> docker-ce 复制</code></pre><p>6.设置阿里云镜像加速</p><p><img src="https://warlock.live/blog/Docker/2.Docker%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F.png" alt="阿里云镜像加速">)</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://qhyb8ixp.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker 复制</code></pre><p>7.开启Dcoker服务</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> docker start 复制</code></pre><p>8.测试Docker-HelloWorld程序</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ8vbi9mx98t2s78lyxfpuZ ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run hello-world </span>Unable to <span class="token function">find</span> image <span class="token string">'hello-world:latest'</span> locallydocker run hello-worldlatest: Pulling from library/hello-world0e03bdcc26d7: Already existsDigest: sha256:6a65f928fb91fcfbc963f7aa6d57c8eeb426ad9a20c7ee045538ef34847f44f1Status: Downloaded newer image <span class="token keyword">for</span> hello-world:latestHello from Docker<span class="token operator">!</span>             --<span class="token operator">></span> 出现这句话代表Docker安装没有问题This message shows that your installation appears to be working correctly. 复制</code></pre><p>9.卸载Docker</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#1. 卸载依赖</span>yum remove docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true">#2. 删除资源 /var/lib/docker 是docker的默认工作路径！</span><span class="token function">rm</span> -rf /var/lib/docker 复制</code></pre><h3 id="Docker的底层原理"><a href="#Docker的底层原理" class="headerlink" title="Docker的底层原理"></a>Docker的底层原理</h3><blockquote><p>Docker的工作原理</p></blockquote><p>Docker是基于C/S结构的系统，Docker的守护进程运行在Linux服务器(宿主机)上，当我们在Liunx服务器上(Docker-Client)输入Docker相关命令就会被发送给Doker-Server</p><blockquote><p>为什么Docker比VM(虚拟机)快</p></blockquote><p>1、Docker有着比虚拟机更少的抽象层，由于Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在CPU、内存利用率上docker将会在效率上有明显优势<br>2、当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核，因而避免引导、加载操作系统内核返个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载GuestOS(虚拟机中的操作系统)，这个新建过程是分钟级别的，而Docker由于直接利用宿主机的操作系统，则省略了这个复杂的过程,因此新建一个Docker容器只需要几秒钟</p><h2 id="Docker-二-：Docker常用命令和安装Nginx与Tomcat"><a href="#Docker-二-：Docker常用命令和安装Nginx与Tomcat" class="headerlink" title="Docker(二)：Docker常用命令和安装Nginx与Tomcat"></a>Docker(二)：Docker常用命令和安装Nginx与Tomcat</h2><h3 id="Docker帮助命令"><a href="#Docker帮助命令" class="headerlink" title="Docker帮助命令"></a>Docker帮助命令</h3><pre class=" language-bash"><code class="language-bash">1. docker version     <span class="token comment" spellcheck="true"># 显示Docker的版本信息</span>2. docker info           <span class="token comment" spellcheck="true"># 显示Docker的系统信息(包含镜像与容器的数量)</span>3. docker 命令 --help  <span class="token comment" spellcheck="true"># 查看帮助(就是显示这个命令有什么可选项) 复制</span></code></pre><h3 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h3><ol><li><p>docker images：显示本机上所有安装镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEcentos              latest              470671670cac        4 months ago        237MBhello-world         latest              bf756fb1ae65        4 months ago        13.3kB<span class="token comment" spellcheck="true"># 可选项</span>docker images -a <span class="token comment" spellcheck="true"># 列出所有的镜像</span>docker images -q <span class="token comment" spellcheck="true"># 只显示镜像的id</span><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images -aq</span>470671670cacbf756fb1ae65 复制</code></pre></li><li><p>docker search：搜索镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker search mysql(镜像名)</span>NAME                              DESCRIPTION                                     STARSmysql                             MySQL is a widely used, open-source relation…   9553             mariadb                           MariaDB is a community-developed fork of MyS…   3471 <span class="token comment" spellcheck="true"># 可选项</span>docker search mysql -f<span class="token operator">=</span>STARS<span class="token operator">=</span>3000 <span class="token comment" spellcheck="true"># 列出镜像星数大于3000的镜像 复制</span></code></pre></li><li><p>docker pull：下载镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql      # 下载最新版本的MySQL</span><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7  # 下载指定版本的MySQL 复制</span></code></pre></li><li><p>docker rmi：删除镜像</p><pre class=" language-bash"><code class="language-bash">docker rmi -f 镜像id                      <span class="token comment" spellcheck="true"># 删除指定的镜像</span>docker rmi -f 镜像id 镜像id 镜像id 镜像id  <span class="token comment" spellcheck="true"># 删除指定的镜像</span>docker rmi -f <span class="token variable"><span class="token variable">$(</span>docker images -aq<span class="token variable">)</span></span>       <span class="token comment" spellcheck="true"># 删除全部的镜像 复制</span></code></pre></li></ol><h3 id="Docker容器命令"><a href="#Docker容器命令" class="headerlink" title="Docker容器命令"></a>Docker容器命令</h3><ol><li><p>docker run [可选参数] 镜像名</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run 可选参数 镜像名</span><span class="token comment" spellcheck="true"># 可选参数</span>--name<span class="token operator">=</span>”xxx“    <span class="token comment" spellcheck="true"># 容器名字</span>-d              <span class="token comment" spellcheck="true"># 后台模式运行</span>-it             <span class="token comment" spellcheck="true"># 使用交互模式运行，进入容器查看内容</span>-p<span class="token punctuation">(</span>小学<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 指定端口映射 如：-p 8080(宿主机):8080(容器)</span>-P<span class="token punctuation">(</span>大写<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 随机端口映射</span><span class="token comment" spellcheck="true"># 测试启动进入与退出容器</span><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -it centos /bin/bash           # /bin/bash 是使用命令行进入</span><span class="token punctuation">[</span>root@6130f0353526 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls                              # 此时已经进入Docker的CentOS容器</span>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<span class="token punctuation">[</span>root@6130f0353526 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># exit</span><span class="token keyword">exit</span><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span> 复制</code></pre></li><li><p>docker ps [可选参数]：列出运行的容器</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps 可选参数</span><span class="token comment" spellcheck="true"># 可选参数</span>-a       <span class="token comment" spellcheck="true"># 列出正在运行和历史运行过的容器</span>-q       <span class="token comment" spellcheck="true"># 列出容器ID</span><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps -aq</span>6130f0353526895577bc1ae7f9fc9c23267dfaab3fceb1d3 复制</code></pre></li><li><p>退出容器</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">exit</span>          <span class="token comment" spellcheck="true"># 容器直接退出</span>Ctrl + P + Q  <span class="token comment" spellcheck="true"># 容器不停止退出 复制</span></code></pre></li><li><p>删除容器</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">rm</span> -f 容器id              <span class="token comment" spellcheck="true"># 删除指定容器(不能删除正在运行的，如需要rm-rf)</span>docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span>    <span class="token comment" spellcheck="true"># 删除所有容器 复制</span></code></pre></li><li><p>启动和停止容器操作</p><pre class=" language-bash"><code class="language-bash">docker start 容器id      <span class="token comment" spellcheck="true"># 启动容器</span>docker restart 容器id    <span class="token comment" spellcheck="true"># 重启容器</span>docker stop 容器id       <span class="token comment" spellcheck="true"># 停止正在运行的容器</span>docker <span class="token function">kill</span> 容器id       <span class="token comment" spellcheck="true"># 强制停止 复制</span></code></pre></li></ol><h3 id="Docker其它命令"><a href="#Docker其它命令" class="headerlink" title="Docker其它命令"></a>Docker其它命令</h3><h4 id="容器后台方式运行"><a href="#容器后台方式运行" class="headerlink" title="容器后台方式运行"></a>容器后台方式运行</h4><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker run -d centos</span>748d11ff226983ab8281fc6741087e6a3f349ad03f0cadafcd215aed894978dc<span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker ps</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES <span class="token comment" spellcheck="true"># 问题：我们此时已经发现启动CentOS，但是确查不到正在运行的容器</span> <span class="token comment" spellcheck="true"># 解释：Docker容器使用后台运行，就必须要有要一个前台进程，Docker发现没有应用，就会自动停止 复制</span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class=" language-bash"><code class="language-bash">docker logs -tf 容器id             <span class="token comment" spellcheck="true"># 查看实时日志  </span>docker logs -t --tail 数量 容器id  <span class="token comment" spellcheck="true"># 查看指定数量的日志            复制</span></code></pre><h4 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">top</span> 容器id 复制</code></pre><h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><pre class=" language-bash"><code class="language-bash">docker inspect 容器id 复制</code></pre><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 通常我们是使用后台方式运行容器，因为我们可能需要进入容器，修改配置</span><span class="token comment" spellcheck="true"># docker exec -it 容器ID /bin/bash (常用)</span><span class="token comment" spellcheck="true"># docker attach 容器ID</span><span class="token comment" spellcheck="true"># exec方式：就是类似新开一个窗口连接运行的容器</span><span class="token comment" spellcheck="true"># attach方式：就是直接连入当前的容器 复制</span></code></pre><h4 id="拷贝容器内文件到宿主机中"><a href="#拷贝容器内文件到宿主机中" class="headerlink" title="拷贝容器内文件到宿主机中"></a>拷贝容器内文件到宿主机中</h4><pre class=" language-bash"><code class="language-bash">docker <span class="token function">cp</span> 容器id:文件路径<span class="token punctuation">(</span>容器内<span class="token punctuation">)</span> 目的路径<span class="token punctuation">(</span>宿主机<span class="token punctuation">)</span><span class="token punctuation">[</span>root@MT ~<span class="token punctuation">]</span>docker <span class="token function">cp</span> 1a9a6785c37c:/home/c.java /home/ 复制</code></pre><h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档</span>docker search nginx<span class="token comment" spellcheck="true"># 2. 拉取镜像 docker pull nginx</span>docker pull nginx<span class="token comment" spellcheck="true"># 3. 运行测试</span>  <span class="token comment" spellcheck="true"># -d 后台运行</span>  <span class="token comment" spellcheck="true"># --name 给容器命名</span>  <span class="token comment" spellcheck="true"># -p 宿主机端口：容器内部端口(我这里使用阿里云的3344端口，前提要在阿里云安全组开放次端口)</span>docker run -d --name nginx -p 3344:80 nginx<span class="token comment" spellcheck="true"># 4.查看镜像</span>docker <span class="token function">ps</span><span class="token comment" spellcheck="true"># 5.测试是否成功</span>curl localhost:3344 <span class="token comment" spellcheck="true"># 或者在浏览器输入ip:3344 复制</span></code></pre><h3 id="Docker安装Tomcat"><a href="#Docker安装Tomcat" class="headerlink" title="Docker安装Tomcat"></a>Docker安装Tomcat</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载tomcat镜像</span>docker pull tomcat:9.0<span class="token comment" spellcheck="true"># 运行tomcat镜像</span>docker run -d tomcat -p 3344:8080 tomcat<span class="token comment" spellcheck="true"># 测试</span>curl localhost:3344  <span class="token comment" spellcheck="true"># 此时发现无法访问</span><span class="token comment" spellcheck="true"># 原因：tomcat容器里面webapps目录下没有文件</span><span class="token comment" spellcheck="true"># 进入容器</span>docker <span class="token function">exec</span> -it ef41045bea2b /bin/bash<span class="token function">cp</span> -r webapps.dist/* webapps<span class="token comment" spellcheck="true"># 重新测试 在浏览器输入ip:3344 --> 发现成功访问 复制</span></code></pre><h2 id="3-Docker-三-：理解Docker镜像、Docker容器数据卷和DockerFile"><a href="#3-Docker-三-：理解Docker镜像、Docker容器数据卷和DockerFile" class="headerlink" title="3. Docker(三)：理解Docker镜像、Docker容器数据卷和DockerFile"></a>3. Docker(三)：理解Docker镜像、Docker容器数据卷和DockerFile</h2><h3 id="Docker镜像理解"><a href="#Docker镜像理解" class="headerlink" title="Docker镜像理解"></a>Docker镜像理解</h3><hr><h4 id="Docker镜像是什么"><a href="#Docker镜像是什么" class="headerlink" title="Docker镜像是什么"></a>Docker镜像是什么</h4><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时库、环境变量和配置文件</p><h4 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h4><blockquote><p>UnionFs：联合文件系统</p></blockquote><p>UnionFs(联合文件系统)：Union文件系统(UnionFs)是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，UnionFs联合文件系统是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像<br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>Docker的镜像实际上由一层一层的UnionFs文件系统组成<br>bootfs：主要包含 bootloader和 Kernel，bootloader主要是引导加 kernel，Linux刚启动时会加bootfs文件系统，在 Docker镜像的最底层是bootfs，这一层与我们典型的Linux/Unix系统是一样的，包含bootfs加载器和内核，当bootfs加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs：在 bootfs之上，包含的就是典型 Linux系统中的/dev、/proc、/bin、/etc等标准目录和文件，rootfs就是各种不同的操作系统发行版，比如：Ubuntu,、CentOS等等</p><p>简单理解：</p><pre><code>   1. 对于Docker安装OS来说：就是Docker使用了Linux本身的bootfs，只需要安装自己所需的rootfs   2. 对于Docker安装普通镜像来说：就是Docker本身是分层下载镜像，所以可以提取出公共层镜像，进行复用 复制</code></pre><blockquote><p>Docker镜像的特点</p></blockquote><p>Docker镜像都是只读的，当容器启动时，一个新的可写层加载到镜像的顶部</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层</p><p><img src="https://warlock.live/blog/Docker/3.Docker%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86.png" alt="img">-</p><h3 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h3><hr><h4 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h4><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><h4 id="容器数据卷使用命令"><a href="#容器数据卷使用命令" class="headerlink" title="容器数据卷使用命令"></a>容器数据卷使用命令</h4><pre class=" language-shell"><code class="language-shell"># 命令docker run -it -v 主机目录:容器内目录 /bin/bash 复制</code></pre><h4 id="挂载MySQL数据库到Liunx宿主机"><a href="#挂载MySQL数据库到Liunx宿主机" class="headerlink" title="挂载MySQL数据库到Liunx宿主机"></a>挂载MySQL数据库到Liunx宿主机</h4><pre class=" language-shell"><code class="language-shell"># 1. 下载MySQLdocker pull mysql# 2. 启动并挂载 -e：特别注意需要设置密码docker run -d -p 3344:3306 -v /home/conf:/etc/mysql/conf.d -v /home/logs:/logs -v /home/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql 复制</code></pre><p>此时我们使用远程连接软件会报错</p><p><img src="https://warlock.live/blog/Docker/4.MySQL%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99.png" alt="img">-</p><pre class=" language-shell"><code class="language-shell"># 解决报错# 1. 进入容器内docker exec -it 容器ID /bin/bash# 2. 进入MySQLmysql -uroot -p123456# 3. 授权mysql> GRANT ALL ON *.* TO 'root'@'%';# 4. 刷新权限：mysql> flush privileges;# 5. 更新加密规则：mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;# 6. 更新root用户密码：mysql> ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';# 7. 刷新权限：mysql> flush privileges; 复制</code></pre><h4 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h4><pre class=" language-shell"><code class="language-shell">-v 容器内路径          # 匿名挂载-v 卷名:容器内路径         # 具名挂载-v 宿主机路径:容器内路径 # 指定路径挂载 复制</code></pre><p>Docker容器内的卷，在没有指定目录的情况下都在<code>/var/lib/docker/volumes/xxx/_data</code>下</p><h4 id="拓展：绑定权限"><a href="#拓展：绑定权限" class="headerlink" title="拓展：绑定权限"></a>拓展：绑定权限</h4><pre class=" language-shell"><code class="language-shell"># 通过 -v 容器内路径：ro rw 改变读写权限ro # readonly 只读rw # readwrite 可读可写docker run -d nginx01 -v nginxdemo:/etc/nginx:ro nginxdocker run -d nginx01 -v nginxdemo:/etc/nginx:rw nginx# ro：只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作 复制</code></pre><h4 id="数据卷容器挂载"><a href="#数据卷容器挂载" class="headerlink" title="数据卷容器挂载"></a>数据卷容器挂载</h4><p>目的：实现多个容器间的数据同步(多个MySQL间共享数据)</p><pre class=" language-shell"><code class="language-shell"># 使用 --volumes-from 容器名称 此命令实现数据卷容器挂载docker run -d --name mysql02 -p 3345:3306 --volumes-from mysql01 -e MYSQL_ROOT_PASSWORD=123456 mysql 复制</code></pre><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><p><code>DockerFile</code>是用来构建Docker镜像的文件(命令参数脚本)</p><h4 id="DockerFile构建指令"><a href="#DockerFile构建指令" class="headerlink" title="DockerFile构建指令"></a>DockerFile构建指令</h4><pre class=" language-shell"><code class="language-shell">FROM                # 基础镜像，一切从这里开始构建MAINTAINER             # 镜像是谁写的， 姓名+邮箱RUN                    # 镜像构建的时候需要运行的命令ADD                    # 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录WORKDIR                # 镜像的工作目录VOLUME                # 挂载的目录EXPOSE                # 保留端口配置CMD                    # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代ENTRYPOINT            # 指定这个容器启动的时候要运行的命令，可以追加命令COPY                # 类似ADD，将我们文件拷贝到镜像中ENV                    # 构建的时候设置环境变量！ 复制</code></pre><h4 id="创建一个自己的CentOS镜像"><a href="#创建一个自己的CentOS镜像" class="headerlink" title="创建一个自己的CentOS镜像"></a>创建一个自己的CentOS镜像</h4><ul><li><p>创建DockerFile</p><pre class=" language-shell"><code class="language-shell">vim mycentos 复制</code></pre></li><li><p>编写DockerFile</p><pre class=" language-shell"><code class="language-shell">FROM centosMAINTAINER MT<1746344046@qq.com>ENV MYPATH /usr/localWORKEDIR $MYPATHRUN yum -y install vimEXPOSE 80CMD /bin/bash 复制</code></pre></li><li><p>构建自己的镜像</p><pre class=" language-shell"><code class="language-shell">docker build -f mycentos -t mycentosdemodo:1.0 . 复制</code></pre></li><li><p>查看镜像生成历史</p><pre class=" language-shell"><code class="language-shell">docker history 镜像ID 复制</code></pre></li></ul><h4 id="创建Tomcat镜像"><a href="#创建Tomcat镜像" class="headerlink" title="创建Tomcat镜像"></a>创建Tomcat镜像</h4><p>1.准备镜像文件：Tomcat和JDK的压缩包</p><p>2.编写DockerFile</p><pre class=" language-shell"><code class="language-shell">FROM centosMAINTAINER fortuneteller<1746344046@qq.com>COPY README.txt /usr/local/README.txtADD jdk-8u251-linux-x64.tar.gz /usr/localADD apache-tomcat-9.0.35.tar.gz /usr/localRUN yum -y install vimENV MYPATH /usr/localWORKDIR $MYPATHENV JAVA_HOME /usr/local/jdk1.8.0_251ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35ENV CATALINA_BASH /usr/local/apache-toacat-9.0.35ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/binEXPOSE 8080CMD ["/usr/local/apache-tomcat-9.0.35/bin/catalina.sh", "run"] 复制</code></pre><p>3.打包镜像</p><pre class=" language-shell"><code class="language-shell"># 这里使用的是Docker明白命名的脚本(Dockerfile)，所以省略-fdocker build -t mytomcat . 复制</code></pre><p>4.启动镜像</p><pre class=" language-shell"><code class="language-shell">docker run -d -p 3344:8080 --name mttomcat -v /home/fortuneteller/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test -v /home/fortuneteller/tomcat/logs:/usr/local/apache-tomcat-9.0.35/logs mytomcat 复制</code></pre><p>5.测试运行</p><p><img src="https://warlock.live/blog/Docker/5.%E6%B5%8B%E8%AF%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8FApache.png" alt="img"></p><p>6.在宿主机的/home/fortuneteller/tomcat/test目录下创建WEB-INF目录与mt.jsp</p><pre class=" language-jsp"><code class="language-jsp"><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>docker</title></head><body>----------welcome------------<%="这是一个测试页面"%></body></html> 复制</code></pre><p>7.在WEB-INF目录下编写web.xml文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span> 复制</code></pre><p>8.测试访问</p><p><img src="https://warlock.live/blog/Docker/6.%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F.png" alt="img"></p><h3 id="本地镜像上传阿里云"><a href="#本地镜像上传阿里云" class="headerlink" title="本地镜像上传阿里云"></a>本地镜像上传阿里云</h3><p>1.<a href="https://cr.console.aliyun.com/cn-zhangjiakou/instances/repositories" target="_blank" rel="noopener">登陆阿里云容器镜像服务</a></p><p>2.创建命名空间</p><p>3.创建仓库</p><p>4.设置固定密码</p><p><img src="https://warlock.live/blog/Docker/7.%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E5%AF%86%E7%A0%81.png" alt="img"></p><p>5.查看自己的推送命令</p><p><img src="https://warlock.live/blog/Docker/8.%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E6%8E%A8%E9%80%81%E5%91%BD%E4%BB%A4.png" alt="img"></p><p>6.使用推送命令完成上传</p><p><img src="https://warlock.live/blog/Docker/9.%E6%9F%A5%E7%9C%8B%E6%8E%A8%E9%80%81%E6%88%90%E5%8A%9F.png" alt="img"></p><p>7.拉取时同理根据阿里云提示命令完成即可</p><hr><h3 id="Docker总结"><a href="#Docker总结" class="headerlink" title="Docker总结"></a>Docker总结</h3><p><img src="https://warlock.live/blog/Docker/10.Docker%E5%B0%8F%E7%BB%93.png" alt="img">-</p><h2 id="4-Docker-四-：Docker部署SpringBoot项目1-使用Maven构建获得jar包"><a href="#4-Docker-四-：Docker部署SpringBoot项目1-使用Maven构建获得jar包" class="headerlink" title="4. Docker(四)：Docker部署SpringBoot项目1.使用Maven构建获得jar包"></a>4. Docker(四)：Docker部署SpringBoot项目1.使用Maven构建获得jar包</h2><h3 id="1-使用Maven构建获得jar包"><a href="#1-使用Maven构建获得jar包" class="headerlink" title="1.使用Maven构建获得jar包"></a>1.使用Maven构建获得jar包</h3><h3 id="2-编写Dockerfile"><a href="#2-编写Dockerfile" class="headerlink" title="2.编写Dockerfile"></a>2.编写Dockerfile</h3><pre class=" language-shell"><code class="language-shell">FROM java:8COPY *.jar /app.jarCMD ["--server.port=8080"]EXPOSE 8080ENTRYPOINT ["java", "jar", "app.jar"] 复制</code></pre><h3 id="3-上传Docker与jar包到Linux服务器"><a href="#3-上传Docker与jar包到Linux服务器" class="headerlink" title="3.上传Docker与jar包到Linux服务器"></a>3.上传Docker与jar包到Linux服务器</h3><h3 id="4-使用命令获得镜像"><a href="#4-使用命令获得镜像" class="headerlink" title="4.使用命令获得镜像"></a>4.使用命令获得镜像</h3><pre class=" language-bash"><code class="language-bash">docker build -t ideatest <span class="token keyword">.</span> 复制</code></pre><h3 id="5-使用命令查看构建到的镜像编号"><a href="#5-使用命令查看构建到的镜像编号" class="headerlink" title="5.使用命令查看构建到的镜像编号"></a>5.使用命令查看构建到的镜像编号</h3><pre class=" language-bash"><code class="language-bash">docker images 复制</code></pre><h3 id="6-启动镜像"><a href="#6-启动镜像" class="headerlink" title="6.启动镜像"></a>6.启动镜像</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 3344:8080 ideatest  # 3344端口需要提前在阿里云放开 复制</code></pre><h3 id="7-测试访问"><a href="#7-测试访问" class="headerlink" title="7.测试访问"></a>7.测试访问</h3><pre class=" language-shell"><code class="language-shell">在浏览器输入：服务器ip:3344 复制</code></pre><h2 id="5-Docker网络"><a href="#5-Docker网络" class="headerlink" title="5. Docker网络"></a>5. Docker网络</h2><p>在宿主机上，有一个docker0 当做中介（类似于路由器）</p><p> docker内，也会生成一个ip和宿主机的i对应</p><p>docker之间可以进行通信</p><h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><p>下面先创建一个新的 Docker 网络。</p><pre class=" language-bash"><code class="language-bash">docker network create --driver<span class="token operator">=</span>bridge --subnet<span class="token operator">=</span>192.168.0.0/16 --gateway<span class="token operator">=</span>192.168.1.0 mynet</code></pre><p>参数说明：</p><p><strong>-d</strong>：参数指定 Docker 网络类型，有 bridge、overlay。</p><p>其中 overlay 网络类型用于 Swarm mode，在本小节中你可以忽略它。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> <span class="token punctuation">{</span>14:53<span class="token punctuation">}</span>~ ➭ docker network <span class="token function">ls</span>NETWORK ID          NAME                DRIVER              SCOPEa73f6354f756        bridge              bridge              local15de44d3a379        host                host                local96da6da7b04b        mynet               bridge              localee9cc3a95dda        none                null                local</code></pre><h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 test-net 网络:</p><pre><code>docker run -itd --name test1 --network test-net ubuntu /bin/bash</code></pre><p>打开新的终端，再运行一个容器并加入到 test-net 网络:</p><pre><code>docker run -itd --name test2 --network test-net ubuntu /bin/bash</code></pre><p>点击图片查看大图：</p><p><a href="https://www.runoob.com/wp-content/uploads/2016/05/docker-net2.png" target="_blank" rel="noopener"><img src="https://www.runoob.com/wp-content/uploads/2016/05/docker-net2.png" alt="img"></a></p><p>下面通过 ping 来证明 test1 容器和 test2 容器建立了互联关系。</p><p>如果 test1、test2 容器内中无 ping 命令，则在容器内执行以下命令安装 ping（即学即用：可以在一个容器里安装好，提交容器到镜像，在以新的镜像重新运行以上俩个容器）。</p><h2 id="6-网络通信"><a href="#6-网络通信" class="headerlink" title="6. 网络通信"></a>6. 网络通信</h2><pre class=" language-bash"><code class="language-bash">docker network connect x1 x2</code></pre><h2 id="解决ubuntu中文问题"><a href="#解决ubuntu中文问题" class="headerlink" title="解决ubuntu中文问题"></a>解决ubuntu中文问题</h2><p><a href="https://blog.csdn.net/yiwanxingchena/article/details/83900284" target="_blank" rel="noopener">https://blog.csdn.net/yiwanxingchena/article/details/83900284</a></p><pre class=" language-bash"><code class="language-bash">方法一：     <span class="token punctuation">(</span>0<span class="token punctuation">)</span>.查看容器语言环境         $ locale         LANG<span class="token operator">=</span>         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"POSIX"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>     <span class="token punctuation">(</span>1<span class="token punctuation">)</span>.查看容器支持的语言         $ locale -a          C          C.UTF-8          POSIX     <span class="token punctuation">(</span>2<span class="token punctuation">)</span>.修改 /etc/profile         $ <span class="token function">vi</span> /etc/profile            在最后添加 <span class="token function">export</span>  LANG<span class="token operator">=</span>C.UTF-8     <span class="token punctuation">(</span>3<span class="token punctuation">)</span>.重新加载环境变量         $ <span class="token function">source</span> /etc/profile     <span class="token punctuation">(</span>4<span class="token punctuation">)</span>.再次查看         $ locale         LANG<span class="token operator">=</span>C.UTF-8         LANGUAGE<span class="token operator">=</span>         LC_CTYPE<span class="token operator">=</span><span class="token string">"C.UTF-8"</span>         <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> 方法二：      在Dockerfile中添加 ENV LANG C.UTF-8 重新制作镜像</code></pre><h2 id="运行后-加配置"><a href="#运行后-加配置" class="headerlink" title="运行后,加配置"></a>运行后,加配置</h2><p><a href="https://www.cnblogs.com/zhuochong/p/10070516.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuochong/p/10070516.html</a></p><p><strong>1、Docker 命令修改</strong></p><pre class=" language-bash"><code class="language-bash">docker container update --restart<span class="token operator">=</span>always 容器名字</code></pre><p><strong>2、直接改配置文件</strong></p><p>首先停止容器，不然无法修改配置文件</p><p>配置文件路径为：<code>/var/lib/docker/containers/容器ID</code></p><p>在该目录下找到一个文件 <code>hostconfig.json</code> ，找到该文件中关键字 <code>RestartPolicy</code></p><p>修改前配置：<code>&quot;RestartPolicy&quot;:{&quot;Name&quot;:&quot;no&quot;,&quot;MaximumRetryCount&quot;:0}</code></p><p>修改后配置：<code>&quot;RestartPolicy&quot;:{&quot;Name&quot;:&quot;always&quot;,&quot;MaximumRetryCount&quot;:0}</code></p><p>最后启动容器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker教程&quot;&gt;&lt;a href=&quot;#docker教程&quot; class=&quot;headerlink&quot; title=&quot;docker教程&quot;&gt;&lt;/a&gt;docker教程&lt;/h1&gt;&lt;h2 id=&quot;1-Docker-一-：Docker安装与底层原理&quot;&gt;&lt;a href=&quot;#1-Do
      
    
    </summary>
    
    
    
      <category term="docker" scheme="https://liuhuaqiang.top/tags/docker/"/>
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES-Java-API</title>
    <link href="https://liuhuaqiang.top/2020/12/24/es-java-api/"/>
    <id>https://liuhuaqiang.top/2020/12/24/es-java-api/</id>
    <published>2020-12-24T03:05:10.000Z</published>
    <updated>2021-03-22T11:07:36.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="···1-ES-Java-API"><a href="#···1-ES-Java-API" class="headerlink" title="···1.ES Java API"></a>···1.ES Java API</h1><p><a href="https://www.bilibili.com/video/BV1Qz411e7yx?t=417&amp;p=13" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Qz411e7yx?t=417&amp;p=13</a></p><h2 id="1-1-创建索引"><a href="#1-1-创建索引" class="headerlink" title="1.1 创建索引"></a>1.1 创建索引</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"restHighLevelClient"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>    String index <span class="token operator">=</span> <span class="token string">"test2"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        CreateIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        XContentBuilder builder <span class="token operator">=</span> XContentFactory<span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"des"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//插入时分词</span>                        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//搜索时分词</span>                        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"search_analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        CreateIndexResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="1-2-删除索引"><a href="#1-2-删除索引" class="headerlink" title="1.2 删除索引"></a>1.2 删除索引</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DeleteIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteIndexRequest</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AcknowledgedResponse delete <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">.</span><span class="token function">isAcknowledged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-判断存在"><a href="#1-3-判断存在" class="headerlink" title="1.3 判断存在"></a>1.3 判断存在</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    GetIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetIndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> exists <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-4-插入文档"><a href="#1-4-插入文档" class="headerlink" title="1.4 插入文档"></a>1.4 插入文档</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"刘华强"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"帅哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    IndexResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建对象</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"华强说"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建请求</span>    IndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span><span class="token string">"lhq_index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 规则  PUT /lhq_index/_doc/1</span>    request<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>TimeValue<span class="token punctuation">.</span><span class="token function">timeValueSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将数据放入请求json</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//客户端发送请求 , 获取响应结果</span>    IndexResponse index <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-5-更新文档"><a href="#1-5-更新文档" class="headerlink" title="1.5 更新文档"></a>1.5 更新文档</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    UpdateRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"des"</span><span class="token punctuation">,</span><span class="token string">"非常帅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    UpdateResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新文档</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    UpdateRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateRequest</span><span class="token punctuation">(</span><span class="token string">"lhq_index"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"华强说Java"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UpdateRequest updateRequest <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>    UpdateResponse update <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-6-删除文档"><a href="#1-6-删除文档" class="headerlink" title="1.6 删除文档"></a>1.6 删除文档</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DeleteRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DeleteResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DeleteRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span><span class="token string">"lhq_index"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token string">"1s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DeleteResponse delete <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-7-批量操作"><a href="#1-7-批量操作" class="headerlink" title="1.7 批量操作"></a>1.7 批量操作</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"无名之辈1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"无名之辈2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person person3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王麻子"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"无名之辈3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ArrayList<span class="token operator">&lt;</span>Person<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>    arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>    arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> XContentType<span class="token punctuation">.</span>JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BulkResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-8-批量删除"><a href="#1-8-批量删除" class="headerlink" title="1.8 批量删除"></a>1.8 批量删除</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    BulkRequest bulkRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BulkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bulkRequest<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BulkResponse bulk <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">bulk</span><span class="token punctuation">(</span>bulkRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bulk<span class="token punctuation">.</span><span class="token function">hasFailures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否失败</span><span class="token punctuation">}</span></code></pre><h1 id="2-ES查询"><a href="#2-ES查询" class="headerlink" title="2 ES查询"></a>2 ES查询</h1><h2 id="2-1-ElasticSearch准备工作"><a href="#2-1-ElasticSearch准备工作" class="headerlink" title="2.1 ElasticSearch准备工作"></a>2.1 ElasticSearch准备工作</h2><ul><li>索引 ： sms-logs-index</li><li>类型：sms-logs-type</li></ul><table><thead><tr><th>字段名称</th><th>备注</th></tr></thead><tbody><tr><td>createDate</td><td>创建时间String</td></tr><tr><td>sendDate</td><td>发送时间 date</td></tr><tr><td>longCode</td><td>发送长号码 如 16092389287811 string</td></tr><tr><td>Mobile</td><td>如 13000000000</td></tr><tr><td>corpName</td><td>发送公司名称，需要分词检索</td></tr><tr><td>smsContent</td><td>下发短信内容，需要分词检索</td></tr><tr><td>State</td><td>短信下发状态 0 成功 1 失败 integer</td></tr><tr><td>Operatorid</td><td>运营商编号1移动2联通3电信 integer</td></tr><tr><td>Province</td><td>省份</td></tr><tr><td>ipAddr</td><td>下发服务器IP地址</td></tr><tr><td>replyTotal</td><td>短信状态报告返回时长 integer</td></tr><tr><td>Fee</td><td>扣费 integer</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li><p>创建实例代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//先定义索引名和类型名 </span>String index <span class="token operator">=</span> <span class="token string">"sms_logs_index"</span><span class="token punctuation">;</span>String type <span class="token operator">=</span> <span class="token string">"sms_logs_type"</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"restHighLevelClient"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> RestHighLevelClient client<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        CreateIndexRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateIndexRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        XContentBuilder builder <span class="token operator">=</span> XContentFactory<span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"createDate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"sendDate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"date"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"corpName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span><span class="token string">"ik_max_word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"operatorid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"ipAddr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>              builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"replyTotal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"fee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">mapping</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        CreateIndexResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li><p>数据导入部分</p><pre class=" language-json"><code class="language-json">PUT /sms_logs_index/_doc/<span class="token number">1</span><span class="token punctuation">{</span>  <span class="token property">"corpName"</span><span class="token operator">:</span> <span class="token string">"途虎养车"</span><span class="token punctuation">,</span>  <span class="token property">"createDate"</span><span class="token operator">:</span> <span class="token string">"2020-01-22"</span><span class="token punctuation">,</span>  <span class="token property">"fee"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"ipAddr"</span><span class="token operator">:</span> <span class="token string">"10.123.98.0"</span><span class="token punctuation">,</span>  <span class="token property">"longCode"</span><span class="token operator">:</span> <span class="token number">106900000009</span><span class="token punctuation">,</span>  <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"1738989222222"</span><span class="token punctuation">,</span>  <span class="token property">"operatorid"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"province"</span><span class="token operator">:</span> <span class="token string">"河北"</span><span class="token punctuation">,</span>  <span class="token property">"relyTotal"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token property">"sendDate"</span><span class="token operator">:</span> <span class="token string">"2020-02-22"</span><span class="token punctuation">,</span>  <span class="token property">"smsContext"</span><span class="token operator">:</span>   <span class="token string">"【途虎养车】亲爱的灯先生，您的爱车已经购买"</span><span class="token punctuation">,</span>  <span class="token property">"state"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="1-term-amp-terms查询"><a href="#1-term-amp-terms查询" class="headerlink" title="1 term&amp;terms查询"></a>1 term&amp;terms查询</h3><h4 id="1-1-term查询"><a href="#1-1-term查询" class="headerlink" title="1.1 term查询"></a>1.1 term查询</h4><ul><li><p>==term的查询是代表完全匹配，搜索之前不会对你的关键字进行分词==</p><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"province"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"京"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求对象</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TermQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span> <span class="token string">"河北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行查询</span>    SearchResponse search <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取想要的数据</span>    SearchHits hits <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> source <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===="</span><span class="token operator">+</span>source<span class="token operator">+</span><span class="token string">"===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>##不会对term中所匹配的值进行分词查询</code></pre></li></ul><h4 id="1-2-terms查询"><a href="#1-2-terms查询" class="headerlink" title="1.2 terms查询"></a>1.2 terms查询</h4><ul><li><p>是针对一个字段包含多个值得运用</p><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"province"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"京"</span><span class="token punctuation">,</span>        <span class="token string">"hebei"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">termsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求对象</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//条件</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TermsQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">termsQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span> <span class="token string">"he"</span><span class="token punctuation">,</span> <span class="token string">"bei"</span><span class="token punctuation">,</span><span class="token string">"hebei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行查询</span>    SearchResponse search <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取想要的数据</span>    SearchHits hits <span class="token operator">=</span> search<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> source <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===="</span><span class="token operator">+</span>source<span class="token operator">+</span><span class="token string">"===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="2-match查询"><a href="#2-match查询" class="headerlink" title="2 match查询"></a>2 match查询</h3><p>match查询属于高层查询，它会根据你查询字段类型不一样，采用不同的查询方式</p><p>match查询，实际底层就是多个term查询，将多个term查询的结果进行了封装</p><ul><li>查询的如果是日期或者是数值的话，它会根据你的字符串查询内容转换为日期或者是数值对等</li><li>如果查询的内容是一个不可被分的内容（keyword），match查询不会对你的查询的关键字进行分词</li><li>如果查询的内容是一个可被分的内容（text）,match则会根据指定的查询内容按照一定的分词规则去分词进行查询0</li></ul><h4 id="2-1match-all查询"><a href="#2-1match-all查询" class="headerlink" title="2.1match_all查询"></a>2.1match_all查询</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">match_all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MatchAllQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchHits hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//只展示10条,默认</span></code></pre><h4 id="2-2match"><a href="#2-2match" class="headerlink" title="2.2match"></a>2.2match</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"province"</span><span class="token operator">:</span> <span class="token string">"北京"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MatchQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchHits hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-3-boolmatch"><a href="#2-3-boolmatch" class="headerlink" title="2.3.boolmatch"></a>2.3.boolmatch</h4><p>==可以用and 和 or连接==</p><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"province"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"query"</span><span class="token operator">:</span> <span class="token string">"北 京"</span><span class="token punctuation">,</span>        <span class="token string">"operator"</span><span class="token operator">:</span> <span class="token string">"and"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"province"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"query"</span><span class="token operator">:</span> <span class="token string">"北 hebei"</span><span class="token punctuation">,</span>        <span class="token string">"operator"</span><span class="token operator">:</span> <span class="token string">"or"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MatchQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span><span class="token string">"京 hebei"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span>Operator<span class="token punctuation">.</span>OR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        MatchQueryBuilder query = QueryBuilders.matchQuery("province","京 hebei").operator(Operator.AND);</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchHits hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-4-multi-match"><a href="#2-4-multi-match" class="headerlink" title="2.4 multi_match"></a>2.4 multi_match</h4><p>==针对多个key 进行查询，多个key对于多个value==</p><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token operator">:</span> <span class="token string">"京 爱"</span><span class="token punctuation">,</span>      <span class="token string">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"province"</span><span class="token punctuation">,</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span><span class="token string">"smsContext"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiMatchQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MultiMatchQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">multiMatchQuery</span><span class="token punctuation">(</span><span class="token string">"京 爱"</span><span class="token punctuation">,</span> <span class="token string">"province"</span><span class="token punctuation">,</span> <span class="token string">"smsContent"</span><span class="token punctuation">,</span> <span class="token string">"smsContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchHits hits <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hits<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-其他查询"><a href="#3-其他查询" class="headerlink" title="3.其他查询"></a>3.其他查询</h3><h4 id="3-1-ID查询"><a href="#3-1-ID查询" class="headerlink" title="3.1 ID查询"></a>3.1 ID查询</h4><pre class=" language-java"><code class="language-java">GET <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">QueryById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    GetRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GetResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-多个ID查询"><a href="#3-2-多个ID查询" class="headerlink" title="3.2 多个ID查询"></a>3.2 多个ID查询</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"ids"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">IDS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IdsQueryBuilder queryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">idsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIds</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-prefix"><a href="#3-3-prefix" class="headerlink" title="3.3 prefix"></a>3.3 prefix</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"prefix"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"corpName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"花"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prefixQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PrefixQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">prefixQuery</span><span class="token punctuation">(</span><span class="token string">"corpName"</span><span class="token punctuation">,</span> <span class="token string">"花钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>模糊查询，输入字符大概，直接去查询</p><h4 id="3-4-fuzzy"><a href="#3-4-fuzzy" class="headerlink" title="3.4 fuzzy"></a>3.4 fuzzy</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"fuzzy"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"smsContext"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"车"</span><span class="token punctuation">,</span>        <span class="token string">"prefix_length"</span><span class="token operator">:</span> <span class="token number">1</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fuzzy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">fuzzyQuery</span><span class="token punctuation">(</span><span class="token string">"corpName"</span><span class="token punctuation">,</span><span class="token string">"花钱"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefixLength</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可指定前面多少个必须正确与</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-wildcard查询"><a href="#3-5-wildcard查询" class="headerlink" title="3.5.wildcard查询"></a>3.5.wildcard查询</h4><p>通配查询</p><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"wildcard"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"corpName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"中国*"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"wildcard"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"corpName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"中国*"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wildcard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">wildcardQuery</span><span class="token punctuation">(</span><span class="token string">"corpName"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-6-范围查询range"><a href="#3-6-范围查询range" class="headerlink" title="3.6 范围查询range"></a>3.6 范围查询range</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"fee"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"gte"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">"lte"</span><span class="token operator">:</span> <span class="token number">999</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"fee"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-7-正则查询"><a href="#3-7-正则查询" class="headerlink" title="3.7 正则查询"></a>3.7 正则查询</h4><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"regexp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"mobile"</span><span class="token operator">:</span> <span class="token string">"1[0-9].*"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regexpQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">regexpQuery</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">,</span><span class="token string">"1[0-9].*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-8-深分页Scroll"><a href="#3-8-深分页Scroll" class="headerlink" title="3.8 深分页Scroll"></a>3.8 深分页Scroll</h4><p>==from和size 的和超过1w的时候，效率非常的慢==</p><p>原理：</p><pre class=" language-shell"><code class="language-shell">from+size  ES查询数据的方式：     1  先将用户指定的关键词进行分词处理    2  将分词去词库中进行检索，得到多个文档的id    3  去各个分片中拉去指定的数据   耗时    4  根据数据的得分进行排序       耗时    5  根据from的值，将查询到的数据舍弃一部分，    6  返回查询结果Scroll+size    在ES中查询方式    1  先将用户指定的关键词进行分词处理    2  将分词去词库中进行检索，得到多个文档的id    3  将文档的id存放在一个ES的上下文中，ES内存    4  根据你指定给的size的个数去ES中检索指定个数的数据，拿完数据的文档id,会从上下文中移除    5  如果需要下一页的数据，直接去ES的上下文中，找后续内容    6  循环进行4.5操作</code></pre><p>缺点，Scroll是从内存中去拿去数据的，不适合做实时的查询，拿到的数据不是最新的</p><pre class=" language-json"><code class="language-json"># 执行scroll查询，返回第一页数据，并且将文档id信息存放在ES的上下文中，指定生存时间POST /sms_logs_index/_search?scroll=1m<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"fee"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span>#根据Scroll查询第二页的数据POST /_search/scroll<span class="token punctuation">{</span>  <span class="token property">"scroll_id"</span><span class="token operator">:</span>  <span class="token string">"FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFHpvZWRhWFlCd2F4Z2pkZHBHR0NrAAAAAAAAAZIWUXZnemxCZWtUenlxOXZQdEQ4QlVPQQ=="</span><span class="token punctuation">,</span>  <span class="token property">"scroll"</span><span class="token operator">:</span><span class="token string">"1m"</span><span class="token punctuation">}</span># 删除scroll数据DELETE /_search/scroll/FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFHpvZWRhWFlCd2F4Z2pkZHBHR0NrAAAAAAAAAZIWUXZnemxCZWtUenlxOXZQdEQ4QlVPQQ==    @Test    public void ScrollQuery(<span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span>        //        <span class="token number">1</span>   创建SearchRequest        SearchRequest request = new SearchRequest(index<span class="token punctuation">)</span><span class="token punctuation">;</span>//        <span class="token number">2</span>   指定scroll信息<span class="token punctuation">,</span>生存时间        request.scroll(TimeValue.timeValueMinutes(1L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//        <span class="token number">3</span>   指定查询条件        SearchSourceBuilder builder = new SearchSourceBuilder(<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder.size(<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder.sort(<span class="token string">"fee"</span><span class="token punctuation">,</span> SortOrder.DESC<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder.query(QueryBuilders.matchAllQuery(<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//        <span class="token number">4</span> 获取返回结果scrollid <span class="token punctuation">,</span>source        request.source(builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse response = client.search(request<span class="token punctuation">,</span> RequestOptions.DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        String scrollId = response.getScrollId(<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println(scrollId<span class="token punctuation">)</span><span class="token punctuation">;</span>        while (<span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>//       <span class="token number">5</span>  循环创建SearchScrollRequest            SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId<span class="token punctuation">)</span><span class="token punctuation">;</span>            // <span class="token number">6</span> 指定scrollid生存时间            scrollRequest.scroll(TimeValue.timeValueMinutes(1L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//        <span class="token number">7</span> 执行查询获取返回结果            SearchResponse scrollResp = client.scroll(scrollRequest<span class="token punctuation">,</span> RequestOptions.DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>//        <span class="token number">8</span>.判断是否得到数据，输出            if (scrollResp.getHits(<span class="token punctuation">)</span>.getHits(<span class="token punctuation">)</span> != <span class="token null">null</span> &amp;&amp; scrollResp.getHits(<span class="token punctuation">)</span>.getHits(<span class="token punctuation">)</span>.length > <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.println(<span class="token string">"=======下一页的数据========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                for (SearchHit hit <span class="token operator">:</span> scrollResp.getHits(<span class="token punctuation">)</span>.getHits(<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System.out.println(hit.getSourceAsMap(<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> else <span class="token punctuation">{</span>                //        <span class="token number">9</span>。判断没有查询到数据-退出循环                System.out.println(<span class="token string">"没得"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                break<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        // <span class="token number">10</span>  创建clearScrollRequest        ClearScrollRequest clearScrollRequest = new ClearScrollRequest(<span class="token punctuation">)</span><span class="token punctuation">;</span>        // <span class="token number">11</span> 指定scrollid        clearScrollRequest.addScrollId(scrollId<span class="token punctuation">)</span><span class="token punctuation">;</span>        // <span class="token number">12</span>  删除        client.clearScroll(clearScrollRequest<span class="token punctuation">,</span> RequestOptions.DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-7-delete-by-query"><a href="#3-7-delete-by-query" class="headerlink" title="3.7 delete-by-query"></a>3.7 delete-by-query</h4><p>根据term，match等查询方式去删除大量的文档</p><p>如果你需要删除的内容，是index下的大部分数据，不建议使用，建议逆向操作，创建新的索引，添加需要保留的数据内容</p><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_delete_by_query<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"ids"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"values"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DeleteByQueryRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteByQueryRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">idsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIds</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BulkByScrollResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">deleteByQuery</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-复合查询"><a href="#3-复合查询" class="headerlink" title="3.复合查询"></a>3.复合查询</h2><h3 id="3-1-bool查询"><a href="#3-1-bool查询" class="headerlink" title="3.1 ==bool查询=="></a>3.1 ==bool查询==</h3><p>复合过滤器，可以将多个查询条件以一定的逻辑组合在一起，and or</p><ul><li>must : 所有的条件，用must组合在一起，表示AND</li><li>must_not:将must_not中的条件，全部不能匹配，表示not的意思，不能匹配该查询条件</li><li>should: 所有条件，用should组合在一起，表示or的意思，文档必须匹配一个或者多个查询条件</li><li>filter: 过滤器，文档必须匹配该过滤条件，跟must子句的唯一区别是，filter不影响查询的score</li></ul><pre class=" language-java"><code class="language-java">POST <span class="token operator">/</span>sms_logs_index<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"province"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"四川"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"corpName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"中国"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"operatorid"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"2"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"smsContext"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"都"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">BoolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BoolQueryBuilder query <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    query<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span><span class="token string">"四川"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    query<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"corpName"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    query<span class="token punctuation">.</span><span class="token function">mustNot</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"operatorid"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    query<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"smsContext"</span><span class="token punctuation">,</span><span class="token string">"都"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-booting查询"><a href="#3-2-booting查询" class="headerlink" title="3.2 booting查询"></a>3.2 booting查询</h3><blockquote><p>boosting 查询可以帮助我们去影响查询后的score<br>   positive:只有匹配上positive 查询的内容，才会被放到返回的结果集中<br>   negative: 如果匹配上了positive 也匹配上了negative, 就可以 降低这样的文档score.<br>   negative_boost:指定系数,必须小于1   0.5<br>关于查询时，分数时如何计算的：<br>    搜索的关键字再文档中出现的频次越高，分数越高<br>    指定的文档内容越短，分数越高。<br>    我们再搜索时，指定的关键字也会被分词，这个被分词的内容，被分词库匹配的个数越多，分数就越高。</p></blockquote><pre class=" language-java"><code class="language-java">#boosting 查询POST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"boosting"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"positive"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string">"smsContent"</span><span class="token operator">:</span> <span class="token string">"战士"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token string">"negative"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token string">"smsContent"</span><span class="token operator">:</span> <span class="token string">"团队"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"negative_boost"</span><span class="token operator">:</span> <span class="token number">0.2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">boolSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  1.创建 searchRequest</span>        SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.指定查询条件</span>        SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BoolQueryBuilder boolQueryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoolQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// #省是 晋城 或者北京</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">,</span><span class="token string">"晋城"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//# 运营商不能是联通</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">mustNot</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"operatorId"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//#smsContent 包含 战士 和的</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span><span class="token string">"战士"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span><span class="token string">"的"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  3.执行查询</span>        SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.输出结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-filter-查询"><a href="#3-3-filter-查询" class="headerlink" title="3.3  filter 查询"></a>3.3  filter 查询</h3><blockquote><p>query 查询：根据你的查询条件，去计算文档的匹配度得到一个分数，并根据分数排序，不会做缓存的。</p><p>filter 查询：根据查询条件去查询文档，不去计算分数，而且filter会对经常被过滤的数据进行缓存</p></blockquote><pre class=" language-java"><code class="language-java">#filter 查询POST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"corpName"</span><span class="token operator">:</span> <span class="token string">"海尔智家公司"</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token string">"fee"</span><span class="token operator">:</span><span class="token punctuation">{</span>              <span class="token string">"lte"</span><span class="token operator">:</span><span class="token number">50</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">boostSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  1.创建 searchRequest</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.指定查询条件</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BoostingQueryBuilder boost <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boostingQuery</span><span class="token punctuation">(</span>        QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span> <span class="token string">"战士"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span> <span class="token string">"团队"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">negativeBoost</span><span class="token punctuation">(</span><span class="token number">0.2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boost<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  3.执行查询</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.输出结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-高亮查询"><a href="#3-4-高亮查询" class="headerlink" title="3.4 高亮查询"></a>3.4 高亮查询</h3><blockquote><pre><code>高亮查询就是用户输入的关键字，以一定特殊样式展示给用户，让用户知道为什么这个结果被检索出来高亮展示的数据，本身就是文档中的一个field,单独将field以highlight的形式返回给用户ES提供了一个highlight 属性，他和query 同级别。 frament_size: 指定高亮数据展示多少个字符回来 pre_tags:指定前缀标签&lt;front color=&quot;red&quot;&gt; post_tags:指定后缀标签 &lt;/font&gt;</code></pre></blockquote><pre class=" language-java"><code class="language-java">#highlight 高亮查询POST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"smsContent"</span><span class="token operator">:</span> <span class="token string">"团队"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"smsContent"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"pre_tags"</span><span class="token operator">:</span><span class="token string">"&lt;font color='red'>"</span><span class="token punctuation">,</span>    <span class="token string">"post_tags"</span><span class="token operator">:</span><span class="token string">"&lt;/font>"</span><span class="token punctuation">,</span>    <span class="token string">"fragment_size"</span><span class="token operator">:</span><span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.searchRequest</span>    SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    searchRequest<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.指定查询条件</span>    SearchSourceBuilder sourceBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BoolQueryBuilder boolBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boolBuilder<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"corpName"</span><span class="token punctuation">,</span><span class="token string">"海尔智家公司"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boolBuilder<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span><span class="token string">"fee"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sourceBuilder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>sourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  3.执行</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  4. 输出结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的分数是："</span><span class="token operator">+</span>hit<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-聚合查询"><a href="#3-5-聚合查询" class="headerlink" title="3.5 聚合查询"></a>3.5 聚合查询</h3><blockquote><pre><code>ES的聚合查询和mysql 的聚合查询类似，ES的聚合查询相比mysql 要强大得多。ES提供的统计数据的方式多种多样。</code></pre></blockquote><pre class=" language-java"><code class="language-java">#ES 聚合查询的RSTFul 语法POST <span class="token operator">/</span>index<span class="token operator">/</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>    <span class="token string">"aggs"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token string">"(名字)agg"</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token string">"agg_type"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token string">"属性"</span>：<span class="token string">"值"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">highLightQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1.创建request</span>        SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 2.指定查询条件，指定高亮</span>        SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span><span class="token string">"团队"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HighlightBuilder highlightBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        highlightBuilder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">preTags</span><span class="token punctuation">(</span><span class="token string">"&lt;font colr='red'>"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">postTags</span><span class="token punctuation">(</span><span class="token string">"&lt;/font>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span>highlightBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3.执行</span>        SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 输出结果</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SearchHit hit <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"smsContent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-5-1-去重计数"><a href="#3-5-1-去重计数" class="headerlink" title="3.5.1 去重计数"></a>3.5.1 去重计数</h4><pre><code>去重计数，cardinality 先将返回的文档中的一个指定的field进行去重，统计一共有多少条</code></pre><pre class=" language-java"><code class="language-java"># 去重计数 查询 provincePOST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"provinceAgg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"cardinality"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"province"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aggCardinalityC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.创建request</span>    SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 指定使用聚合查询方式</span>    SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">cardinality</span><span class="token punctuation">(</span><span class="token string">"provinceAgg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.执行查询</span>    SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.输出返回结果</span>    Cardinality agg <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"provinceAgg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>agg<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-2-范围统计"><a href="#3-5-2-范围统计" class="headerlink" title="3.5.2 范围统计"></a>3.5.2 范围统计</h4><pre><code>统计一定范围内出现的文档个数，比如，针对某一个field 的值再0~100,100~200,200~300 之间文档出现的个数分别是多少范围统计 可以针对 普通的数值，针对时间类型，针对ip类型都可以响应。数值 rang    时间  date_rang     ip   ip_rang</code></pre><pre class=" language-java"><code class="language-java">#针对数值方式的范围统计  from 带等于效果 ，to 不带等于效果POST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"agg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"fee"</span><span class="token punctuation">,</span>        <span class="token string">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token string">"to"</span><span class="token operator">:</span> <span class="token number">30</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token punctuation">{</span>            <span class="token string">"from"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>            <span class="token string">"to"</span><span class="token operator">:</span> <span class="token number">60</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"from"</span><span class="token operator">:</span> <span class="token number">60</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#时间方式统计POST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"agg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"date_range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"sendDate"</span><span class="token punctuation">,</span>        <span class="token string">"format"</span><span class="token operator">:</span> <span class="token string">"yyyy"</span><span class="token punctuation">,</span>         <span class="token string">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token string">"to"</span><span class="token operator">:</span> <span class="token string">"2000"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token string">"from"</span><span class="token operator">:</span> <span class="token string">"2000"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>#ip 方式 范围统计POST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"agg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"ip_range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"ipAddr"</span><span class="token punctuation">,</span>        <span class="token string">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token string">"to"</span><span class="token operator">:</span> <span class="token string">"127.0.0.8"</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"from"</span><span class="token operator">:</span> <span class="token string">"127.0.0.8"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aggRang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建request</span>        SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 指定使用聚合查询方式</span>        SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">"agg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"fee"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addUnboundedTo</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addUnboundedFrom</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.执行查询</span>        SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.输出返回结果</span>        Range agg <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"agg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Range<span class="token punctuation">.</span>Bucket bucket <span class="token operator">:</span> agg<span class="token punctuation">.</span><span class="token function">getBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String key <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">getKeyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object from <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">getFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object to <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">getTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> docCount <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">getDocCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"key: %s ,from: %s ,to: %s ,docCount: %s"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>from<span class="token punctuation">,</span>to<span class="token punctuation">,</span>docCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-5-3-统计查询"><a href="#3-5-3-统计查询" class="headerlink" title="3.5.3 统计查询"></a>3.5.3 统计查询</h4><pre class=" language-java"><code class="language-java">他可以帮你查询指定field 的最大值，最小值，平均值，平方和<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>使用 extended_stats#统计聚合查询 extended_statsPOST <span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>index<span class="token operator">/</span>sms<span class="token operator">-</span>logs<span class="token operator">-</span>type<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"agg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"extended_stats"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"fee"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// java实现   </span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aggExtendedStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.创建request</span>        SearchRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">types</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 指定使用聚合查询方式</span>        SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">extendedStats</span><span class="token punctuation">(</span><span class="token string">"agg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"fee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.执行查询</span>        SearchResponse response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.输出返回结果</span>       ExtendedStats extendedStats <span class="token operator">=</span>  response<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"agg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值："</span><span class="token operator">+</span>extendedStats<span class="token punctuation">.</span><span class="token function">getMaxAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",最小值："</span><span class="token operator">+</span>extendedStats<span class="token punctuation">.</span><span class="token function">getMinAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-5-4-分类查询-应用"><a href="#3-5-4-分类查询-应用" class="headerlink" title="3.5.4 分类查询(应用)"></a>3.5.4 分类查询(应用)</h4><pre class=" language-java"><code class="language-java">GET article_nested<span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"dataflag"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"value"</span><span class="token operator">:</span> <span class="token string">"1"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token string">"constant_score"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token string">"pubtime"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token string">"gte"</span><span class="token operator">:</span> <span class="token string">"2021-03-22 00:00:00"</span><span class="token punctuation">,</span>                  <span class="token string">"lte"</span><span class="token operator">:</span> <span class="token string">"2021-03-22 23:59:59"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"boost"</span><span class="token operator">:</span> <span class="token number">1.2</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"aggs"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token string">"web_url"</span><span class="token operator">:</span><span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"websiteZh"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getWebSiteCategoryToday</span><span class="token punctuation">(</span>RealTimeNewCategory realTimeNewCategory<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RealTimeNewCategoryVo<span class="token operator">></span> vos<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SearchRequest searchRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchRequest</span><span class="token punctuation">(</span>KdConstant<span class="token punctuation">.</span>ELASTICSEARCH<span class="token punctuation">.</span>ESALIAS<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchSourceBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SearchSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BoolQueryBuilder boolQueryBuilder <span class="token operator">=</span> QueryBuilders<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"dataflag"</span><span class="token punctuation">,</span> realTimeNewCategory<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String format <span class="token operator">=</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolQueryBuilder<span class="token punctuation">.</span><span class="token function">must</span><span class="token punctuation">(</span>QueryBuilders<span class="token punctuation">.</span><span class="token function">rangeQuery</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>PUBTIME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>format <span class="token operator">+</span> <span class="token string">" 00:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>format <span class="token operator">+</span> <span class="token string">" 23:59:59"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>boolQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">aggregation</span><span class="token punctuation">(</span>AggregationBuilders<span class="token punctuation">.</span><span class="token function">terms</span><span class="token punctuation">(</span><span class="token string">"web_url"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"websiteZh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        searchRequest<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>        SearchResponse searchResponse <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            searchResponse <span class="token operator">=</span> highLevelClient<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchRequest<span class="token punctuation">,</span> RequestOptions<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>KdUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>searchResponse<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Terms terms <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getAggregations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"web_url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>KdUtil<span class="token punctuation">.</span><span class="token function">getTableSize</span><span class="token punctuation">(</span>vos<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Terms<span class="token punctuation">.</span>Bucket bucket <span class="token operator">:</span> terms<span class="token punctuation">.</span><span class="token function">getBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bucket<span class="token punctuation">.</span><span class="token function">getKeyAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">getDocCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RealTimeNewCategoryVo vo <span class="token operator">:</span> vos<span class="token punctuation">)</span> <span class="token punctuation">{</span>                vo<span class="token punctuation">.</span><span class="token function">setToday</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>vo<span class="token punctuation">.</span><span class="token function">getWebsiteZh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;···1-ES-Java-API&quot;&gt;&lt;a href=&quot;#···1-ES-Java-API&quot; class=&quot;headerlink&quot; title=&quot;···1.ES Java API&quot;&gt;&lt;/a&gt;···1.ES Java API&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://liuhuaqiang.top/tags/Java/"/>
    
      <category term="elsaticsearch" scheme="https://liuhuaqiang.top/tags/elsaticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Java-Feature</title>
    <link href="https://liuhuaqiang.top/2020/12/24/java-feature/"/>
    <id>https://liuhuaqiang.top/2020/12/24/java-feature/</id>
    <published>2020-12-24T03:03:18.000Z</published>
    <updated>2021-02-07T08:01:18.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Feature"><a href="#Java-Feature" class="headerlink" title="Java Feature"></a>Java Feature</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lhq<span class="token punctuation">.</span>Main<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>Feature<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 刘华强 * @Classname main * @Description TODO * @Date 06/12/2020 14:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> task1 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> submit1 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> submit2 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">234</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Long<span class="token operator">></span> submit3 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 345L<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Integer b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> submit4 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> s <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>submit1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是123啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        submit2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-Feature&quot;&gt;&lt;a href=&quot;#Java-Feature&quot; class=&quot;headerlink&quot; title=&quot;Java Feature&quot;&gt;&lt;/a&gt;Java Feature&lt;/h1&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;code
      
    
    </summary>
    
    
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://liuhuaqiang.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>arch安装教程</title>
    <link href="https://liuhuaqiang.top/2020/12/24/arch-an-zhuang-jiao-cheng/"/>
    <id>https://liuhuaqiang.top/2020/12/24/arch-an-zhuang-jiao-cheng/</id>
    <published>2020-12-24T01:07:34.000Z</published>
    <updated>2020-12-24T02:59:02.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ArchLinux记一次装"><a href="#ArchLinux记一次装" class="headerlink" title="ArchLinux记一次装"></a>ArchLinux记一次装</h1><p>设置字体大小</p><pre class=" language-bash"><code class="language-bash">setfont /usr/share/kbd/consolefonts/LatGrkCyr-12x22<span class="token punctuation">..</span>psfu.gz</code></pre><p>查看是不uif打开的</p><pre class=" language-shell"><code class="language-shell">ls /sys/firmware/efi/efivars</code></pre><p>如果你用的有线,那没事了</p><p>如果你是无线</p><blockquote><p>方法一</p></blockquote><pre class=" language-shell"><code class="language-shell">ip link set wlan0 up #打开wifiiwlist wlan0 scan | grep ESSID  #扫描wifiwpa_passphrase wifi名字 wifi密码 > internet.conf #配置wifiwpa_supplicant -c internet.conf -i wlan0 &  #后台连接wifidhcpcd & #就能用wifi了 或者systemctl start dhcpcd</code></pre><blockquote><p>方法二</p></blockquote><pre class=" language-shell"><code class="language-shell">iwctl #开启wifidevice list # 查看网卡station wlan0 scan # 扫描station wlan0 get-networks # 得到wifi名字station wlan0 cennect wifi名字 # 连接wifi，输入密码exitdhcpcd & #就能用wifi了 或者systemctl start dhcpcd</code></pre><p>设置系统时钟</p><pre class=" language-shell"><code class="language-shell">timedatectl set-ntp true</code></pre><p>分区</p><blockquote><p>方法一</p></blockquote><p><img src="/2020/12/24/arch-an-zhuang-jiao-cheng/2.png" alt="1"></p><pre class=" language-shell"><code class="language-shell">fdisk -l # 查看分区fdisk /dev/sda # 进入分区p # 查看分区信息g 初始化分区为grpn #新建分区 一般有boot分区，home分区，swap分区w # 写入</code></pre><blockquote><p>方法二</p></blockquote><p><img src="/2020/12/24/arch-an-zhuang-jiao-cheng/3.png" alt="2"></p><pre class=" language-shell"><code class="language-shell">cfdisk #这工具，有手就行</code></pre><p>==设置分区系统==</p><pre class=" language-shell"><code class="language-shell">mkfs.fat -F32 /dev/sda1 # 引导mkfs.ext4 /dev/sda2 # 系统主分区的文件格式mkswap /dev/sda3 # 制作swapswapon /dev/sda3 # 打开swap</code></pre><p>编辑镜像</p><pre class=" language-shell"><code class="language-shell">vim  /etc/pacman.conf  #把Color的注释去掉vim /etc/pacman.d/mirrorlist # 修改镜像源</code></pre><p>挂载</p><pre class=" language-shell"><code class="language-shell">mount /dev/sda2 /mntmkdir /mnt/bootmount /dev/sda1 /mnt/boot</code></pre><p>安装arch系统</p><pre class=" language-shell"><code class="language-shell">pacstrap /mnt  base linux linux-firmware dhcpcd  neovim sudo vi wpa_supplicant</code></pre><p>生成启动文件</p><pre class=" language-shell"><code class="language-shell">genfstab -U /mnt >> /mnt/etc/fstab</code></pre><p>可以进入archlinux系统的</p><pre class=" language-shell"><code class="language-shell">arch-chroot /mnt进入后,更新时区ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc # 同步系统时间exit</code></pre><p>生成本地化</p><pre class=" language-shell"><code class="language-shell">把zh_CN.UTF-8 UTF-8 ,es_US.UTF-8 UTF-8 的注释去掉arch-chroot /mntlocale-genexit</code></pre><p>修改区域语言</p><pre class=" language-shell"><code class="language-shell">vim /mnt/etc/locale.conf 加入LANG=en_US.UTF-8</code></pre><p>修改机器的名字</p><pre class=" language-shell"><code class="language-shell">vim /mnt/ect/hostname</code></pre><p>修改机器本地网络配置</p><pre class=" language-shell"><code class="language-shell">vim /mnt/etc/hosts127.0.0.1    localhost::1            localhost127.0.0.1    anlen.localdomain anlen</code></pre><p>修改root密码</p><pre class=" language-shell"><code class="language-shell">arch-chroot /mntpasswd root</code></pre><p>修改引导选择</p><pre class=" language-shell"><code class="language-shell">注意:在archlinux里面操作  arch-chroot /mntpacman -S grub efibootmgr intel-ucode os-probermkdir /boot/grub # 创建文件夹grub-mkconfig > /boot/grub/grub.cfg # 生成配置文件uname -m # 查看架构grub-install --target=x86_64 --efi-directory=/boot</code></pre><p>以上,完成</p><h1 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h1><pre class=" language-shell"><code class="language-shell">useradd -m -G wheel lhqpassword lhqEDITOR=/usr/bin/nvim visudo 把%wheel ALL=(ALL) ALL 的注释去掉</code></pre><h1 id="初始化一些东西"><a href="#初始化一些东西" class="headerlink" title="初始化一些东西"></a>初始化一些东西</h1><pre class=" language-shell"><code class="language-shell">pacman -S man base-develpacman -S git git clone https://aur.archlinux.org/yay.git --depth=1cd yaymakepkg -si</code></pre><p>安装桌面环境</p><pre class=" language-shell"><code class="language-shell">pacman -S plasma-meta konsole dolphin  #安装plasma-meta元软件包 直接回车回车systemctl enable sddmvim /etc/pacman.conf去掉[multilib]一节中两行的注释，来开启 32 位库支持。在文档结尾处加入下面的文字，来开启 ArchLinuxCN 源。[archlinuxcn]Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch上面服务器的地址是清华的，也可用下面中科大的Server = https://mirrors.ustc.edu.cn/archlinuxcn/$archsudo pacman -S archlinuxcn-keyring                                          #cn源中的签名(archlinuxcn-keyring在archLinuxCn)</code></pre><p>输入法,字体</p><pre class=" language-shell"><code class="language-shell">sudo pacman -S ntfs-3g                                                      #识别NTFS格式的硬盘sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei                   #安装几个开源中文字体sudo pacman -S adobe-source-han-serif-kr-fonts noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra  #安装谷歌开源字体及表情sudo pacman -S firefox chromium                                             #安装常用的火狐、谷歌浏览器sudo pacman -S ark                                                          #与dolphin同用右键解压sudo pacman -S gwenview                                                     #图片查看器sudo pacman -S fcitx5-im #基础包组sudo pacman -S fcitx5-chinese-addons #官方中文输入引擎sudo pacman -S fcitx5-pinyin-moegirl #萌娘百科词库 二刺猿必备(ArchLinuxCn)sudo pacman -S fcitx5-material-color #主题设置环境变量 编辑文件 vim ~/.pam_environment 加入以下内容。konsole 以及 dophin 都需要这些环境变量，倒是 chrome 和 firefox 都不需要就可以输入中文INPUT_METHOD DEFAULT=fcitx5GTK_IM_MODULE DEFAULT=fcitx5QT_IM_MODULE DEFAULT=fcitx5XMODIFIERS DEFAULT=\@im=fcitx5启动蓝牙(若有)sudo systemctl enable --now bluetoothpacman -S opensshsystemctl enable sshd</code></pre><p>文档:<a href="https://archlinuxstudio.github.io/" target="_blank" rel="noopener">https://archlinuxstudio.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ArchLinux记一次装&quot;&gt;&lt;a href=&quot;#ArchLinux记一次装&quot; class=&quot;headerlink&quot; title=&quot;ArchLinux记一次装&quot;&gt;&lt;/a&gt;ArchLinux记一次装&lt;/h1&gt;&lt;p&gt;设置字体大小&lt;/p&gt;
&lt;pre class=&quot; la
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Screen的使用</title>
    <link href="https://liuhuaqiang.top/2020/11/17/screen-de-shi-yong/"/>
    <id>https://liuhuaqiang.top/2020/11/17/screen-de-shi-yong/</id>
    <published>2020-11-17T00:51:38.000Z</published>
    <updated>2020-12-24T02:59:11.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、screen"><a href="#1、screen" class="headerlink" title="1、screen"></a>1、screen</h1><h2 id="新建一个会话"><a href="#新建一个会话" class="headerlink" title="**新建一个会话"></a>**新建一个会话</h2><pre class=" language-sh"><code class="language-sh">screen -S name</code></pre><h2 id="如果你在当前会话中，想要杀死这个会话"><a href="#如果你在当前会话中，想要杀死这个会话" class="headerlink" title="*如果你在当前会话中，想要杀死这个会话: *"></a>*<em>如果你在当前会话中，想要杀死这个会话: *</em></h2><pre class=" language-shell"><code class="language-shell">exit</code></pre><h2 id="如果你不在会话中想要杀死这个会话"><a href="#如果你不在会话中想要杀死这个会话" class="headerlink" title="*如果你不在会话中想要杀死这个会话: *"></a>*<em>如果你不在会话中想要杀死这个会话: *</em></h2><pre class=" language-shell"><code class="language-shell">screen -X -S name quit</code></pre><h2 id="如果你在当前会话中想要退出，不杀死这个回话"><a href="#如果你在当前会话中想要退出，不杀死这个回话" class="headerlink" title="如果你在当前会话中想要退出，不杀死这个回话:"></a><strong>如果你在当前会话中想要退出，不杀死这个回话:</strong></h2><pre class=" language-shell"><code class="language-shell">ctrl+a+d</code></pre><h2 id="如果你不在当前会话中想关闭远程的正在演示的会话-只是让它退出，不会被杀死"><a href="#如果你不在当前会话中想关闭远程的正在演示的会话-只是让它退出，不会被杀死" class="headerlink" title="如果你不在当前会话中想关闭远程的正在演示的会话(只是让它退出，不会被杀死):"></a><strong>如果你不在当前会话中想关闭远程的正在演示的会话(只是让它退出，不会被杀死):</strong></h2><pre class=" language-shell"><code class="language-shell">screen -d name</code></pre><h2 id="重进会话"><a href="#重进会话" class="headerlink" title="重进会话:"></a><strong>重进会话:</strong></h2><pre class=" language-shell"><code class="language-shell">screen -rx name</code></pre><h2 id="查看当前会话"><a href="#查看当前会话" class="headerlink" title="查看当前会话:"></a><strong>查看当前会话:</strong></h2><pre class=" language-shell"><code class="language-shell">screen -ls</code></pre><h2 id="清除没用的会话"><a href="#清除没用的会话" class="headerlink" title="清除没用的会话:"></a><strong>清除没用的会话:</strong></h2><pre class=" language-shell"><code class="language-shell">screen -wipe</code></pre><h2 id="不在当前会话中发送给那个会话一个字符串"><a href="#不在当前会话中发送给那个会话一个字符串" class="headerlink" title="不在当前会话中发送给那个会话一个字符串:"></a><strong>不在当前会话中发送给那个会话一个字符串:</strong></h2><pre class=" language-shell"><code class="language-shell">screen -x -S name -p 0 -X stuff" 字符串"</code></pre><h1 id="2、语法"><a href="#2、语法" class="headerlink" title="2、语法"></a>2、语法</h1><pre><code>$&gt; screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</code></pre><p>-A 　将所有的视窗都调整为目前终端机的大小。<br>-d &lt;作业名称&gt; 　将指定的screen作业离线。<br>-h &lt;行数&gt; 　指定视窗的缓冲区行数。<br>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。<br>-r &lt;作业名称&gt; 　恢复离线的screen作业。<br>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。<br>-s 　指定建立新视窗时，所要执行的shell。<br>-S &lt;作业名称&gt; 　指定screen作业的名称。<br>-v 　显示版本信息。<br>-x 　恢复之前离线的screen作业。<br>-ls或–list 　显示目前所有的screen作业。<br>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</p><hr><h1 id="3、常用screen参数"><a href="#3、常用screen参数" class="headerlink" title="3、常用screen参数"></a>3、常用screen参数</h1><p>screen -S yourname -&gt; 新建一个叫yourname的session<br>screen -ls -&gt; 列出当前所有的session<br>screen -r yourname -&gt; 回到yourname这个session<br>screen -d yourname -&gt; 远程detach某个session<br>screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</p><hr><h1 id="4、在Session下，使用ctrl-a-C-a"><a href="#4、在Session下，使用ctrl-a-C-a" class="headerlink" title="4、在Session下，使用ctrl+a(C-a)"></a>4、在Session下，使用ctrl+a(C-a)</h1><p>C-a ? -&gt; 显示所有键绑定信息<br>C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口<br>C-a n -&gt; Next，切换到下一个 window<br>C-a p -&gt; Previous，切换到前一个 window<br>C-a 0..9 -&gt; 切换到第 0..9 个 window<br>Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9<br>C-a C-a -&gt; 在两个最近使用的 window 间切换<br>C-a x -&gt; 锁住当前的 window，需用用户密码解锁<br>C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。<br>C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。<br>C-a w -&gt; 显示所有窗口列表<br>C-a t -&gt; time，显示当前时间，和系统的 load<br>C-a k -&gt; kill window，强行关闭当前的 window<br>C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样<br>C-b Backward，PageUp<br>C-f Forward，PageDown<br>H(大写) High，将光标移至左上角<br>L Low，将光标移至左下角<br>0 移到行首<br>$ 行末<br>w forward one word，以字为单位往前移<br>b backward one word，以字为单位往后移<br>Space 第一次按为标记区起点，第二次按为终点<br>Esc 结束 copy mode<br>C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、screen&quot;&gt;&lt;a href=&quot;#1、screen&quot; class=&quot;headerlink&quot; title=&quot;1、screen&quot;&gt;&lt;/a&gt;1、screen&lt;/h1&gt;&lt;h2 id=&quot;新建一个会话&quot;&gt;&lt;a href=&quot;#新建一个会话&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="linux" scheme="https://liuhuaqiang.top/tags/linux/"/>
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>python协程异步</title>
    <link href="https://liuhuaqiang.top/2020/11/15/python-xie-cheng-yi-bu/"/>
    <id>https://liuhuaqiang.top/2020/11/15/python-xie-cheng-yi-bu/</id>
    <published>2020-11-15T14:02:45.000Z</published>
    <updated>2021-02-07T08:01:21.474Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pythonav.com/wiki/detail/6/91/" target="_blank" rel="noopener">协程博客</a></p><p><a href="https://docs.python.org/zh-cn/3.7/library/asyncio.html" target="_blank" rel="noopener">官方携程教程</a></p><p><a href="https://www.bilibili.com/video/BV1Ke411W71L" target="_blank" rel="noopener">协程教程视频</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pythonav.com/wiki/detail/6/91/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;协程博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3.
      
    
    </summary>
    
    
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://liuhuaqiang.top/tags/python/"/>
    
      <category term="协程" scheme="https://liuhuaqiang.top/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQLlite</title>
    <link href="https://liuhuaqiang.top/2020/11/04/sqllite/"/>
    <id>https://liuhuaqiang.top/2020/11/04/sqllite/</id>
    <published>2020-11-04T06:34:10.000Z</published>
    <updated>2020-12-24T02:59:25.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-使用轻量级数据库SQLlite"><a href="#python-使用轻量级数据库SQLlite" class="headerlink" title="python 使用轻量级数据库SQLlite"></a>python 使用轻量级数据库SQLlite</h1><h2 id="先创建出一个db文件"><a href="#先创建出一个db文件" class="headerlink" title="先创建出一个db文件"></a>先创建出一个db文件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sqlite3conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="建表-也可以用图像界面软件建表"><a href="#建表-也可以用图像界面软件建表" class="headerlink" title="建表,也可以用图像界面软件建表"></a>建表,也可以用图像界面软件建表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span><span class="token punctuation">(</span>    id   <span class="token keyword">integer</span>  <span class="token operator">not</span> <span class="token boolean">null</span>        <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    age  <span class="token keyword">int</span>  <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>PS: 主键是integer才能自增</p><h2 id="进行sql语句封装"><a href="#进行sql语句封装" class="headerlink" title="进行sql语句封装"></a>进行sql语句封装</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sqlite3<span class="token keyword">def</span> <span class="token function">cmdSql</span><span class="token punctuation">(</span>sql<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取游标</span>        c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 执行语句</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> f<span class="token triple-quoted-string string">'''    insert into user(name, age) VALUES ("刘华强",{x});    '''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cmdSql<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cmdSqlSelect</span><span class="token punctuation">(</span>sql<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">:</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取游标</span>        ret <span class="token operator">=</span> list<span class="token punctuation">(</span>c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 执行语句</span>        <span class="token keyword">return</span> ret    <span class="token keyword">finally</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-使用轻量级数据库SQLlite&quot;&gt;&lt;a href=&quot;#python-使用轻量级数据库SQLlite&quot; class=&quot;headerlink&quot; title=&quot;python 使用轻量级数据库SQLlite&quot;&gt;&lt;/a&gt;python 使用轻量级数据库SQLli
      
    
    </summary>
    
    
    
      <category term="技术" scheme="https://liuhuaqiang.top/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://liuhuaqiang.top/tags/python/"/>
    
      <category term="sql" scheme="https://liuhuaqiang.top/tags/sql/"/>
    
  </entry>
  
</feed>
